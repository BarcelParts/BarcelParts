{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionsOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass OptionsOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    coll.s.db.listCollections({\n      name: coll.collectionName\n    }, { ...this.options,\n      nameOnly: false,\n      readPreference: this.readPreference,\n      session\n    }).toArray((err, collections) => {\n      if (err || !collections) return callback(err);\n\n      if (collections.length === 0) {\n        // TODO(NODE-3485)\n        return callback(new error_1.MongoAPIError(`collection ${coll.namespace} not found`));\n      }\n\n      callback(err, collections[0].options);\n    });\n  }\n\n}\n\nexports.OptionsOperation = OptionsOperation;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAIA;AAEA;;;AACA,MAAaA,gBAAb,SAAsCC,6BAAtC,CAAiE;AAI/DC,cAAYC,UAAZ,EAAoCC,OAApC,EAA6D;AAC3D,UAAMA,OAAN;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACD;;AAEQE,SAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGc;AAE5B,UAAMC,IAAI,GAAG,KAAKN,UAAlB;AAEAM,QAAI,CAACC,CAAL,CAAOC,EAAP,CACGC,eADH,CAEI;AAAEC,UAAI,EAAEJ,IAAI,CAACK;AAAb,KAFJ,EAGI,EAAE,GAAG,KAAKV,OAAV;AAAmBW,cAAQ,EAAE,KAA7B;AAAoCC,oBAAc,EAAE,KAAKA,cAAzD;AAAyET;AAAzE,KAHJ,EAKGU,OALH,CAKW,CAACC,GAAD,EAAMC,WAAN,KAAqB;AAC5B,UAAID,GAAG,IAAI,CAACC,WAAZ,EAAyB,OAAOX,QAAQ,CAACU,GAAD,CAAf;;AACzB,UAAIC,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B;AACA,eAAOZ,QAAQ,CAAC,IAAIa,qBAAJ,CAAkB,cAAcZ,IAAI,CAACa,SAAS,YAA9C,CAAD,CAAf;AACD;;AAEDd,cAAQ,CAACU,GAAD,EAAMC,WAAW,CAAC,CAAD,CAAX,CAAef,OAArB,CAAR;AACD,KAbH;AAcD;;AA/B8D;;AAAjEmB","names":["OptionsOperation","operation_1","constructor","collection","options","execute","server","session","callback","coll","s","db","listCollections","name","collectionName","nameOnly","readPreference","toArray","err","collections","length","error_1","namespace","exports"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\options_operation.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoAPIError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AbstractOperation, OperationOptions } from './operation';\n\n/** @internal */\nexport class OptionsOperation extends AbstractOperation<Document> {\n  override options: OperationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: OperationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const coll = this.collection;\n\n    coll.s.db\n      .listCollections(\n        { name: coll.collectionName },\n        { ...this.options, nameOnly: false, readPreference: this.readPreference, session }\n      )\n      .toArray((err, collections) => {\n        if (err || !collections) return callback(err);\n        if (collections.length === 0) {\n          // TODO(NODE-3485)\n          return callback(new MongoAPIError(`collection ${coll.namespace} not found`));\n        }\n\n        callback(err, collections[0].options);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}