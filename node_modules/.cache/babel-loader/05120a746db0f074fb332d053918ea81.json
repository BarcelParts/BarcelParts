{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diogo\\\\Documents\\\\GitHub\\\\BarcelParts\\\\src\\\\Services\\\\login.js\";\nimport { GoogleLogin } from 'react-google-login';\nimport ProductDataService from \"../Services/Barcelparts.js\";\nimport React from \"react\";\nimport http from \"../http-common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\n\nfunction Login() {\n  // function that verifies if the user exists and if it doesn't creates a new user\n  const verifyIfUserExists = userData => {\n    ProductDataService.findUser(userData).then(response => {\n      //console.log(response.data)\n      //Verifies if the user exists in the database\n      if (response.data == null) {\n        //If the user doesn't exist create a new user in the database              \n        ProductDataService.createUser(userData).then(response => {\n          //Receives the response and displays if the user was created or not\n          console.log(response.data);\n        }) //If there is an error catches it and displays it in the console\n        .catch(e => {\n          console.log(e);\n        });\n      }\n    }) //If there is an error catches it and displays it in the console\n    .catch(e => {\n      console.log(e);\n    });\n  };\n\n  const onSuccess = res => {\n    //we receive a token that we need to validate/decode to obtain the user info\n    //console.log(\"received token = \" + res.tokenId)\n    // TODO this should be done by the server I believe, not in the frontend\n    //send the token to google to be decoded\n    http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + res.tokenId).then(response => {\n      //use the decoded token to get the user info\n      var userData = {\n        \"Email\": response.data.email,\n        \"User_FirstName\": response.data.given_name,\n        \"User_LastName\": response.data.family_name,\n        \"User_Image\": response.data.picture\n      };\n      verifyIfUserExists(userData);\n      console.log(\"LOGIN SUCCESS!\");\n\n      var CryptoJS = require(\"crypto-js\"); //Encrypt THE COOKIE and add it to the browser\n\n\n      document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(res.tokenId, 'secret key 123').toString(); //window.location.href = \"/\";\n      //this line would redirect the user to the main page after login, but the  it doesn't create a user if it doesn't exist\n\n      console.log(process.env.BARCELPARTS_URI);\n    });\n  };\n\n  const onFailure = res => {\n    console.log(\"LOGIN FAILED! res: \", res);\n    alert(\"LOGIN FAILED! \\n Please try again... \");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: clientId,\n      buttonText: \"Login\",\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      cookiePolicy: 'single_host_origin',\n      responseType: \"id_token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Diogo/Documents/GitHub/BarcelParts/src/Services/login.js"],"names":["GoogleLogin","ProductDataService","React","http","clientId","Login","verifyIfUserExists","userData","findUser","then","response","data","createUser","console","log","catch","e","onSuccess","res","get","tokenId","email","given_name","family_name","picture","CryptoJS","require","document","cookie","AES","encrypt","toString","process","env","BARCELPARTS_URI","onFailure","alert"],"mappings":";AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,QAAQ,GAAG,2EAAjB;;AAEA,SAASC,KAAT,GAAiB;AAEb;AACA,QAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrCN,IAAAA,kBAAkB,CAACO,QAAnB,CAA4BD,QAA5B,EACKE,IADL,CACUC,QAAQ,IAAI;AACd;AACA;AACA,UAAIA,QAAQ,CAACC,IAAT,IAAiB,IAArB,EAA2B;AACvB;AACAV,QAAAA,kBAAkB,CAACW,UAAnB,CAA8BL,QAA9B,EACKE,IADL,CACUC,QAAQ,IAAI;AACd;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAArB;AACH,SAJL,EAKI;AALJ,SAMKI,KANL,CAMWC,CAAC,IAAI;AACRH,UAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH,SARL;AASH;AACJ,KAhBL,EAiBI;AAjBJ,KAkBKD,KAlBL,CAkBWC,CAAC,IAAI;AACRH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH,KApBL;AAqBH,GAtBD;;AAwBA,QAAMC,SAAS,GAAIC,GAAD,IAAS;AACvB;AACA;AAEA;AACA;AACAf,IAAAA,IAAI,CAACgB,GAAL,CAAU,0DAAD,GAA6DD,GAAG,CAACE,OAA1E,EACKX,IADL,CACUC,QAAQ,IAAI;AAEd;AACA,UAAIH,QAAQ,GAAG;AACX,iBAASG,QAAQ,CAACC,IAAT,CAAcU,KADZ;AAEX,0BAAkBX,QAAQ,CAACC,IAAT,CAAcW,UAFrB;AAGX,yBAAiBZ,QAAQ,CAACC,IAAT,CAAcY,WAHpB;AAIX,sBAAcb,QAAQ,CAACC,IAAT,CAAca;AAJjB,OAAf;AAOAlB,MAAAA,kBAAkB,CAACC,QAAD,CAAlB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAEA,UAAIW,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB,CAbc,CAcd;;;AACAC,MAAAA,QAAQ,CAACC,MAAT,GAAkB,kBAAkBH,QAAQ,CAACI,GAAT,CAAaC,OAAb,CAAqBZ,GAAG,CAACE,OAAzB,EAAkC,gBAAlC,EAAoDW,QAApD,EAApC,CAfc,CAgBd;AACA;;AAEAlB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,OAAO,CAACC,GAAR,CAAYC,eAAxB;AACH,KArBL;AAsBH,GA5BD;;AA8BA,QAAMC,SAAS,GAAIjB,GAAD,IAAS;AACvBL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,GAAnC;AACAkB,IAAAA,KAAK,CAAC,uCAAD,CAAL;AAEH,GAJD;;AAMA,sBACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,2BACI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAEhC,QADd;AAEI,MAAA,UAAU,EAAC,OAFf;AAGI,MAAA,SAAS,EAAEa,SAHf;AAII,MAAA,SAAS,EAAEkB,SAJf;AAKI,MAAA,YAAY,EAAE,oBALlB;AAMI,MAAA,YAAY,EAAC;AANjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;KA3EQ9B,K;AA6ET,eAAeA,KAAf","sourcesContent":["import { GoogleLogin } from 'react-google-login';\r\nimport ProductDataService from \"../Services/Barcelparts.js\"\r\nimport React from \"react\";\r\nimport http from \"../http-common\";\r\n\r\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\r\n\r\nfunction Login() {\r\n\r\n    // function that verifies if the user exists and if it doesn't creates a new user\r\n    const verifyIfUserExists = (userData) => {\r\n        ProductDataService.findUser(userData)\r\n            .then(response => {\r\n                //console.log(response.data)\r\n                //Verifies if the user exists in the database\r\n                if (response.data == null) {\r\n                    //If the user doesn't exist create a new user in the database              \r\n                    ProductDataService.createUser(userData)\r\n                        .then(response => {\r\n                            //Receives the response and displays if the user was created or not\r\n                            console.log(response.data)\r\n                        })\r\n                        //If there is an error catches it and displays it in the console\r\n                        .catch(e => {\r\n                            console.log(e);\r\n                        });\r\n                }\r\n            })\r\n            //If there is an error catches it and displays it in the console\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    const onSuccess = (res) => {\r\n        //we receive a token that we need to validate/decode to obtain the user info\r\n        //console.log(\"received token = \" + res.tokenId)\r\n\r\n        // TODO this should be done by the server I believe, not in the frontend\r\n        //send the token to google to be decoded\r\n        http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + res.tokenId)\r\n            .then(response => {\r\n\r\n                //use the decoded token to get the user info\r\n                var userData = {\r\n                    \"Email\": response.data.email,\r\n                    \"User_FirstName\": response.data.given_name,\r\n                    \"User_LastName\": response.data.family_name,\r\n                    \"User_Image\": response.data.picture,\r\n                }\r\n\r\n                verifyIfUserExists(userData);\r\n                console.log(\"LOGIN SUCCESS!\")\r\n\r\n                var CryptoJS = require(\"crypto-js\");\r\n                //Encrypt THE COOKIE and add it to the browser\r\n                document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(res.tokenId, 'secret key 123').toString();\r\n                //window.location.href = \"/\";\r\n                //this line would redirect the user to the main page after login, but the  it doesn't create a user if it doesn't exist\r\n\r\n                console.log(process.env.BARCELPARTS_URI)\r\n            })\r\n    }\r\n\r\n    const onFailure = (res) => {\r\n        console.log(\"LOGIN FAILED! res: \", res)\r\n        alert(\"LOGIN FAILED! \\n Please try again... \")\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"signInButton\">\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                buttonText=\"Login\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n                responseType='id_token'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}