{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst commands_1 = require(\"./commands\");\n\nconst compression_1 = require(\"./wire_protocol/compression\");\n\nconst constants_1 = require(\"./wire_protocol/constants\");\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\n\nconst kBuffer = Symbol('buffer');\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\n\nclass MessageStream extends stream_1.Duplex {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n    this[kBuffer] = new utils_1.BufferPool();\n  }\n\n  _write(chunk, _, callback) {\n    this[kBuffer].append(chunk);\n    processIncomingData(this, callback);\n  }\n\n  _read() {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n\n  writeCommand(command, operationDescription) {\n    // TODO: agreed compressor should live in `StreamDescription`\n    const compressorName = operationDescription && operationDescription.agreedCompressor ? operationDescription.agreedCompressor : 'none';\n\n    if (compressorName === 'none' || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    } // otherwise, compress the message\n\n\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE); // Extract information needed for OP_COMPRESSED from the uncompressed message\n\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12); // Compress the message body\n\n    (0, compression_1.compress)({\n      options: operationDescription\n    }, messageToBeCompressed, (err, compressedMessage) => {\n      if (err || !compressedMessage) {\n        operationDescription.cb(err);\n        return;\n      } // Create the msgHeader of OP_COMPRESSED\n\n\n      const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n\n      msgHeader.writeInt32LE(command.requestId, 4); // requestID\n\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n\n      msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n      // Create the compression details of OP_COMPRESSED\n\n      const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n\n      compressionDetails.writeUInt8(compression_1.Compressor[compressorName], 8); // compressorID\n\n      this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n    });\n  }\n\n}\n\nexports.MessageStream = MessageStream; // Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\n\nfunction canCompress(command) {\n  const commandDoc = command instanceof commands_1.Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !compression_1.uncompressibleCommands.has(commandName);\n}\n\nfunction processIncomingData(stream, callback) {\n  const buffer = stream[kBuffer];\n\n  if (buffer.length < 4) {\n    callback();\n    return;\n  }\n\n  const sizeOfMessage = buffer.peek(4).readInt32LE();\n\n  if (sizeOfMessage < 0) {\n    callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    return;\n  }\n\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`));\n    return;\n  }\n\n  if (sizeOfMessage > buffer.length) {\n    callback();\n    return;\n  }\n\n  const message = buffer.read(sizeOfMessage);\n  const messageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n  let ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n\n  if (messageHeader.opCode !== constants_1.OP_COMPRESSED) {\n    const messageBody = message.slice(MESSAGE_HEADER_SIZE);\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n    if (buffer.length >= 4) {\n      processIncomingData(stream, callback);\n    } else {\n      callback();\n    }\n\n    return;\n  }\n\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9); // recalculate based on wrapped opcode\n\n  ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n  (0, compression_1.decompress)(compressorID, compressedBuffer, (err, messageBody) => {\n    if (err || !messageBody) {\n      callback(err);\n      return;\n    }\n\n    if (messageBody.length !== messageHeader.length) {\n      callback(new error_1.MongoDecompressionError('Message body and message header must be the same length'));\n      return;\n    }\n\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n    if (buffer.length >= 4) {\n      processIncomingData(stream, callback);\n    } else {\n      callback();\n    }\n  });\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA;;AAEA;;AACA;;AACA;;AAOA;;AAEA,MAAMA,mBAAmB,GAAG,EAA5B;AACA,MAAMC,wBAAwB,GAAG,CAAjC,C,CAAoC;;AAEpC,MAAMC,0BAA0B,GAAG,OAAO,IAAP,GAAc,EAAd,GAAmB,CAAtD;AACA;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAAC,QAAD,CAAtB;AAwBA;;;;;;AAKA,MAAaC,aAAb,SAAmCC,eAAnC,CAAyC;AAMvCC,gBAA8C;AAAA,QAAlCC,OAAkC,uEAAF,EAAE;AAC5C,UAAMA,OAAN;AACA,SAAKC,kBAAL,GAA0BD,OAAO,CAACC,kBAAR,IAA8BP,0BAAxD;AACA,SAAKC,OAAL,IAAgB,IAAIO,kBAAJ,EAAhB;AACD;;AAEQC,QAAM,CAACC,KAAD,EAAgBC,CAAhB,EAA4BC,QAA5B,EAAsD;AACnE,SAAKX,OAAL,EAAcY,MAAd,CAAqBH,KAArB;AACAI,uBAAmB,CAAC,IAAD,EAAOF,QAAP,CAAnB;AACD;;AAEQG,OAAK,GAAW;AACvB;AACA;AACA;AACD;;AAEDC,cAAY,CACVC,OADU,EAEVC,oBAFU,EAEgC;AAE1C;AACA,UAAMC,cAAc,GAClBD,oBAAoB,IAAIA,oBAAoB,CAACE,gBAA7C,GACIF,oBAAoB,CAACE,gBADzB,GAEI,MAHN;;AAIA,QAAID,cAAc,KAAK,MAAnB,IAA6B,CAACE,WAAW,CAACJ,OAAD,CAA7C,EAAwD;AACtD,YAAMK,IAAI,GAAGL,OAAO,CAACM,KAAR,EAAb;AACA,WAAKC,IAAL,CAAUC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBK,MAAM,CAACC,MAAP,CAAcN,IAAd,CAAtB,GAA4CA,IAAtD;AACA;AACD,KAXyC,CAY1C;;;AACA,UAAMO,iCAAiC,GAAGF,MAAM,CAACC,MAAP,CAAcX,OAAO,CAACM,KAAR,EAAd,CAA1C;AACA,UAAMO,qBAAqB,GAAGD,iCAAiC,CAACE,KAAlC,CAAwCjC,mBAAxC,CAA9B,CAd0C,CAgB1C;;AACA,UAAMkC,qBAAqB,GAAGH,iCAAiC,CAACI,WAAlC,CAA8C,EAA9C,CAA9B,CAjB0C,CAmB1C;;AACA,gCAAS;AAAE3B,aAAO,EAAEY;AAAX,KAAT,EAA4CY,qBAA5C,EAAmE,CAACI,GAAD,EAAMC,iBAAN,KAA2B;AAC5F,UAAID,GAAG,IAAI,CAACC,iBAAZ,EAA+B;AAC7BjB,4BAAoB,CAACkB,EAArB,CAAwBF,GAAxB;AACA;AACD,OAJ2F,CAM5F;;;AACA,YAAMG,SAAS,GAAGV,MAAM,CAACW,KAAP,CAAaxC,mBAAb,CAAlB;AACAuC,eAAS,CAACE,YAAV,CACEzC,mBAAmB,GAAGC,wBAAtB,GAAiDoC,iBAAiB,CAACK,MADrE,EAEE,CAFF,EAR4F,CAWzF;;AACHH,eAAS,CAACE,YAAV,CAAuBtB,OAAO,CAACwB,SAA/B,EAA0C,CAA1C,EAZ4F,CAY9C;;AAC9CJ,eAAS,CAACE,YAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAb4F,CAa9D;;AAC9BF,eAAS,CAACE,YAAV,CAAuBG,yBAAvB,EAAsC,EAAtC,EAd4F,CAcjD;AAE3C;;AACA,YAAMC,kBAAkB,GAAGhB,MAAM,CAACW,KAAP,CAAavC,wBAAb,CAA3B;AACA4C,wBAAkB,CAACJ,YAAnB,CAAgCP,qBAAhC,EAAuD,CAAvD,EAlB4F,CAkBjC;;AAC3DW,wBAAkB,CAACJ,YAAnB,CAAgCT,qBAAqB,CAACU,MAAtD,EAA8D,CAA9D,EAnB4F,CAmB1B;;AAClEG,wBAAkB,CAACC,UAAnB,CAA8BC,yBAAW1B,cAAX,CAA9B,EAA0D,CAA1D,EApB4F,CAoB9B;;AAC9D,WAAKK,IAAL,CAAUG,MAAM,CAACC,MAAP,CAAc,CAACS,SAAD,EAAYM,kBAAZ,EAAgCR,iBAAhC,CAAd,CAAV;AACD,KAtBD;AAuBD;;AApEsC;;AAAzCW,sC,CAuEA;AACA;;AACA,SAASzB,WAAT,CAAqBJ,OAArB,EAAsD;AACpD,QAAM8B,UAAU,GAAG9B,OAAO,YAAY+B,cAAnB,GAAyB/B,OAAO,CAACA,OAAjC,GAA4CA,OAAiB,CAACgC,KAAjF;AACA,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwB,CAAxB,CAApB;AACA,SAAO,CAACF,qCAAuBQ,GAAvB,CAA2BH,WAA3B,CAAR;AACD;;AAED,SAASpC,mBAAT,CAA6BwC,MAA7B,EAAoD1C,QAApD,EAA8E;AAC5E,QAAM2C,MAAM,GAAGD,MAAM,CAACrD,OAAD,CAArB;;AACA,MAAIsD,MAAM,CAACf,MAAP,GAAgB,CAApB,EAAuB;AACrB5B,YAAQ;AACR;AACD;;AAED,QAAM4C,aAAa,GAAGD,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAexB,WAAf,EAAtB;;AACA,MAAIuB,aAAa,GAAG,CAApB,EAAuB;AACrB5C,YAAQ,CAAC,IAAI8C,uBAAJ,CAAoB,yBAAyBF,aAAa,EAA1D,CAAD,CAAR;AACA;AACD;;AAED,MAAIA,aAAa,GAAGF,MAAM,CAAC/C,kBAA3B,EAA+C;AAC7CK,YAAQ,CACN,IAAI8C,uBAAJ,CACE,yBAAyBF,aAAa,kBAAkBF,MAAM,CAAC/C,kBAAkB,EADnF,CADM,CAAR;AAKA;AACD;;AAED,MAAIiD,aAAa,GAAGD,MAAM,CAACf,MAA3B,EAAmC;AACjC5B,YAAQ;AACR;AACD;;AAED,QAAM+C,OAAO,GAAGJ,MAAM,CAACK,IAAP,CAAYJ,aAAZ,CAAhB;AACA,QAAMK,aAAa,GAAkB;AACnCrB,UAAM,EAAEmB,OAAO,CAAC1B,WAAR,CAAoB,CAApB,CAD2B;AAEnCQ,aAAS,EAAEkB,OAAO,CAAC1B,WAAR,CAAoB,CAApB,CAFwB;AAGnC6B,cAAU,EAAEH,OAAO,CAAC1B,WAAR,CAAoB,CAApB,CAHuB;AAInC8B,UAAM,EAAEJ,OAAO,CAAC1B,WAAR,CAAoB,EAApB;AAJ2B,GAArC;AAOA,MAAI+B,YAAY,GAAGH,aAAa,CAACE,MAAd,KAAyBrB,kBAAzB,GAAkCM,iBAAlC,GAA2CA,mBAA9D;;AACA,MAAIa,aAAa,CAACE,MAAd,KAAyBrB,yBAA7B,EAA4C;AAC1C,UAAMuB,WAAW,GAAGN,OAAO,CAAC5B,KAAR,CAAcjC,mBAAd,CAApB;AACAwD,UAAM,CAACY,IAAP,CAAY,SAAZ,EAAuB,IAAIF,YAAJ,CAAiBL,OAAjB,EAA0BE,aAA1B,EAAyCI,WAAzC,CAAvB;;AAEA,QAAIV,MAAM,CAACf,MAAP,IAAiB,CAArB,EAAwB;AACtB1B,yBAAmB,CAACwC,MAAD,EAAS1C,QAAT,CAAnB;AACD,KAFD,MAEO;AACLA,cAAQ;AACT;;AAED;AACD;;AAEDiD,eAAa,CAACM,cAAd,GAA+B,IAA/B;AACAN,eAAa,CAACE,MAAd,GAAuBJ,OAAO,CAAC1B,WAAR,CAAoBnC,mBAApB,CAAvB;AACA+D,eAAa,CAACrB,MAAd,GAAuBmB,OAAO,CAAC1B,WAAR,CAAoBnC,mBAAmB,GAAG,CAA1C,CAAvB;AACA,QAAMsE,YAAY,GAAeT,OAAO,CAAC7D,mBAAmB,GAAG,CAAvB,CAAxC;AACA,QAAMuE,gBAAgB,GAAGV,OAAO,CAAC5B,KAAR,CAAcjC,mBAAmB,GAAG,CAApC,CAAzB,CArD4E,CAuD5E;;AACAkE,cAAY,GAAGH,aAAa,CAACE,MAAd,KAAyBrB,kBAAzB,GAAkCM,iBAAlC,GAA2CA,mBAA1D;AACA,gCAAWoB,YAAX,EAAyBC,gBAAzB,EAA2C,CAACnC,GAAD,EAAM+B,WAAN,KAAqB;AAC9D,QAAI/B,GAAG,IAAI,CAAC+B,WAAZ,EAAyB;AACvBrD,cAAQ,CAACsB,GAAD,CAAR;AACA;AACD;;AAED,QAAI+B,WAAW,CAACzB,MAAZ,KAAuBqB,aAAa,CAACrB,MAAzC,EAAiD;AAC/C5B,cAAQ,CACN,IAAI8C,+BAAJ,CAA4B,yDAA5B,CADM,CAAR;AAIA;AACD;;AAEDJ,UAAM,CAACY,IAAP,CAAY,SAAZ,EAAuB,IAAIF,YAAJ,CAAiBL,OAAjB,EAA0BE,aAA1B,EAAyCI,WAAzC,CAAvB;;AAEA,QAAIV,MAAM,CAACf,MAAP,IAAiB,CAArB,EAAwB;AACtB1B,yBAAmB,CAACwC,MAAD,EAAS1C,QAAT,CAAnB;AACD,KAFD,MAEO;AACLA,cAAQ;AACT;AACF,GArBD;AAsBD","names":["MESSAGE_HEADER_SIZE","COMPRESSION_DETAILS_SIZE","kDefaultMaxBsonMessageSize","kBuffer","Symbol","MessageStream","stream_1","constructor","options","maxBsonMessageSize","utils_1","_write","chunk","_","callback","append","processIncomingData","_read","writeCommand","command","operationDescription","compressorName","agreedCompressor","canCompress","data","toBin","push","Array","isArray","Buffer","concat","concatenatedOriginalCommandBuffer","messageToBeCompressed","slice","originalCommandOpCode","readInt32LE","err","compressedMessage","cb","msgHeader","alloc","writeInt32LE","length","requestId","constants_1","compressionDetails","writeUInt8","compression_1","exports","commandDoc","commands_1","query","commandName","Object","keys","has","stream","buffer","sizeOfMessage","peek","error_1","message","read","messageHeader","responseTo","opCode","ResponseType","messageBody","emit","fromCompressed","compressorID","compressedBuffer"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\cmap\\message_stream.ts"],"sourcesContent":["import { Duplex, DuplexOptions } from 'stream';\n\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport { MongoDecompressionError, MongoParseError } from '../error';\nimport type { ClientSession } from '../sessions';\nimport { BufferPool, Callback } from '../utils';\nimport { BinMsg, MessageHeader, Msg, Query, Response, WriteProtocolMessageType } from './commands';\nimport {\n  compress,\n  Compressor,\n  CompressorName,\n  decompress,\n  uncompressibleCommands\n} from './wire_protocol/compression';\nimport { OP_COMPRESSED, OP_MSG } from './wire_protocol/constants';\n\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n\n/** @internal */\nexport interface MessageStreamOptions extends DuplexOptions {\n  maxBsonMessageSize?: number;\n}\n\n/** @internal */\nexport interface OperationDescription extends BSONSerializeOptions {\n  started: number;\n  cb: Callback<Document>;\n  command: boolean;\n  documentsReturnedIn?: string;\n  fullResult: boolean;\n  noResponse: boolean;\n  raw: boolean;\n  requestId: number;\n  session?: ClientSession;\n  socketTimeoutOverride?: boolean;\n  agreedCompressor?: CompressorName;\n  zlibCompressionLevel?: number;\n  $clusterTime?: Document;\n}\n\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nexport class MessageStream extends Duplex {\n  /** @internal */\n  maxBsonMessageSize: number;\n  /** @internal */\n  [kBuffer]: BufferPool;\n\n  constructor(options: MessageStreamOptions = {}) {\n    super(options);\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n    this[kBuffer] = new BufferPool();\n  }\n\n  override _write(chunk: Buffer, _: unknown, callback: Callback<Buffer>): void {\n    this[kBuffer].append(chunk);\n    processIncomingData(this, callback);\n  }\n\n  override _read(/* size */): void {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n\n  writeCommand(\n    command: WriteProtocolMessageType,\n    operationDescription: OperationDescription\n  ): void {\n    // TODO: agreed compressor should live in `StreamDescription`\n    const compressorName: CompressorName =\n      operationDescription && operationDescription.agreedCompressor\n        ? operationDescription.agreedCompressor\n        : 'none';\n    if (compressorName === 'none' || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    }\n    // otherwise, compress the message\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n    // Compress the message body\n    compress({ options: operationDescription }, messageToBeCompressed, (err, compressedMessage) => {\n      if (err || !compressedMessage) {\n        operationDescription.cb(err);\n        return;\n      }\n\n      // Create the msgHeader of OP_COMPRESSED\n      const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(\n        MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,\n        0\n      ); // messageLength\n      msgHeader.writeInt32LE(command.requestId, 4); // requestID\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n      msgHeader.writeInt32LE(OP_COMPRESSED, 12); // opCode\n\n      // Create the compression details of OP_COMPRESSED\n      const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n      compressionDetails.writeUInt8(Compressor[compressorName], 8); // compressorID\n      this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n    });\n  }\n}\n\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command: WriteProtocolMessageType) {\n  const commandDoc = command instanceof Msg ? command.command : (command as Query).query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !uncompressibleCommands.has(commandName);\n}\n\nfunction processIncomingData(stream: MessageStream, callback: Callback<Buffer>) {\n  const buffer = stream[kBuffer];\n  if (buffer.length < 4) {\n    callback();\n    return;\n  }\n\n  const sizeOfMessage = buffer.peek(4).readInt32LE();\n  if (sizeOfMessage < 0) {\n    callback(new MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    return;\n  }\n\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    callback(\n      new MongoParseError(\n        `Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`\n      )\n    );\n    return;\n  }\n\n  if (sizeOfMessage > buffer.length) {\n    callback();\n    return;\n  }\n\n  const message = buffer.read(sizeOfMessage);\n  const messageHeader: MessageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n\n  let ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  if (messageHeader.opCode !== OP_COMPRESSED) {\n    const messageBody = message.slice(MESSAGE_HEADER_SIZE);\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n    if (buffer.length >= 4) {\n      processIncomingData(stream, callback);\n    } else {\n      callback();\n    }\n\n    return;\n  }\n\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID: Compressor = message[MESSAGE_HEADER_SIZE + 8] as Compressor;\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n\n  // recalculate based on wrapped opcode\n  ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  decompress(compressorID, compressedBuffer, (err, messageBody) => {\n    if (err || !messageBody) {\n      callback(err);\n      return;\n    }\n\n    if (messageBody.length !== messageHeader.length) {\n      callback(\n        new MongoDecompressionError('Message body and message header must be the same length')\n      );\n\n      return;\n    }\n\n    stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n\n    if (buffer.length >= 4) {\n      processIncomingData(stream, callback);\n    } else {\n      callback();\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}