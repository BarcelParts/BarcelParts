{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\n\nconst constants_1 = require(\"../constants\");\n\nconst utils_1 = require(\"../utils\");\n\nconst commands_1 = require(\"./commands\");\n/**\n * An event indicating the start of a given\n * @public\n * @category Event\n */\n\n\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(connection, command) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection); // TODO: remove in major revision, this is not spec behavior\n\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = databaseName(command);\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n  }\n  /* @internal */\n\n\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n\n}\n\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\n\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(connection, command, reply, started) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n  }\n  /* @internal */\n\n\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n\n}\n\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\n\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(connection, command, error, started) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.failure = maybeRedact(commandName, cmd, error);\n  }\n  /* @internal */\n\n\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n\n}\n\nexports.CommandFailedEvent = CommandFailedEvent;\n/** Commands that we want to redact because of the sensitive nature of their contents */\n\nconst SENSITIVE_COMMANDS = new Set(['authenticate', 'saslStart', 'saslContinue', 'getnonce', 'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb']);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]); // helper methods\n\nconst extractCommandName = commandDoc => Object.keys(commandDoc)[0];\n\nconst namespace = command => command.ns;\n\nconst databaseName = command => command.ns.split('.')[0];\n\nconst collectionName = command => command.ns.split('.')[1];\n\nconst maybeRedact = (commandName, commandDoc, result) => SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\n\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial', 'exhaust'];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\n\nfunction extractCommand(command) {\n  var _a;\n\n  if (command instanceof commands_1.GetMore) {\n    return {\n      getMore: (0, utils_1.deepCopy)(command.cursorId),\n      collection: collectionName(command),\n      batchSize: command.numberToReturn\n    };\n  }\n\n  if (command instanceof commands_1.KillCursor) {\n    return {\n      killCursors: collectionName(command),\n      cursors: (0, utils_1.deepCopy)(command.cursorIds)\n    };\n  }\n\n  if (command instanceof commands_1.Msg) {\n    return (0, utils_1.deepCopy)(command.command);\n  }\n\n  if ((_a = command.query) === null || _a === void 0 ? void 0 : _a.$query) {\n    let result;\n\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = {\n        find: collectionName(command)\n      };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n        }\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key;\n\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n      }\n    });\n    OP_QUERY_KEYS.forEach(key => {\n      const opKey = key;\n\n      if (command[opKey]) {\n        result[opKey] = command[opKey];\n      }\n    });\n\n    if (command.pre32Limit != null) {\n      result.limit = command.pre32Limit;\n    }\n\n    if (command.query.$explain) {\n      return {\n        explain: result\n      };\n    }\n\n    return result;\n  }\n\n  const clonedQuery = {};\n  const clonedCommand = {};\n\n  if (command.query) {\n    for (const k in command.query) {\n      clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n    }\n\n    clonedCommand.query = clonedQuery;\n  }\n\n  for (const k in command) {\n    if (k === 'query') continue;\n    clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n  }\n\n  return command.query ? clonedQuery : clonedCommand;\n}\n\nfunction extractReply(command, reply) {\n  if (command instanceof commands_1.KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  }\n\n  if (!reply) {\n    return reply;\n  }\n\n  if (command instanceof commands_1.GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: (0, utils_1.deepCopy)(reply.cursorId),\n        ns: namespace(command),\n        nextBatch: (0, utils_1.deepCopy)(reply.documents)\n      }\n    };\n  }\n\n  if (command instanceof commands_1.Msg) {\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n  } // is this a legacy find command?\n\n\n  if (command.query && command.query.$query != null) {\n    return {\n      ok: 1,\n      cursor: {\n        id: (0, utils_1.deepCopy)(reply.cursorId),\n        ns: namespace(command),\n        firstBatch: (0, utils_1.deepCopy)(reply.documents)\n      }\n    };\n  }\n\n  return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\n\nfunction extractConnectionDetails(connection) {\n  let connectionId;\n\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}","map":{"version":3,"mappings":"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","names":["CommandStartedEvent","constructor","connection","command","cmd","extractCommand","commandName","extractCommandName","address","connectionId","serviceId","extractConnectionDetails","SENSITIVE_COMMANDS","has","commandObj","requestId","databaseName","maybeRedact","hasServiceId","exports","CommandSucceededEvent","reply","started","duration","extractReply","CommandFailedEvent","error","failure","Set","HELLO_COMMANDS","constants_1","commandDoc","Object","keys","namespace","ns","split","collectionName","result","speculativeAuthenticate","LEGACY_FIND_QUERY_MAP","$query","$orderby","$hint","$comment","$maxScan","$max","$min","$returnKey","$showDiskLoc","$maxTimeMS","$snapshot","LEGACY_FIND_OPTIONS_MAP","numberToSkip","numberToReturn","returnFieldSelector","OP_QUERY_KEYS","commands_1","getMore","cursorId","collection","batchSize","killCursors","cursors","cursorIds","query","_a","assign","find","forEach","key","legacyKey","opKey","pre32Limit","limit","$explain","explain","clonedQuery","clonedCommand","k","ok","cursorsUnknown","cursor","id","nextBatch","documents","firstBatch"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\cmap\\command_monitoring_events.ts"],"sourcesContent":["import type { Document, ObjectId } from '../bson';\nimport { LEGACY_HELLO_COMMAND, LEGACY_HELLO_COMMAND_CAMEL_CASE } from '../constants';\nimport { calculateDurationInMs, deepCopy } from '../utils';\nimport { GetMore, KillCursor, Msg, WriteProtocolMessageType } from './commands';\nimport type { Connection } from './connection';\n\n/**\n * An event indicating the start of a given\n * @public\n * @category Event\n */\nexport class CommandStartedEvent {\n  commandObj?: Document;\n  requestId: number;\n  databaseName: string;\n  commandName: string;\n  command: Document;\n  address: string;\n  connectionId?: string | number;\n  serviceId?: ObjectId;\n\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(connection: Connection, command: WriteProtocolMessageType) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    // TODO: remove in major revision, this is not spec behavior\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = databaseName(command);\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nexport class CommandSucceededEvent {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: unknown;\n  serviceId?: ObjectId;\n\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    reply: Document | undefined,\n    started: number\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nexport class CommandFailedEvent {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    error: Error | Document,\n    started: number\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.failure = maybeRedact(commandName, cmd, error) as Error;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/** Commands that we want to redact because of the sensitive nature of their contents */\nconst SENSITIVE_COMMANDS = new Set([\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n]);\n\nconst HELLO_COMMANDS = new Set(['hello', LEGACY_HELLO_COMMAND, LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n\n// helper methods\nconst extractCommandName = (commandDoc: Document) => Object.keys(commandDoc)[0];\nconst namespace = (command: WriteProtocolMessageType) => command.ns;\nconst databaseName = (command: WriteProtocolMessageType) => command.ns.split('.')[0];\nconst collectionName = (command: WriteProtocolMessageType) => command.ns.split('.')[1];\nconst maybeRedact = (commandName: string, commandDoc: Document, result: Error | Document) =>\n  SENSITIVE_COMMANDS.has(commandName) ||\n  (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\n\nconst LEGACY_FIND_QUERY_MAP: { [key: string]: string } = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\n\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n} as const;\n\nconst OP_QUERY_KEYS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'partial',\n  'exhaust'\n] as const;\n\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command: WriteProtocolMessageType): Document {\n  if (command instanceof GetMore) {\n    return {\n      getMore: deepCopy(command.cursorId),\n      collection: collectionName(command),\n      batchSize: command.numberToReturn\n    };\n  }\n\n  if (command instanceof KillCursor) {\n    return {\n      killCursors: collectionName(command),\n      cursors: deepCopy(command.cursorIds)\n    };\n  }\n\n  if (command instanceof Msg) {\n    return deepCopy(command.command);\n  }\n\n  if (command.query?.$query) {\n    let result: Document;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = { find: collectionName(command) };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = deepCopy(command.query[key]);\n        }\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key as keyof typeof LEGACY_FIND_OPTIONS_MAP;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = deepCopy(command[legacyKey]);\n      }\n    });\n\n    OP_QUERY_KEYS.forEach(key => {\n      const opKey = key as typeof OP_QUERY_KEYS[number];\n      if (command[opKey]) {\n        result[opKey] = command[opKey];\n      }\n    });\n\n    if (command.pre32Limit != null) {\n      result.limit = command.pre32Limit;\n    }\n\n    if (command.query.$explain) {\n      return { explain: result };\n    }\n    return result;\n  }\n\n  const clonedQuery: Record<string, unknown> = {};\n  const clonedCommand: Record<string, unknown> = {};\n  if (command.query) {\n    for (const k in command.query) {\n      clonedQuery[k] = deepCopy(command.query[k]);\n    }\n    clonedCommand.query = clonedQuery;\n  }\n\n  for (const k in command) {\n    if (k === 'query') continue;\n    clonedCommand[k] = deepCopy((command as unknown as Record<string, unknown>)[k]);\n  }\n  return command.query ? clonedQuery : clonedCommand;\n}\n\nfunction extractReply(command: WriteProtocolMessageType, reply?: Document) {\n  if (command instanceof KillCursor) {\n    return {\n      ok: 1,\n      cursorsUnknown: command.cursorIds\n    };\n  }\n\n  if (!reply) {\n    return reply;\n  }\n\n  if (command instanceof GetMore) {\n    return {\n      ok: 1,\n      cursor: {\n        id: deepCopy(reply.cursorId),\n        ns: namespace(command),\n        nextBatch: deepCopy(reply.documents)\n      }\n    };\n  }\n\n  if (command instanceof Msg) {\n    return deepCopy(reply.result ? reply.result : reply);\n  }\n\n  // is this a legacy find command?\n  if (command.query && command.query.$query != null) {\n    return {\n      ok: 1,\n      cursor: {\n        id: deepCopy(reply.cursorId),\n        ns: namespace(command),\n        firstBatch: deepCopy(reply.documents)\n      }\n    };\n  }\n\n  return deepCopy(reply.result ? reply.result : reply);\n}\n\nfunction extractConnectionDetails(connection: Connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}\n"]},"metadata":{},"sourceType":"script"}