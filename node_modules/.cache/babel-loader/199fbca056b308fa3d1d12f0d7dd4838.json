{"ast":null,"code":"//Declares the imports necessary\nimport http from \"../http-common\"; // Creates a function that will be exported with a list of functions inside\n\nclass ProductsDataService {\n  //Function to send a get request to all the products\n  getAll() {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return http.get(`?page=${page}`);\n  } //Function to send a get request to product by id\n\n\n  get(id) {\n    return http.get(`Product?id=${id}`);\n  } //Function to send a get request to find a product with a certain characteristic\n\n\n  find(query) {\n    let by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Design\";\n    let page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let sort = arguments.length > 3 ? arguments[3] : undefined;\n    return http.get(`?${by}=${query}&page=${page}&sort=${sort}`);\n  } //Function to send a get request to get all Marcas\n\n\n  getMarcas() {\n    return http.get(`/Marcas`);\n  } //Function to send a get request to get all categories\n\n\n  getCategories() {\n    return http.get(`/Categories`);\n  } //function to create a new user on the database\n\n\n  createUser(data) {\n    return http.post('/CreateUser', data);\n  } //function to get the user in case it exists in the database\n\n\n  findUser(data) {\n    return http.post('/User', data);\n  }\n\n  getCookie(cname) {\n    let name = cname + \"=\";\n    let decodedCookie = decodeURIComponent(document.cookie);\n    let ca = decodedCookie.split(';');\n\n    for (let i = 0; i < ca.length; i++) {\n      let c = ca[i];\n\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) == 0) {\n        console.log(c.substring(name.length, c.length));\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    console.log(\"\");\n    return \"\";\n  }\n\n}\n\nconst test = () => {\n  Barcelparts.getCookie(\"userGoogleId\");\n}; //Exportes the function to be used in other places\n\n\nexport default new ProductsDataService();","map":{"version":3,"sources":["C:/Users/Diogo/Documents/GitHub/BarcelParts/src/Services/Barcelparts.js"],"names":["http","ProductsDataService","getAll","page","get","id","find","query","by","sort","getMarcas","getCategories","createUser","data","post","findUser","getCookie","cname","name","decodedCookie","decodeURIComponent","document","cookie","ca","split","i","length","c","charAt","substring","indexOf","console","log","test","Barcelparts"],"mappings":"AAAA;AACA,OAAOA,IAAP,MAAiB,gBAAjB,C,CAEA;;AACA,MAAMC,mBAAN,CAA0B;AACxB;AACAC,EAAAA,MAAM,GAAW;AAAA,QAAVC,IAAU,uEAAH,CAAG;AACf,WAAOH,IAAI,CAACI,GAAL,CAAU,SAAQD,IAAK,EAAvB,CAAP;AACD,GAJuB,CAMxB;;;AACAC,EAAAA,GAAG,CAACC,EAAD,EAAK;AACN,WAAOL,IAAI,CAACI,GAAL,CAAU,cAAaC,EAAG,EAA1B,CAAP;AACD,GATuB,CAWxB;;;AACAC,EAAAA,IAAI,CAACC,KAAD,EAAuC;AAAA,QAA/BC,EAA+B,uEAA1B,QAA0B;AAAA,QAAhBL,IAAgB,uEAAT,CAAS;AAAA,QAANM,IAAM;AACzC,WAAOT,IAAI,CAACI,GAAL,CAAU,IAAGI,EAAG,IAAGD,KAAM,SAAQJ,IAAK,SAAQM,IAAK,EAAnD,CAAP;AACD,GAduB,CAgBxB;;;AACAC,EAAAA,SAAS,GAAG;AACV,WAAOV,IAAI,CAACI,GAAL,CAAU,SAAV,CAAP;AACD,GAnBuB,CAqBxB;;;AACAO,EAAAA,aAAa,GAAG;AACd,WAAOX,IAAI,CAACI,GAAL,CAAU,aAAV,CAAP;AACD,GAxBuB,CA0BxB;;;AACAQ,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,WAAOb,IAAI,CAACc,IAAL,CAAU,aAAV,EAAyBD,IAAzB,CAAP;AACD,GA7BuB,CA+BxB;;;AACAE,EAAAA,QAAQ,CAACF,IAAD,EAAO;AACb,WAAOb,IAAI,CAACc,IAAL,CAAU,OAAV,EAAmBD,IAAnB,CAAP;AACD;;AAEDG,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,QAAIC,IAAI,GAAGD,KAAK,GAAG,GAAnB;AACA,QAAIE,aAAa,GAAGC,kBAAkB,CAACC,QAAQ,CAACC,MAAV,CAAtC;AACA,QAAIC,EAAE,GAAGJ,aAAa,CAACK,KAAd,CAAoB,GAApB,CAAT;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,EAAE,CAACG,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,UAAIE,CAAC,GAAGJ,EAAE,CAACE,CAAD,CAAV;;AACA,aAAOE,CAAC,CAACC,MAAF,CAAS,CAAT,KAAe,GAAtB,EAA2B;AACzBD,QAAAA,CAAC,GAAGA,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAJ;AACD;;AACD,UAAIF,CAAC,CAACG,OAAF,CAAUZ,IAAV,KAAmB,CAAvB,EAA0B;AACxBa,QAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACE,SAAF,CAAYX,IAAI,CAACQ,MAAjB,EAAyBC,CAAC,CAACD,MAA3B,CAAZ;AACA,eAAOC,CAAC,CAACE,SAAF,CAAYX,IAAI,CAACQ,MAAjB,EAAyBC,CAAC,CAACD,MAA3B,CAAP;AACD;AACF;;AACDK,IAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACA,WAAO,EAAP;AACD;;AApDuB;;AAuD1B,MAAMC,IAAI,GAAG,MAAM;AACjBC,EAAAA,WAAW,CAAClB,SAAZ,CAAsB,cAAtB;AACD,CAFD,C,CAIA;;;AACA,eAAe,IAAIf,mBAAJ,EAAf","sourcesContent":["//Declares the imports necessary\r\nimport http from \"../http-common\";\r\n\r\n// Creates a function that will be exported with a list of functions inside\r\nclass ProductsDataService {\r\n  //Function to send a get request to all the products\r\n  getAll(page = 0) {\r\n    return http.get(`?page=${page}`);\r\n  }\r\n\r\n  //Function to send a get request to product by id\r\n  get(id) {\r\n    return http.get(`Product?id=${id}`);\r\n  }\r\n\r\n  //Function to send a get request to find a product with a certain characteristic\r\n  find(query, by = \"Design\", page = 0, sort) {\r\n    return http.get(`?${by}=${query}&page=${page}&sort=${sort}`);\r\n  }\r\n\r\n  //Function to send a get request to get all Marcas\r\n  getMarcas() {\r\n    return http.get(`/Marcas`);\r\n  }\r\n\r\n  //Function to send a get request to get all categories\r\n  getCategories() {\r\n    return http.get(`/Categories`);\r\n  }\r\n\r\n  //function to create a new user on the database\r\n  createUser(data) {\r\n    return http.post('/CreateUser', data)\r\n  }\r\n\r\n  //function to get the user in case it exists in the database\r\n  findUser(data) {\r\n    return http.post('/User', data)\r\n  }\r\n\r\n  getCookie(cname) {\r\n    let name = cname + \"=\";\r\n    let decodedCookie = decodeURIComponent(document.cookie);\r\n    let ca = decodedCookie.split(';');\r\n    for (let i = 0; i < ca.length; i++) {\r\n      let c = ca[i];\r\n      while (c.charAt(0) == ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) == 0) {\r\n        console.log(c.substring(name.length, c.length))\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    console.log(\"\")\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst test = () => {\r\n  Barcelparts.getCookie(\"userGoogleId\")\r\n}\r\n\r\n//Exportes the function to be used in other places\r\nexport default new ProductsDataService();"]},"metadata":{},"sourceType":"module"}