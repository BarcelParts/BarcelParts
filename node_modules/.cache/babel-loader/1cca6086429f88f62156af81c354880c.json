{"ast":null,"code":"'use strict';\n\nvar ip = exports;\n\nvar Buffer = require('buffer').Buffer;\n\nvar os = require('os');\n\nip.toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n\n  if (this.isV4Format(ip)) {\n    result = buff || new Buffer(offset + 4);\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (this.isV6Format(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = this.isV4Format(sections[i]);\n      var v4Buffer;\n\n      if (isv4) {\n        v4Buffer = this.toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n\n      var argv = [i, 1];\n\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n\n      sections.splice.apply(sections, argv);\n    }\n\n    result = buff || new Buffer(offset + 16);\n\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n\n  return result;\n};\n\nip.toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n\n  if (length === 4) {\n    // IPv4\n    for (var i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n\n    result = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (var i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n\n    result = result.join(':');\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    result = result.replace(/:{3,4}/, '::');\n  }\n\n  return result;\n};\n\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nvar ipv6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\n\nip.isV4Format = function (ip) {\n  return ipv4Regex.test(ip);\n};\n\nip.isV6Format = function (ip) {\n  return ipv6Regex.test(ip);\n};\n\nfunction _normalizeFamily(family) {\n  return family ? family.toLowerCase() : 'ipv4';\n}\n\nip.fromPrefixLen = function (prefixlen, family) {\n  if (prefixlen > 32) {\n    family = 'ipv6';\n  } else {\n    family = _normalizeFamily(family);\n  }\n\n  var len = 4;\n\n  if (family === 'ipv6') {\n    len = 16;\n  }\n\n  var buff = new Buffer(len);\n\n  for (var i = 0, n = buff.length; i < n; ++i) {\n    var bits = 8;\n\n    if (prefixlen < 8) {\n      bits = prefixlen;\n    }\n\n    prefixlen -= bits;\n    buff[i] = ~(0xff >> bits) & 0xff;\n  }\n\n  return ip.toString(buff);\n};\n\nip.mask = function (addr, mask) {\n  addr = ip.toBuffer(addr);\n  mask = ip.toBuffer(mask);\n  var result = new Buffer(Math.max(addr.length, mask.length));\n  var i = 0; // Same protocol - do bitwise and\n\n  if (addr.length === mask.length) {\n    for (i = 0; i < addr.length; i++) {\n      result[i] = addr[i] & mask[i];\n    }\n  } else if (mask.length === 4) {\n    // IPv6 address and IPv4 mask\n    // (Mask low bits)\n    for (i = 0; i < mask.length; i++) {\n      result[i] = addr[addr.length - 4 + i] & mask[i];\n    }\n  } else {\n    // IPv6 mask and IPv4 addr\n    for (var i = 0; i < result.length - 6; i++) {\n      result[i] = 0;\n    } // ::ffff:ipv4\n\n\n    result[10] = 0xff;\n    result[11] = 0xff;\n\n    for (i = 0; i < addr.length; i++) {\n      result[i + 12] = addr[i] & mask[i + 12];\n    }\n\n    i = i + 12;\n  }\n\n  for (; i < result.length; i++) result[i] = 0;\n\n  return ip.toString(result);\n};\n\nip.cidr = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2) throw new Error('invalid CIDR subnet: ' + addr);\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.mask(addr, mask);\n};\n\nip.subnet = function (addr, mask) {\n  var networkAddress = ip.toLong(ip.mask(addr, mask)); // Calculate the mask's length.\n\n  var maskBuffer = ip.toBuffer(mask);\n  var maskLength = 0;\n\n  for (var i = 0; i < maskBuffer.length; i++) {\n    if (maskBuffer[i] === 0xff) {\n      maskLength += 8;\n    } else {\n      var octet = maskBuffer[i] & 0xff;\n\n      while (octet) {\n        octet = octet << 1 & 0xff;\n        maskLength++;\n      }\n    }\n  }\n\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\n  return {\n    networkAddress: ip.fromLong(networkAddress),\n    firstAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress) : ip.fromLong(networkAddress + 1),\n    lastAddress: numberOfAddresses <= 2 ? ip.fromLong(networkAddress + numberOfAddresses - 1) : ip.fromLong(networkAddress + numberOfAddresses - 2),\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\n    subnetMask: mask,\n    subnetMaskLength: maskLength,\n    numHosts: numberOfAddresses <= 2 ? numberOfAddresses : numberOfAddresses - 2,\n    length: numberOfAddresses,\n    contains: function (other) {\n      return networkAddress === ip.toLong(ip.mask(other, mask));\n    }\n  };\n};\n\nip.cidrSubnet = function (cidrString) {\n  var cidrParts = cidrString.split('/');\n  var addr = cidrParts[0];\n  if (cidrParts.length !== 2) throw new Error('invalid CIDR subnet: ' + addr);\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\n  return ip.subnet(addr, mask);\n};\n\nip.not = function (addr) {\n  var buff = ip.toBuffer(addr);\n\n  for (var i = 0; i < buff.length; i++) {\n    buff[i] = 0xff ^ buff[i];\n  }\n\n  return ip.toString(buff);\n};\n\nip.or = function (a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b); // same protocol\n\n  if (a.length === b.length) {\n    for (var i = 0; i < a.length; ++i) {\n      a[i] |= b[i];\n    }\n\n    return ip.toString(a); // mixed protocols\n  } else {\n    var buff = a;\n    var other = b;\n\n    if (b.length > a.length) {\n      buff = b;\n      other = a;\n    }\n\n    var offset = buff.length - other.length;\n\n    for (var i = offset; i < buff.length; ++i) {\n      buff[i] |= other[i - offset];\n    }\n\n    return ip.toString(buff);\n  }\n};\n\nip.isEqual = function (a, b) {\n  a = ip.toBuffer(a);\n  b = ip.toBuffer(b); // Same protocol\n\n  if (a.length === b.length) {\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  } // Swap\n\n\n  if (b.length === 4) {\n    var t = b;\n    b = a;\n    a = t;\n  } // a - IPv4, b - IPv6\n\n\n  for (var i = 0; i < 10; i++) {\n    if (b[i] !== 0) return false;\n  }\n\n  var word = b.readUInt16BE(10);\n  if (word !== 0 && word !== 0xffff) return false;\n\n  for (var i = 0; i < 4; i++) {\n    if (a[i] !== b[i + 12]) return false;\n  }\n\n  return true;\n};\n\nip.isPrivate = function (addr) {\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) || /^f[cd][0-9a-f]{2}:/i.test(addr) || /^fe80:/i.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\n\nip.isPublic = function (addr) {\n  return !ip.isPrivate(addr);\n};\n\nip.isLoopback = function (addr) {\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.test(addr) || /^fe80::1$/.test(addr) || /^::1$/.test(addr) || /^::$/.test(addr);\n};\n\nip.loopback = function (family) {\n  //\n  // Default to `ipv4`\n  //\n  family = _normalizeFamily(family);\n\n  if (family !== 'ipv4' && family !== 'ipv6') {\n    throw new Error('family must be ipv4 or ipv6');\n  }\n\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\n}; //\n// ### function address (name, family)\n// #### @name {string|'public'|'private'} **Optional** Name or security\n//      of the network interface.\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\n//      to ipv4).\n//\n// Returns the address for the network interface on the current system with\n// the specified `name`:\n//   * String: First `family` address of the interface.\n//             If not found see `undefined`.\n//   * 'public': the first public ip address of family.\n//   * 'private': the first private ip address of family.\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\n//\n\n\nip.address = function (name, family) {\n  var interfaces = os.networkInterfaces();\n  var all; //\n  // Default to `ipv4`\n  //\n\n  family = _normalizeFamily(family); //\n  // If a specific network interface has been named,\n  // return the address.\n  //\n\n  if (name && name !== 'private' && name !== 'public') {\n    var res = interfaces[name].filter(function (details) {\n      var itemFamily = details.family.toLowerCase();\n      return itemFamily === family;\n    });\n    if (res.length === 0) return undefined;\n    return res[0].address;\n  }\n\n  var all = Object.keys(interfaces).map(function (nic) {\n    //\n    // Note: name will only be `public` or `private`\n    // when this is called.\n    //\n    var addresses = interfaces[nic].filter(function (details) {\n      details.family = details.family.toLowerCase();\n\n      if (details.family !== family || ip.isLoopback(details.address)) {\n        return false;\n      } else if (!name) {\n        return true;\n      }\n\n      return name === 'public' ? ip.isPrivate(details.address) : ip.isPublic(details.address);\n    });\n    return addresses.length ? addresses[0].address : undefined;\n  }).filter(Boolean);\n  return !all.length ? ip.loopback(family) : all[0];\n};\n\nip.toLong = function (ip) {\n  var ipl = 0;\n  ip.split('.').forEach(function (octet) {\n    ipl <<= 8;\n    ipl += parseInt(octet);\n  });\n  return ipl >>> 0;\n};\n\nip.fromLong = function (ipl) {\n  return (ipl >>> 24) + '.' + (ipl >> 16 & 255) + '.' + (ipl >> 8 & 255) + '.' + (ipl & 255);\n};","map":{"version":3,"sources":["D:/Barcelparts/node_modules/ip/lib/ip.js"],"names":["ip","exports","Buffer","require","os","toBuffer","buff","offset","result","isV4Format","split","map","byte","parseInt","isV6Format","sections","i","length","isv4","v4Buffer","slice","toString","splice","unshift","push","argv","apply","word","Error","join","readUInt16BE","replace","ipv4Regex","ipv6Regex","test","_normalizeFamily","family","toLowerCase","fromPrefixLen","prefixlen","len","n","bits","mask","addr","Math","max","cidr","cidrString","cidrParts","subnet","networkAddress","toLong","maskBuffer","maskLength","octet","numberOfAddresses","pow","fromLong","firstAddress","lastAddress","broadcastAddress","subnetMask","subnetMaskLength","numHosts","contains","other","cidrSubnet","not","or","a","b","isEqual","t","isPrivate","isPublic","isLoopback","loopback","address","name","interfaces","networkInterfaces","all","res","filter","details","itemFamily","undefined","Object","keys","nic","addresses","Boolean","ipl","forEach"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar ip = exports;\r\nvar Buffer = require('buffer').Buffer;\r\nvar os = require('os');\r\n\r\nip.toBuffer = function(ip, buff, offset) {\r\n  offset = ~~offset;\r\n\r\n  var result;\r\n\r\n  if (this.isV4Format(ip)) {\r\n    result = buff || new Buffer(offset + 4);\r\n    ip.split(/\\./g).map(function(byte) {\r\n      result[offset++] = parseInt(byte, 10) & 0xff;\r\n    });\r\n  } else if (this.isV6Format(ip)) {\r\n    var sections = ip.split(':', 8);\r\n\r\n    var i;\r\n    for (i = 0; i < sections.length; i++) {\r\n      var isv4 = this.isV4Format(sections[i]);\r\n      var v4Buffer;\r\n\r\n      if (isv4) {\r\n        v4Buffer = this.toBuffer(sections[i]);\r\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\r\n      }\r\n\r\n      if (v4Buffer && ++i < 8) {\r\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\r\n      }\r\n    }\r\n\r\n    if (sections[0] === '') {\r\n      while (sections.length < 8) sections.unshift('0');\r\n    } else if (sections[sections.length - 1] === '') {\r\n      while (sections.length < 8) sections.push('0');\r\n    } else if (sections.length < 8) {\r\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\r\n      var argv = [ i, 1 ];\r\n      for (i = 9 - sections.length; i > 0; i--) {\r\n        argv.push('0');\r\n      }\r\n      sections.splice.apply(sections, argv);\r\n    }\r\n\r\n    result = buff || new Buffer(offset + 16);\r\n    for (i = 0; i < sections.length; i++) {\r\n      var word = parseInt(sections[i], 16);\r\n      result[offset++] = (word >> 8) & 0xff;\r\n      result[offset++] = word & 0xff;\r\n    }\r\n  }\r\n\r\n  if (!result) {\r\n    throw Error('Invalid ip address: ' + ip);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nip.toString = function(buff, offset, length) {\r\n  offset = ~~offset;\r\n  length = length || (buff.length - offset);\r\n\r\n  var result = [];\r\n  if (length === 4) {\r\n    // IPv4\r\n    for (var i = 0; i < length; i++) {\r\n      result.push(buff[offset + i]);\r\n    }\r\n    result = result.join('.');\r\n  } else if (length === 16) {\r\n    // IPv6\r\n    for (var i = 0; i < length; i += 2) {\r\n      result.push(buff.readUInt16BE(offset + i).toString(16));\r\n    }\r\n    result = result.join(':');\r\n    result = result.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\r\n    result = result.replace(/:{3,4}/, '::');\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nvar ipv4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\r\nvar ipv6Regex =\r\n    /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\r\n\r\nip.isV4Format = function(ip) {\r\n  return ipv4Regex.test(ip);\r\n};\r\n\r\nip.isV6Format = function(ip) {\r\n  return ipv6Regex.test(ip);\r\n};\r\nfunction _normalizeFamily(family) {\r\n  return family ? family.toLowerCase() : 'ipv4';\r\n}\r\n\r\nip.fromPrefixLen = function(prefixlen, family) {\r\n  if (prefixlen > 32) {\r\n    family = 'ipv6';\r\n  } else {\r\n    family = _normalizeFamily(family);\r\n  }\r\n\r\n  var len = 4;\r\n  if (family === 'ipv6') {\r\n    len = 16;\r\n  }\r\n  var buff = new Buffer(len);\r\n\r\n  for (var i = 0, n = buff.length; i < n; ++i) {\r\n    var bits = 8;\r\n    if (prefixlen < 8) {\r\n      bits = prefixlen;\r\n    }\r\n    prefixlen -= bits;\r\n\r\n    buff[i] = ~(0xff >> bits) & 0xff;\r\n  }\r\n\r\n  return ip.toString(buff);\r\n};\r\n\r\nip.mask = function(addr, mask) {\r\n  addr = ip.toBuffer(addr);\r\n  mask = ip.toBuffer(mask);\r\n\r\n  var result = new Buffer(Math.max(addr.length, mask.length));\r\n\r\n  var i = 0;\r\n  // Same protocol - do bitwise and\r\n  if (addr.length === mask.length) {\r\n    for (i = 0; i < addr.length; i++) {\r\n      result[i] = addr[i] & mask[i];\r\n    }\r\n  } else if (mask.length === 4) {\r\n    // IPv6 address and IPv4 mask\r\n    // (Mask low bits)\r\n    for (i = 0; i < mask.length; i++) {\r\n      result[i] = addr[addr.length - 4  + i] & mask[i];\r\n    }\r\n  } else {\r\n    // IPv6 mask and IPv4 addr\r\n    for (var i = 0; i < result.length - 6; i++) {\r\n      result[i] = 0;\r\n    }\r\n\r\n    // ::ffff:ipv4\r\n    result[10] = 0xff;\r\n    result[11] = 0xff;\r\n    for (i = 0; i < addr.length; i++) {\r\n      result[i + 12] = addr[i] & mask[i + 12];\r\n    }\r\n    i = i + 12;\r\n  }\r\n  for (; i < result.length; i++)\r\n    result[i] = 0;\r\n\r\n  return ip.toString(result);\r\n};\r\n\r\nip.cidr = function(cidrString) {\r\n  var cidrParts = cidrString.split('/');\r\n\r\n  var addr = cidrParts[0];\r\n  if (cidrParts.length !== 2)\r\n    throw new Error('invalid CIDR subnet: ' + addr);\r\n\r\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\r\n\r\n  return ip.mask(addr, mask);\r\n};\r\n\r\nip.subnet = function(addr, mask) {\r\n  var networkAddress = ip.toLong(ip.mask(addr, mask));\r\n\r\n  // Calculate the mask's length.\r\n  var maskBuffer = ip.toBuffer(mask);\r\n  var maskLength = 0;\r\n\r\n  for (var i = 0; i < maskBuffer.length; i++) {\r\n    if (maskBuffer[i] === 0xff) {\r\n      maskLength += 8;\r\n    } else {\r\n      var octet = maskBuffer[i] & 0xff;\r\n      while (octet) {\r\n        octet = (octet << 1) & 0xff;\r\n        maskLength++;\r\n      }\r\n    }\r\n  }\r\n\r\n  var numberOfAddresses = Math.pow(2, 32 - maskLength);\r\n\r\n  return {\r\n    networkAddress: ip.fromLong(networkAddress),\r\n    firstAddress: numberOfAddresses <= 2 ?\r\n                    ip.fromLong(networkAddress) :\r\n                    ip.fromLong(networkAddress + 1),\r\n    lastAddress: numberOfAddresses <= 2 ?\r\n                    ip.fromLong(networkAddress + numberOfAddresses - 1) :\r\n                    ip.fromLong(networkAddress + numberOfAddresses - 2),\r\n    broadcastAddress: ip.fromLong(networkAddress + numberOfAddresses - 1),\r\n    subnetMask: mask,\r\n    subnetMaskLength: maskLength,\r\n    numHosts: numberOfAddresses <= 2 ?\r\n                numberOfAddresses : numberOfAddresses - 2,\r\n    length: numberOfAddresses,\r\n    contains: function(other) {\r\n      return networkAddress === ip.toLong(ip.mask(other, mask));\r\n    }\r\n  };\r\n};\r\n\r\nip.cidrSubnet = function(cidrString) {\r\n  var cidrParts = cidrString.split('/');\r\n\r\n  var addr = cidrParts[0];\r\n  if (cidrParts.length !== 2)\r\n    throw new Error('invalid CIDR subnet: ' + addr);\r\n\r\n  var mask = ip.fromPrefixLen(parseInt(cidrParts[1], 10));\r\n\r\n  return ip.subnet(addr, mask);\r\n};\r\n\r\nip.not = function(addr) {\r\n  var buff = ip.toBuffer(addr);\r\n  for (var i = 0; i < buff.length; i++) {\r\n    buff[i] = 0xff ^ buff[i];\r\n  }\r\n  return ip.toString(buff);\r\n};\r\n\r\nip.or = function(a, b) {\r\n  a = ip.toBuffer(a);\r\n  b = ip.toBuffer(b);\r\n\r\n  // same protocol\r\n  if (a.length === b.length) {\r\n    for (var i = 0; i < a.length; ++i) {\r\n      a[i] |= b[i];\r\n    }\r\n    return ip.toString(a);\r\n\r\n  // mixed protocols\r\n  } else {\r\n    var buff = a;\r\n    var other = b;\r\n    if (b.length > a.length) {\r\n      buff = b;\r\n      other = a;\r\n    }\r\n\r\n    var offset = buff.length - other.length;\r\n    for (var i = offset; i < buff.length; ++i) {\r\n      buff[i] |= other[i - offset];\r\n    }\r\n\r\n    return ip.toString(buff);\r\n  }\r\n};\r\n\r\nip.isEqual = function(a, b) {\r\n  a = ip.toBuffer(a);\r\n  b = ip.toBuffer(b);\r\n\r\n  // Same protocol\r\n  if (a.length === b.length) {\r\n    for (var i = 0; i < a.length; i++) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Swap\r\n  if (b.length === 4) {\r\n    var t = b;\r\n    b = a;\r\n    a = t;\r\n  }\r\n\r\n  // a - IPv4, b - IPv6\r\n  for (var i = 0; i < 10; i++) {\r\n    if (b[i] !== 0) return false;\r\n  }\r\n\r\n  var word = b.readUInt16BE(10);\r\n  if (word !== 0 && word !== 0xffff) return false;\r\n\r\n  for (var i = 0; i < 4; i++) {\r\n    if (a[i] !== b[i + 12]) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nip.isPrivate = function(addr) {\r\n  return /^(::f{4}:)?10\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\r\n      .test(addr) ||\r\n    /^(::f{4}:)?192\\.168\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\r\n    /^(::f{4}:)?172\\.(1[6-9]|2\\d|30|31)\\.([0-9]{1,3})\\.([0-9]{1,3})$/i\r\n      .test(addr) ||\r\n    /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\r\n    /^(::f{4}:)?169\\.254\\.([0-9]{1,3})\\.([0-9]{1,3})$/i.test(addr) ||\r\n    /^f[cd][0-9a-f]{2}:/i.test(addr) ||\r\n    /^fe80:/i.test(addr) ||\r\n    /^::1$/.test(addr) ||\r\n    /^::$/.test(addr);\r\n};\r\n\r\nip.isPublic = function(addr) {\r\n  return !ip.isPrivate(addr);\r\n};\r\n\r\nip.isLoopback = function(addr) {\r\n  return /^(::f{4}:)?127\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/\r\n      .test(addr) ||\r\n    /^fe80::1$/.test(addr) ||\r\n    /^::1$/.test(addr) ||\r\n    /^::$/.test(addr);\r\n};\r\n\r\nip.loopback = function(family) {\r\n  //\r\n  // Default to `ipv4`\r\n  //\r\n  family = _normalizeFamily(family);\r\n\r\n  if (family !== 'ipv4' && family !== 'ipv6') {\r\n    throw new Error('family must be ipv4 or ipv6');\r\n  }\r\n\r\n  return family === 'ipv4' ? '127.0.0.1' : 'fe80::1';\r\n};\r\n\r\n//\r\n// ### function address (name, family)\r\n// #### @name {string|'public'|'private'} **Optional** Name or security\r\n//      of the network interface.\r\n// #### @family {ipv4|ipv6} **Optional** IP family of the address (defaults\r\n//      to ipv4).\r\n//\r\n// Returns the address for the network interface on the current system with\r\n// the specified `name`:\r\n//   * String: First `family` address of the interface.\r\n//             If not found see `undefined`.\r\n//   * 'public': the first public ip address of family.\r\n//   * 'private': the first private ip address of family.\r\n//   * undefined: First address with `ipv4` or loopback address `127.0.0.1`.\r\n//\r\nip.address = function(name, family) {\r\n  var interfaces = os.networkInterfaces();\r\n  var all;\r\n\r\n  //\r\n  // Default to `ipv4`\r\n  //\r\n  family = _normalizeFamily(family);\r\n\r\n  //\r\n  // If a specific network interface has been named,\r\n  // return the address.\r\n  //\r\n  if (name && name !== 'private' && name !== 'public') {\r\n    var res = interfaces[name].filter(function(details) {\r\n      var itemFamily = details.family.toLowerCase();\r\n      return itemFamily === family;\r\n    });\r\n    if (res.length === 0)\r\n      return undefined;\r\n    return res[0].address;\r\n  }\r\n\r\n  var all = Object.keys(interfaces).map(function (nic) {\r\n    //\r\n    // Note: name will only be `public` or `private`\r\n    // when this is called.\r\n    //\r\n    var addresses = interfaces[nic].filter(function (details) {\r\n      details.family = details.family.toLowerCase();\r\n      if (details.family !== family || ip.isLoopback(details.address)) {\r\n        return false;\r\n      } else if (!name) {\r\n        return true;\r\n      }\r\n\r\n      return name === 'public' ? ip.isPrivate(details.address) :\r\n          ip.isPublic(details.address);\r\n    });\r\n\r\n    return addresses.length ? addresses[0].address : undefined;\r\n  }).filter(Boolean);\r\n\r\n  return !all.length ? ip.loopback(family) : all[0];\r\n};\r\n\r\nip.toLong = function(ip) {\r\n  var ipl = 0;\r\n  ip.split('.').forEach(function(octet) {\r\n    ipl <<= 8;\r\n    ipl += parseInt(octet);\r\n  });\r\n  return(ipl >>> 0);\r\n};\r\n\r\nip.fromLong = function(ipl) {\r\n  return ((ipl >>> 24) + '.' +\r\n      (ipl >> 16 & 255) + '.' +\r\n      (ipl >> 8 & 255) + '.' +\r\n      (ipl & 255) );\r\n};\r\n"]},"metadata":{},"sourceType":"script"}