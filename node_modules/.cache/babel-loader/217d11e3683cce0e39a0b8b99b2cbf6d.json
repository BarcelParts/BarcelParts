{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nexports.convert = function (globalObject, value) {\n  let {\n    context = \"The provided value\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n\n  function invokeTheCallbackFunction() {\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    callResult = Reflect.apply(value, thisArg, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context,\n      globals: globalObject\n    });\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    let callResult = Reflect.construct(value, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context,\n      globals: globalObject\n    });\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n  return invokeTheCallbackFunction;\n};","map":{"version":3,"sources":["D:/Barcelparts/node_modules/mongodb-connection-string-url/node_modules/whatwg-url/lib/Function.js"],"names":["conversions","require","utils","exports","convert","globalObject","value","context","TypeError","invokeTheCallbackFunction","thisArg","tryWrapperForImpl","callResult","args","i","length","Reflect","apply","globals","construct","wrapperSymbol","objectReference"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AAEAE,OAAO,CAACC,OAAR,GAAkB,UAACC,YAAD,EAAeC,KAAf,EAAkE;AAAA,MAA5C;AAAEC,IAAAA,OAAO,GAAG;AAAZ,GAA4C,uEAAP,EAAO;;AAClF,MAAI,OAAOD,KAAP,KAAiB,UAArB,EAAiC;AAC/B,UAAM,IAAID,YAAY,CAACG,SAAjB,CAA2BD,OAAO,GAAG,oBAArC,CAAN;AACD;;AAED,WAASE,yBAAT,GAA4C;AAC1C,UAAMC,OAAO,GAAGR,KAAK,CAACS,iBAAN,CAAwB,IAAxB,CAAhB;AACA,QAAIC,UAAJ;;AAF0C,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAI1C,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUZ,KAAK,CAACS,iBAAN,CAAwBE,IAAI,CAACC,CAAD,CAA5B,CAAV;AACD;;AAEDF,IAAAA,UAAU,GAAGI,OAAO,CAACC,KAAR,CAAcX,KAAd,EAAqBI,OAArB,EAA8BG,IAA9B,CAAb;AAEAD,IAAAA,UAAU,GAAGZ,WAAW,CAAC,KAAD,CAAX,CAAmBY,UAAnB,EAA+B;AAAEL,MAAAA,OAAO,EAAEA,OAAX;AAAoBW,MAAAA,OAAO,EAAEb;AAA7B,KAA/B,CAAb;AAEA,WAAOO,UAAP;AACD;;AAEDH,EAAAA,yBAAyB,CAACU,SAA1B,GAAsC,YAAa;AAAA,uCAATN,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACjD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUZ,KAAK,CAACS,iBAAN,CAAwBE,IAAI,CAACC,CAAD,CAA5B,CAAV;AACD;;AAED,QAAIF,UAAU,GAAGI,OAAO,CAACG,SAAR,CAAkBb,KAAlB,EAAyBO,IAAzB,CAAjB;AAEAD,IAAAA,UAAU,GAAGZ,WAAW,CAAC,KAAD,CAAX,CAAmBY,UAAnB,EAA+B;AAAEL,MAAAA,OAAO,EAAEA,OAAX;AAAoBW,MAAAA,OAAO,EAAEb;AAA7B,KAA/B,CAAb;AAEA,WAAOO,UAAP;AACD,GAVD;;AAYAH,EAAAA,yBAAyB,CAACP,KAAK,CAACkB,aAAP,CAAzB,GAAiDd,KAAjD;AACAG,EAAAA,yBAAyB,CAACY,eAA1B,GAA4Cf,KAA5C;AAEA,SAAOG,yBAAP;AACD,CApCD","sourcesContent":["\"use strict\";\r\n\r\nconst conversions = require(\"webidl-conversions\");\r\nconst utils = require(\"./utils.js\");\r\n\r\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\r\n  if (typeof value !== \"function\") {\r\n    throw new globalObject.TypeError(context + \" is not a function\");\r\n  }\r\n\r\n  function invokeTheCallbackFunction(...args) {\r\n    const thisArg = utils.tryWrapperForImpl(this);\r\n    let callResult;\r\n\r\n    for (let i = 0; i < args.length; i++) {\r\n      args[i] = utils.tryWrapperForImpl(args[i]);\r\n    }\r\n\r\n    callResult = Reflect.apply(value, thisArg, args);\r\n\r\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\r\n\r\n    return callResult;\r\n  }\r\n\r\n  invokeTheCallbackFunction.construct = (...args) => {\r\n    for (let i = 0; i < args.length; i++) {\r\n      args[i] = utils.tryWrapperForImpl(args[i]);\r\n    }\r\n\r\n    let callResult = Reflect.construct(value, args);\r\n\r\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\r\n\r\n    return callResult;\r\n  };\r\n\r\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\r\n  invokeTheCallbackFunction.objectReference = value;\r\n\r\n  return invokeTheCallbackFunction;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}