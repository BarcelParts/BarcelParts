{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTTPinger = exports.Monitor = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst connect_1 = require(\"../cmap/connect\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n/** @internal */\n\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\n\nconst kConnection = Symbol('connection');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\n\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\n\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\n\n\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    var _a, _b, _c;\n\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: (_a = options.connectTimeoutMS) !== null && _a !== void 0 ? _a : 10000,\n      heartbeatFrequencyMS: (_b = options.heartbeatFrequencyMS) !== null && _b !== void 0 ? _b : 10000,\n      minHeartbeatFrequencyMS: (_c = options.minHeartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 500\n    });\n    const cancellationToken = this[kCancellationToken]; // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.s.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options, // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    }); // ensure no authentication is used for monitoring\n\n    delete connectOptions.credentials;\n\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    } // start\n\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck() {\n    var _a;\n\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    (_a = this[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n  }\n\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this); // restart monitor\n\n    stateTransition(this, STATE_IDLE); // restart monitoring\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this); // close monitor\n\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n\n}\n\nexports.Monitor = Monitor;\n\nfunction resetMonitorState(monitor) {\n  var _a, _b, _c;\n\n  (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.stop();\n  monitor[kMonitorId] = undefined;\n  (_b = monitor[kRTTPinger]) === null || _b === void 0 ? void 0 : _b.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  (_c = monitor[kConnection]) === null || _c === void 0 ? void 0 : _c.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor, callback) {\n  let start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err) {\n    var _a;\n\n    (_a = monitor[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n    const cmd = {\n      [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: true,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n      var _a;\n\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello)); // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        (_a = monitor[kRTTPinger]) === null || _a === void 0 ? void 0 : _a.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  } // connecting does an implicit `hello`\n\n\n  (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined; // we already reset the connection pool on network errors in all cases\n\n      if (!(err instanceof error_1.MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor) {\n  return callback => {\n    stateTransition(monitor, STATE_MONITORING);\n\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      } // if the check indicates streaming is supported, immediately reschedule monitoring\n\n\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          var _a;\n\n          if (!isInCloseState(monitor)) {\n            (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\n\n\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n\n  close() {\n    var _a;\n\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n    (_a = this[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    this[kConnection] = undefined;\n  }\n\n}\n\nexports.RTTPinger = RTTPinger;\n\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn === null || conn === void 0 ? void 0 : conn.destroy({\n        force: true\n      });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = setTimeout(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n\n  const connection = rttPinger[kConnection];\n\n  if (connection == null) {\n    (0, connect_1.connect)(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n\n  connection.command((0, utils_1.ns)('admin.$cmd'), {\n    [constants_1.LEGACY_HELLO_COMMAND]: 1\n  }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}","map":{"version":3,"mappings":"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","names":["kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","common_1","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","Monitor","mongo_types_1","constructor","server","options","undefined","setMaxListeners","Infinity","address","description","Object","freeze","connectTimeoutMS","_a","heartbeatFrequencyMS","_b","minHeartbeatFrequencyMS","_c","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","connection_1","hostAddress","raw","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","monitorServer","interval","minInterval","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","exports","stop","destroy","force","checkServer","callback","start","server_1","SERVER_HEARTBEAT_STARTED","events_1","failureHandler","err","SERVER_HEARTBEAT_FAILED","connection","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","version","constants_1","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","hello","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","conn","error_1","done","type","Unknown","setTimeout","tv","processId","counter","bson_1","isLong","fromNumber","measureRoundTripTime","clearTimeout","measureAndReschedule"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\sdam\\monitor.ts"],"sourcesContent":["import { Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, ConnectionOptions } from '../cmap/connection';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoNetworkError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback, InterruptibleAsyncInterval } from '../utils';\nimport {\n  calculateDurationInMs,\n  EventEmitterWithState,\n  makeInterruptibleAsyncInterval,\n  makeStateMachine,\n  now,\n  ns\n} from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: Error): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<MonitorOptions, 'connectTimeoutMS' | 'heartbeatFrequencyMS' | 'minHeartbeatFrequencyMS'>\n  >;\n  connectOptions: ConnectionOptions;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: InterruptibleAsyncInterval;\n  [kRTTPinger]?: RTTPinger;\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.s.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  monitor.emit(Server.SERVER_HEARTBEAT_STARTED, new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err: Error) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err)\n    );\n\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: true,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address)\n        );\n        start = now();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, calculateDurationInMs(start), conn.hello)\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  /** @internal */\n  [kConnection]?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this[kConnection]?.destroy({ force: true });\n    this[kConnection] = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  connection.command(ns('admin.$cmd'), { [LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}