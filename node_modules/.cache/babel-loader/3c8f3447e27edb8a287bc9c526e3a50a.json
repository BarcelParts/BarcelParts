{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoEncryptionLoggerLevel = exports.aws4 = exports.saslprep = exports.Snappy = exports.Kerberos = exports.PKG_VERSION = void 0;\n\nconst error_1 = require(\"./error\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.PKG_VERSION = Symbol('kPkgVersion');\n\nfunction makeErrorModule(error) {\n  const props = error ? {\n    kModuleError: error\n  } : {};\n  return new Proxy(props, {\n    get: (_, key) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\n\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.Kerberos = require('kerberos');\n} catch {} // eslint-disable-line\n\n\nexports.Snappy = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression'));\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.Snappy = require('snappy');\n\n  try {\n    exports.Snappy[exports.PKG_VERSION] = (0, utils_1.parsePackageVersion)(require('snappy/package.json'));\n  } catch {} // eslint-disable-line\n\n} catch {} // eslint-disable-line\n\n\nexports.saslprep = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `saslprep` not found.' + ' Please install it to enable Stringprep Profile for User Names and Passwords'));\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.saslprep = require('saslprep');\n} catch {} // eslint-disable-line\n\n\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.aws4 = require('aws4');\n} catch {} // eslint-disable-line\n\n/** @public */\n\n\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n  FatalError: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Trace: 4\n});","map":{"version":3,"mappings":";;;;;;;AAGA;;AAEA;;AAEaA,sBAAcC,MAAM,CAAC,aAAD,CAApB;;AAEb,SAASC,eAAT,CAAyBC,KAAzB,EAAmC;AACjC,QAAMC,KAAK,GAAGD,KAAK,GAAG;AAAEE,gBAAY,EAAEF;AAAhB,GAAH,GAA6B,EAAhD;AACA,SAAO,IAAIG,KAAJ,CAAUF,KAAV,EAAiB;AACtBG,OAAG,EAAE,CAACC,CAAD,EAASC,GAAT,KAAqB;AACxB,UAAIA,GAAG,KAAK,cAAZ,EAA4B;AAC1B,eAAON,KAAP;AACD;;AACD,YAAMA,KAAN;AACD,KANqB;AAOtBO,OAAG,EAAE,MAAK;AACR,YAAMP,KAAN;AACD;AATqB,GAAjB,CAAP;AAWD;;AAEUH,mBACTE,eAAe,CACb,IAAIS,mCAAJ,CACE,2FADF,CADa,CADN;;AAOX,IAAI;AACF;AACAX,qBAAWY,OAAO,CAAC,UAAD,CAAlB;AACD,CAHD,CAGE,MAAM,CAAE,C,CAAC;;;AAmDAZ,iBAAoEE,eAAe,CAC5F,IAAIS,mCAAJ,CACE,oFADF,CAD4F,CAAnF;;AAMX,IAAI;AACF;AACAX,mBAASY,OAAO,CAAC,QAAD,CAAhB;;AACA,MAAI;AACDZ,mBAAeA,mBAAf,IAA8B,iCAAoBY,OAAO,CAAC,qBAAD,CAA3B,CAA9B;AACF,GAFD,CAEE,MAAM,CAAE,CALR,CAKS;;AACZ,CAND,CAME,MAAM,CAAE,C,CAAC;;;AAEAZ,mBACTE,eAAe,CACb,IAAIS,mCAAJ,CACE,0CACE,8EAFJ,CADa,CADN;;AAQX,IAAI;AACF;AACAX,qBAAWY,OAAO,CAAC,UAAD,CAAlB;AACD,CAHD,CAGE,MAAM,CAAE,C,CAAC;;;AA0CAZ,eAA6DE,eAAe,CACrF,IAAIS,mCAAJ,CACE,kFADF,CADqF,CAA5E;;AAMX,IAAI;AACF;AACAX,iBAAOY,OAAO,CAAC,MAAD,CAAd;AACD,CAHD,CAGE,MAAM,CAAE,C,CAAC;;AAEX;;;AACaZ,oCAA4Ba,MAAM,CAACC,MAAP,CAAc;AACrDC,YAAU,EAAE,CADyC;AAErDC,OAAK,EAAE,CAF8C;AAGrDC,SAAO,EAAE,CAH4C;AAIrDC,MAAI,EAAE,CAJ+C;AAKrDC,OAAK,EAAE;AAL8C,CAAd,CAA5B","names":["exports","Symbol","makeErrorModule","error","props","kModuleError","Proxy","get","_","key","set","error_1","require","Object","freeze","FatalError","Error","Warning","Info","Trace"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\deps.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\r\nimport type { deserialize, Document, serialize } from './bson';\r\nimport type { ProxyOptions } from './cmap/connection';\r\nimport { MongoMissingDependencyError } from './error';\r\nimport type { MongoClient } from './mongo_client';\r\nimport { Callback, parsePackageVersion } from './utils';\r\n\r\nexport const PKG_VERSION = Symbol('kPkgVersion');\r\n\r\nfunction makeErrorModule(error: any) {\r\n  const props = error ? { kModuleError: error } : {};\r\n  return new Proxy(props, {\r\n    get: (_: any, key: any) => {\r\n      if (key === 'kModuleError') {\r\n        return error;\r\n      }\r\n      throw error;\r\n    },\r\n    set: () => {\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nexport let Kerberos: typeof import('kerberos') | { kModuleError: MongoMissingDependencyError } =\r\n  makeErrorModule(\r\n    new MongoMissingDependencyError(\r\n      'Optional module `kerberos` not found. Please install it to enable kerberos authentication'\r\n    )\r\n  );\r\n\r\ntry {\r\n  // Ensure you always wrap an optional require in the try block NODE-3199\r\n  Kerberos = require('kerberos');\r\n} catch {} // eslint-disable-line\r\n\r\nexport interface KerberosClient {\r\n  step: (challenge: string, callback?: Callback<string>) => Promise<string> | void;\r\n  wrap: (\r\n    challenge: string,\r\n    options?: { user: string },\r\n    callback?: Callback<string>\r\n  ) => Promise<string> | void;\r\n  unwrap: (challenge: string, callback?: Callback<string>) => Promise<string> | void;\r\n}\r\n\r\ntype SnappyLib = {\r\n  [PKG_VERSION]: { major: number; minor: number; patch: number };\r\n\r\n  /**\r\n   * - Snappy 6.x takes a callback and returns void\r\n   * - Snappy 7.x returns a promise\r\n   *\r\n   * In order to support both we must check the return value of the function\r\n   * @param buf - Buffer to be compressed\r\n   * @param callback - ONLY USED IN SNAPPY 6.x\r\n   */\r\n  compress(buf: Buffer): Promise<Buffer>;\r\n  compress(buf: Buffer, callback: (error?: Error, buffer?: Buffer) => void): Promise<Buffer> | void;\r\n  compress(\r\n    buf: Buffer,\r\n    callback?: (error?: Error, buffer?: Buffer) => void\r\n  ): Promise<Buffer> | void;\r\n\r\n  /**\r\n   * - Snappy 6.x takes a callback and returns void\r\n   * - Snappy 7.x returns a promise\r\n   *\r\n   * In order to support both we must check the return value of the function\r\n   * @param buf - Buffer to be compressed\r\n   * @param callback - ONLY USED IN SNAPPY 6.x\r\n   */\r\n  uncompress(buf: Buffer, opt: { asBuffer: true }): Promise<Buffer>;\r\n  uncompress(\r\n    buf: Buffer,\r\n    opt: { asBuffer: true },\r\n    callback: (error?: Error, buffer?: Buffer) => void\r\n  ): Promise<Buffer> | void;\r\n  uncompress(\r\n    buf: Buffer,\r\n    opt: { asBuffer: true },\r\n    callback?: (error?: Error, buffer?: Buffer) => void\r\n  ): Promise<Buffer> | void;\r\n};\r\n\r\nexport let Snappy: SnappyLib | { kModuleError: MongoMissingDependencyError } = makeErrorModule(\r\n  new MongoMissingDependencyError(\r\n    'Optional module `snappy` not found. Please install it to enable snappy compression'\r\n  )\r\n);\r\n\r\ntry {\r\n  // Ensure you always wrap an optional require in the try block NODE-3199\r\n  Snappy = require('snappy');\r\n  try {\r\n    (Snappy as any)[PKG_VERSION] = parsePackageVersion(require('snappy/package.json'));\r\n  } catch {} // eslint-disable-line\r\n} catch {} // eslint-disable-line\r\n\r\nexport let saslprep: typeof import('saslprep') | { kModuleError: MongoMissingDependencyError } =\r\n  makeErrorModule(\r\n    new MongoMissingDependencyError(\r\n      'Optional module `saslprep` not found.' +\r\n        ' Please install it to enable Stringprep Profile for User Names and Passwords'\r\n    )\r\n  );\r\n\r\ntry {\r\n  // Ensure you always wrap an optional require in the try block NODE-3199\r\n  saslprep = require('saslprep');\r\n} catch {} // eslint-disable-line\r\n\r\ninterface AWS4 {\r\n  /**\r\n   * Created these inline types to better assert future usage of this API\r\n   * @param options - options for request\r\n   * @param credentials - AWS credential details, sessionToken should be omitted entirely if its false-y\r\n   */\r\n  sign(\r\n    options: {\r\n      path: '/';\r\n      body: string;\r\n      host: string;\r\n      method: 'POST';\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded';\r\n        'Content-Length': number;\r\n        'X-MongoDB-Server-Nonce': string;\r\n        'X-MongoDB-GS2-CB-Flag': 'n';\r\n      };\r\n      service: string;\r\n      region: string;\r\n    },\r\n    credentials:\r\n      | {\r\n          accessKeyId: string;\r\n          secretAccessKey: string;\r\n          sessionToken: string;\r\n        }\r\n      | {\r\n          accessKeyId: string;\r\n          secretAccessKey: string;\r\n        }\r\n      | undefined\r\n  ): {\r\n    headers: {\r\n      Authorization: string;\r\n      'X-Amz-Date': string;\r\n    };\r\n  };\r\n}\r\n\r\nexport let aws4: AWS4 | { kModuleError: MongoMissingDependencyError } = makeErrorModule(\r\n  new MongoMissingDependencyError(\r\n    'Optional module `aws4` not found. Please install it to enable AWS authentication'\r\n  )\r\n);\r\n\r\ntry {\r\n  // Ensure you always wrap an optional require in the try block NODE-3199\r\n  aws4 = require('aws4');\r\n} catch {} // eslint-disable-line\r\n\r\n/** @public */\r\nexport const AutoEncryptionLoggerLevel = Object.freeze({\r\n  FatalError: 0,\r\n  Error: 1,\r\n  Warning: 2,\r\n  Info: 3,\r\n  Trace: 4\r\n} as const);\r\n\r\n/** @public */\r\nexport type AutoEncryptionLoggerLevel =\r\n  typeof AutoEncryptionLoggerLevel[keyof typeof AutoEncryptionLoggerLevel];\r\n\r\n/** @public */\r\nexport interface AutoEncryptionTlsOptions {\r\n  /**\r\n   * Specifies the location of a local .pem file that contains\r\n   * either the client's TLS/SSL certificate and key or only the\r\n   * client's TLS/SSL key when tlsCertificateFile is used to\r\n   * provide the certificate.\r\n   */\r\n  tlsCertificateKeyFile?: string;\r\n  /**\r\n   * Specifies the password to de-crypt the tlsCertificateKeyFile.\r\n   */\r\n  tlsCertificateKeyFilePassword?: string;\r\n  /**\r\n   * Specifies the location of a local .pem file that contains the\r\n   * root certificate chain from the Certificate Authority.\r\n   * This file is used to validate the certificate presented by the\r\n   * KMS provider.\r\n   */\r\n  tlsCAFile?: string;\r\n}\r\n\r\n/** @public */\r\nexport interface AutoEncryptionOptions {\r\n  /** @internal */\r\n  bson?: { serialize: typeof serialize; deserialize: typeof deserialize };\r\n  /** @internal client for metadata lookups */\r\n  metadataClient?: MongoClient;\r\n  /** A `MongoClient` used to fetch keys from a key vault */\r\n  keyVaultClient?: MongoClient;\r\n  /** The namespace where keys are stored in the key vault */\r\n  keyVaultNamespace?: string;\r\n  /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */\r\n  kmsProviders?: {\r\n    /** Configuration options for using 'aws' as your KMS provider */\r\n    aws?: {\r\n      /** The access key used for the AWS KMS provider */\r\n      accessKeyId: string;\r\n      /** The secret access key used for the AWS KMS provider */\r\n      secretAccessKey: string;\r\n      /**\r\n       * An optional AWS session token that will be used as the\r\n       * X-Amz-Security-Token header for AWS requests.\r\n       */\r\n      sessionToken?: string;\r\n    };\r\n    /** Configuration options for using 'local' as your KMS provider */\r\n    local?: {\r\n      /**\r\n       * The master key used to encrypt/decrypt data keys.\r\n       * A 96-byte long Buffer or base64 encoded string.\r\n       */\r\n      key: Buffer | string;\r\n    };\r\n    /** Configuration options for using 'azure' as your KMS provider */\r\n    azure?: {\r\n      /** The tenant ID identifies the organization for the account */\r\n      tenantId: string;\r\n      /** The client ID to authenticate a registered application */\r\n      clientId: string;\r\n      /** The client secret to authenticate a registered application */\r\n      clientSecret: string;\r\n      /**\r\n       * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\r\n       * This is optional, and only needed if customer is using a non-commercial Azure instance\r\n       * (e.g. a government or China account, which use different URLs).\r\n       * Defaults to \"login.microsoftonline.com\"\r\n       */\r\n      identityPlatformEndpoint?: string | undefined;\r\n    };\r\n    /** Configuration options for using 'gcp' as your KMS provider */\r\n    gcp?: {\r\n      /** The service account email to authenticate */\r\n      email: string;\r\n      /** A PKCS#8 encrypted key. This can either be a base64 string or a binary representation */\r\n      privateKey: string | Buffer;\r\n      /**\r\n       * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\r\n       * Defaults to \"oauth2.googleapis.com\"\r\n       */\r\n      endpoint?: string | undefined;\r\n    };\r\n    /**\r\n     * Configuration options for using 'kmip' as your KMS provider\r\n     */\r\n    kmip?: {\r\n      /**\r\n       * The output endpoint string.\r\n       * The endpoint consists of a hostname and port separated by a colon.\r\n       * E.g. \"example.com:123\". A port is always present.\r\n       */\r\n      endpoint?: string;\r\n    };\r\n  };\r\n  /**\r\n   * A map of namespaces to a local JSON schema for encryption\r\n   *\r\n   * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.\r\n   * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.\r\n   * Schemas supplied in the schemaMap only apply to configuring automatic encryption for client side encryption.\r\n   * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\r\n   */\r\n  schemaMap?: Document;\r\n  /** Allows the user to bypass auto encryption, maintaining implicit decryption */\r\n  bypassAutoEncryption?: boolean;\r\n  options?: {\r\n    /** An optional hook to catch logging messages from the underlying encryption engine */\r\n    logger?: (level: AutoEncryptionLoggerLevel, message: string) => void;\r\n  };\r\n  extraOptions?: {\r\n    /**\r\n     * A local process the driver communicates with to determine how to encrypt values in a command.\r\n     * Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\r\n     */\r\n    mongocryptdURI?: string;\r\n    /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */\r\n    mongocryptdBypassSpawn?: boolean;\r\n    /** The path to the mongocryptd executable on the system */\r\n    mongocryptdSpawnPath?: string;\r\n    /** Command line arguments to use when auto-spawning a mongocryptd */\r\n    mongocryptdSpawnArgs?: string[];\r\n    /**\r\n     * Full path to a CSFLE shared library to be used (instead of mongocryptd)\r\n     * @experimental\r\n     */\r\n    csflePath?: string;\r\n    /**\r\n     * Search paths for a CSFLE shared library to be used (instead of mongocryptd)\r\n     * @experimental\r\n     */\r\n    csfleSearchPaths?: string[];\r\n  };\r\n  proxyOptions?: ProxyOptions;\r\n  /** The TLS options to use connecting to the KMS provider */\r\n  tlsOptions?: {\r\n    aws?: AutoEncryptionTlsOptions;\r\n    local?: AutoEncryptionTlsOptions;\r\n    azure?: AutoEncryptionTlsOptions;\r\n    gcp?: AutoEncryptionTlsOptions;\r\n    kmip?: AutoEncryptionTlsOptions;\r\n  };\r\n}\r\n\r\n/** @public */\r\nexport interface AutoEncrypter {\r\n  // eslint-disable-next-line @typescript-eslint/no-misused-new\r\n  new (client: MongoClient, options: AutoEncryptionOptions): AutoEncrypter;\r\n  init(cb: Callback): void;\r\n  teardown(force: boolean, callback: Callback): void;\r\n  encrypt(ns: string, cmd: Document, options: any, callback: Callback<Document>): void;\r\n  decrypt(cmd: Document, options: any, callback: Callback<Document>): void;\r\n  readonly csfleVersionInfo: { version: bigint; versionStr: string } | null;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}