{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nclass MongoCR extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command((0, utils_1.ns)(`${source}.$cmd`), {\n      getnonce: 1\n    }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null; // Get nonce\n\n      if (err == null) {\n        nonce = r.nonce; // Use node md5 generator\n\n        let md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(`${username}:mongo:${password}`, 'utf8');\n        const hash_password = md5.digest('hex'); // Final key\n\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n\n}\n\nexports.MongoCR = MongoCR;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AAEA,MAAaA,OAAb,SAA6BC,4BAA7B,CAAyC;AAC9BC,MAAI,CAACC,WAAD,EAA2BC,QAA3B,EAA6C;AACxD,UAAM;AAAEC,gBAAF;AAAcC;AAAd,QAA8BH,WAApC;;AACA,QAAI,CAACG,WAAL,EAAkB;AAChB,aAAOF,QAAQ,CAAC,IAAIG,oCAAJ,CAAiC,uCAAjC,CAAD,CAAf;AACD;;AACD,UAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;AACA,UAAMC,QAAQ,GAAGH,WAAW,CAACG,QAA7B;AACA,UAAMC,MAAM,GAAGJ,WAAW,CAACI,MAA3B;AACAL,cAAU,CAACM,OAAX,CAAmB,gBAAG,GAAGD,MAAM,OAAZ,CAAnB,EAAyC;AAAEE,cAAQ,EAAE;AAAZ,KAAzC,EAA0DC,SAA1D,EAAqE,CAACC,GAAD,EAAMC,CAAN,KAAW;AAC9E,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,GAAG,GAAG,IAAV,CAF8E,CAI9E;;AACA,UAAIH,GAAG,IAAI,IAAX,EAAiB;AACfE,aAAK,GAAGD,CAAC,CAACC,KAAV,CADe,CAGf;;AACA,YAAIE,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkB,KAAlB,CAAV,CAJe,CAMf;;AACAF,WAAG,CAACG,MAAJ,CAAW,GAAGb,QAAQ,UAAUC,QAAQ,EAAxC,EAA4C,MAA5C;AACA,cAAMa,aAAa,GAAGJ,GAAG,CAACK,MAAJ,CAAW,KAAX,CAAtB,CARe,CAUf;;AACAL,WAAG,GAAGC,MAAM,CAACC,UAAP,CAAkB,KAAlB,CAAN;AACAF,WAAG,CAACG,MAAJ,CAAWL,KAAK,GAAGR,QAAR,GAAmBc,aAA9B,EAA6C,MAA7C;AACAL,WAAG,GAAGC,GAAG,CAACK,MAAJ,CAAW,KAAX,CAAN;AACD;;AAED,YAAMC,mBAAmB,GAAG;AAC1BC,oBAAY,EAAE,CADY;AAE1BC,YAAI,EAAElB,QAFoB;AAG1BQ,aAH0B;AAI1BC;AAJ0B,OAA5B;AAOAZ,gBAAU,CAACM,OAAX,CAAmB,gBAAG,GAAGD,MAAM,OAAZ,CAAnB,EAAyCc,mBAAzC,EAA8DX,SAA9D,EAAyET,QAAzE;AACD,KA7BD;AA8BD;;AAvCsC;;AAAzCuB","names":["MongoCR","auth_provider_1","auth","authContext","callback","connection","credentials","error_1","username","password","source","command","getnonce","undefined","err","r","nonce","key","md5","crypto","createHash","update","hash_password","digest","authenticateCommand","authenticate","user","exports"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\cmap\\auth\\mongocr.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\nimport { MongoMissingCredentialsError } from '../../error';\nimport { Callback, ns } from '../../utils';\nimport { AuthContext, AuthProvider } from './auth_provider';\n\nexport class MongoCR extends AuthProvider {\n  override auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(ns(`${source}.$cmd`), { getnonce: 1 }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null;\n\n      // Get nonce\n      if (err == null) {\n        nonce = r.nonce;\n\n        // Use node md5 generator\n        let md5 = crypto.createHash('md5');\n\n        // Generate keys used for authentication\n        md5.update(`${username}:mongo:${password}`, 'utf8');\n        const hash_password = md5.digest('hex');\n\n        // Final key\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n\n      connection.command(ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}