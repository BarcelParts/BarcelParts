{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diogo\\\\Documents\\\\GitHub\\\\BarcelParts\\\\src\\\\Services\\\\login.js\";\nimport { GoogleLogin } from 'react-google-login';\nimport ProductDataService from \"../Services/Barcelparts.js\";\nimport React from \"react\";\nimport http from \"../http-common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\n\nfunction Login() {\n  const verifyIfUserExists = userData => {\n    var result;\n    result = ProductDataService.findUser(userData).then(response => {\n      if (response.data == null) {\n        //if the user doesn't exist, we create it\n        ProductDataService.createUser(userData);\n        result = userData;\n      }\n    });\n    console.log(result) //If there is an error catches it and displays it in the console\n    .catch(e => {\n      console.log(e);\n    });\n  };\n\n  const onSuccess = res => {\n    var decodedUser; //we receive a token that we need to validate/decode to obtain the user info\n\n    console.log(\"received token = \" + res.tokenId); // TODO this should be done by the server I believe, not in the frontend\n    //send the token to google to be decoded\n\n    http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + res.tokenId).then(response => {\n      console.log(\"here we go\");\n      console.log(response.data); //use the decoded token to get the user info\n\n      var userData = {\n        \"_id\": response.data.profileObj.googleId,\n        \"User_FirstName\": response.data.profileObj.givenName,\n        \"User_LastName\": response.data.profileObj.familyName,\n        \"User_Image\": response.data.profileObj.imageUrl,\n        \"Email\": response.data.profileObj.email\n      };\n      verifyIfUserExists(userData);\n      console.log(\"LOGIN SUCCESS! CUrrent user: \", userData);\n\n      var CryptoJS = require(\"crypto-js\"); //Encrypt THE COOKIE and add it to the browser\n\n\n      document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(userData.googleId, 'secret key 123').toString(); //window.location.href = \"/\";\n    });\n  };\n\n  const onFailure = res => {\n    console.log(\"LOGIN FAILED! res: \", res);\n    alert(\"LOGIN FAILED! \\n Please try again... \");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: clientId,\n      buttonText: \"Login\",\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      cookiePolicy: 'single_host_origin',\n      responseType: \"id_token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Diogo/Documents/GitHub/BarcelParts/src/Services/login.js"],"names":["GoogleLogin","ProductDataService","React","http","clientId","Login","verifyIfUserExists","userData","result","findUser","then","response","data","createUser","console","log","catch","e","onSuccess","res","decodedUser","tokenId","get","profileObj","googleId","givenName","familyName","imageUrl","email","CryptoJS","require","document","cookie","AES","encrypt","toString","onFailure","alert"],"mappings":";AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,QAAQ,GAAG,2EAAjB;;AAEA,SAASC,KAAT,GAAiB;AAEb,QAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,QAAIC,MAAJ;AACAA,IAAAA,MAAM,GAAGP,kBAAkB,CAACQ,QAAnB,CAA4BF,QAA5B,EACJG,IADI,CACCC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,IAAiB,IAArB,EAA2B;AAAe;AACtCX,QAAAA,kBAAkB,CAACY,UAAnB,CAA8BN,QAA9B;AACAC,QAAAA,MAAM,GAAGD,QAAT;AACH;AACJ,KANI,CAAT;AAQIO,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAEA;AAFA,KAGCQ,KAHD,CAGOC,CAAC,IAAI;AACRH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH,KALD;AAMP,GAhBD;;AAkBA,QAAMC,SAAS,GAAIC,GAAD,IAAS;AAEvB,QAAIC,WAAJ,CAFuB,CAIvB;;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,GAAG,CAACE,OAAtC,EALuB,CAOvB;AACA;;AACAlB,IAAAA,IAAI,CAACmB,GAAL,CAAU,0DAAD,GAA6DH,GAAG,CAACE,OAA1E,EACKX,IADL,CACUC,QAAQ,IAAI;AAEdG,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAArB,EAHc,CAKd;;AACA,UAAIL,QAAQ,GAAG;AACX,eAAOI,QAAQ,CAACC,IAAT,CAAcW,UAAd,CAAyBC,QADrB;AAEX,0BAAkBb,QAAQ,CAACC,IAAT,CAAcW,UAAd,CAAyBE,SAFhC;AAGX,yBAAiBd,QAAQ,CAACC,IAAT,CAAcW,UAAd,CAAyBG,UAH/B;AAIX,sBAAcf,QAAQ,CAACC,IAAT,CAAcW,UAAd,CAAyBI,QAJ5B;AAKX,iBAAShB,QAAQ,CAACC,IAAT,CAAcW,UAAd,CAAyBK;AALvB,OAAf;AAQAtB,MAAAA,kBAAkB,CAACC,QAAD,CAAlB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CR,QAA7C;;AAEA,UAAIsB,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB,CAjBc,CAkBd;;;AACAC,MAAAA,QAAQ,CAACC,MAAT,GAAkB,kBAAkBH,QAAQ,CAACI,GAAT,CAAaC,OAAb,CAAqB3B,QAAQ,CAACiB,QAA9B,EAAwC,gBAAxC,EAA0DW,QAA1D,EAApC,CAnBc,CAoBd;AAGH,KAxBL;AAyBH,GAlCD;;AAoCA,QAAMC,SAAS,GAAIjB,GAAD,IAAS;AACvBL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCI,GAAnC;AACAkB,IAAAA,KAAK,CAAC,uCAAD,CAAL;AAEH,GAJD;;AAMA,sBACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,2BACI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAEjC,QADd;AAEI,MAAA,UAAU,EAAC,OAFf;AAGI,MAAA,SAAS,EAAEc,SAHf;AAII,MAAA,SAAS,EAAEkB,SAJf;AAKI,MAAA,YAAY,EAAE,oBALlB;AAMI,MAAA,YAAY,EAAC;AANjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;KA1EQ/B,K;AA4ET,eAAeA,KAAf","sourcesContent":["import { GoogleLogin } from 'react-google-login';\r\nimport ProductDataService from \"../Services/Barcelparts.js\"\r\nimport React from \"react\";\r\nimport http from \"../http-common\";\r\n\r\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\r\n\r\nfunction Login() {\r\n\r\n    const verifyIfUserExists = (userData) => {\r\n        var result;\r\n        result = ProductDataService.findUser(userData)\r\n            .then(response => {\r\n                if (response.data == null) {              //if the user doesn't exist, we create it\r\n                    ProductDataService.createUser(userData)\r\n                    result = userData\r\n                }\r\n            })\r\n\r\n            console.log(result)\r\n\r\n            //If there is an error catches it and displays it in the console\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    const onSuccess = (res) => {\r\n\r\n        var decodedUser;\r\n\r\n        //we receive a token that we need to validate/decode to obtain the user info\r\n        console.log(\"received token = \" + res.tokenId)\r\n\r\n        // TODO this should be done by the server I believe, not in the frontend\r\n        //send the token to google to be decoded\r\n        http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + res.tokenId)\r\n            .then(response => {\r\n\r\n                console.log(\"here we go\")\r\n                console.log(response.data)\r\n\r\n                //use the decoded token to get the user info\r\n                var userData = {\r\n                    \"_id\": response.data.profileObj.googleId,\r\n                    \"User_FirstName\": response.data.profileObj.givenName,\r\n                    \"User_LastName\": response.data.profileObj.familyName,\r\n                    \"User_Image\": response.data.profileObj.imageUrl,\r\n                    \"Email\": response.data.profileObj.email\r\n                }\r\n\r\n                verifyIfUserExists(userData);\r\n                console.log(\"LOGIN SUCCESS! CUrrent user: \", userData)\r\n\r\n                var CryptoJS = require(\"crypto-js\");\r\n                //Encrypt THE COOKIE and add it to the browser\r\n                document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(userData.googleId, 'secret key 123').toString();\r\n                //window.location.href = \"/\";\r\n\r\n\r\n            })\r\n    }\r\n\r\n    const onFailure = (res) => {\r\n        console.log(\"LOGIN FAILED! res: \", res)\r\n        alert(\"LOGIN FAILED! \\n Please try again... \")\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"signInButton\">\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                buttonText=\"Login\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n                responseType='id_token'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}