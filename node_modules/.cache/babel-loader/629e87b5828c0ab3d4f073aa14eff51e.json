{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass UpdateOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  execute(server, session, callback) {\n    var _a;\n\n    const options = (_a = this.options) !== null && _a !== void 0 ? _a : {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const statementWithCollation = this.statements.find(statement => !!statement.collation);\n\n    if ((0, utils_1.collationNotSupported)(server, options) || statementWithCollation && (0, utils_1.collationNotSupported)(server, statementWithCollation)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support collation`));\n      return;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n\n    if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 5) {\n      if (this.statements.find(o => o.hint)) {\n        callback(new error_1.MongoCompatibilityError(`Servers < 3.4 do not support hint on update`));\n        return;\n      }\n    }\n\n    if (this.explain && (0, utils_1.maxWireVersion)(server) < 3) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on update`));\n      return;\n    }\n\n    if (this.statements.some(statement => !!statement.arrayFilters) && (0, utils_1.maxWireVersion)(server) < 6) {\n      callback(new error_1.MongoCompatibilityError('Option \"arrayFilters\" is only supported on MongoDB 3.6+'));\n      return;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\n\nclass UpdateOneOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options,\n      multi: false\n    })], options);\n\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n\n}\n\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\n\nclass UpdateManyOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options,\n      multi: true\n    })], options);\n\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n\n}\n\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\n\nclass ReplaceOneOperation extends UpdateOperation {\n  constructor(collection, filter, replacement, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options,\n      multi: false\n    })], options);\n\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n\n}\n\nexports.ReplaceOneOperation = ReplaceOneOperation;\n\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op = {\n    q: filter,\n    u: update\n  };\n\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"mappings":"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","names":["UpdateOperation","command_1","constructor","ns","statements","options","undefined","canRetryWrite","every","op","multi","execute","server","session","callback","_a","ordered","command","update","collection","updates","bypassDocumentValidation","let","comment","statementWithCollation","find","statement","collation","error_1","name","unacknowledgedWrite","writeConcern","w","o","hint","explain","some","arrayFilters","executeCommand","exports","UpdateOneOperation","filter","s","namespace","makeUpdateStatement","err","res","code","writeErrors","acknowledged","_b","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","UpdateManyOperation","ReplaceOneOperation","replacement","q","u","upsert","operation_1","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\update.ts"],"sourcesContent":["import type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport {\n  Callback,\n  collationNotSupported,\n  hasAtomicOperators,\n  maxWireVersion,\n  MongoDBNamespace\n} from '../utils';\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, Hint } from './operation';\n\n/** @public */\nexport interface UpdateOptions extends CommandOperationOptions {\n  /** A set of filters specifying to which array elements an update should apply */\n  arrayFilters?: Document[];\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface UpdateResult {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of documents that matched the filter */\n  matchedCount: number;\n  /** The number of documents that were modified */\n  modifiedCount: number;\n  /** The number of documents that were upserted */\n  upsertedCount: number;\n  /** The identifier of the inserted document if an upsert took place */\n  upsertedId: ObjectId;\n}\n\n/** @public */\nexport interface UpdateStatement {\n  /** The query that matches documents to update. */\n  q: Document;\n  /** The modifications to apply. */\n  u: Document | Document[];\n  /**  If true, perform an insert if no documents match the query. */\n  upsert?: boolean;\n  /** If true, updates all documents that meet the query criteria. */\n  multi?: boolean;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n  arrayFilters?: Document[];\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/** @internal */\nexport class UpdateOperation extends CommandOperation<Document> {\n  override options: UpdateOptions & { ordered?: boolean };\n  statements: UpdateStatement[];\n\n  constructor(\n    ns: MongoDBNamespace,\n    statements: UpdateStatement[],\n    options: UpdateOptions & { ordered?: boolean }\n  ) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n\n    this.statements = statements;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const statementWithCollation = this.statements.find(statement => !!statement.collation);\n    if (\n      collationNotSupported(server, options) ||\n      (statementWithCollation && collationNotSupported(server, statementWithCollation))\n    ) {\n      callback(new MongoCompatibilityError(`Server ${server.name} does not support collation`));\n      return;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite || maxWireVersion(server) < 5) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        callback(new MongoCompatibilityError(`Servers < 3.4 do not support hint on update`));\n        return;\n      }\n    }\n\n    if (this.explain && maxWireVersion(server) < 3) {\n      callback(\n        new MongoCompatibilityError(`Server ${server.name} does not support explain on update`)\n      );\n      return;\n    }\n\n    if (this.statements.some(statement => !!statement.arrayFilters) && maxWireVersion(server) < 6) {\n      callback(\n        new MongoCompatibilityError('Option \"arrayFilters\" is only supported on MongoDB 3.6+')\n      );\n      return;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class UpdateOneOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @internal */\nexport class UpdateManyOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @public */\nexport interface ReplaceOptions extends CommandOperationOptions {\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\nexport class ReplaceOneOperation extends UpdateOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: ReplaceOptions\n  ) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\n      options\n    );\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\nexport function makeUpdateStatement(\n  filter: Document,\n  update: Document,\n  options: UpdateOptions & { multi?: boolean }\n): UpdateStatement {\n  if (filter == null || typeof filter !== 'object') {\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op: UpdateStatement = { q: filter, u: update };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\ndefineAspects(UpdateOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(UpdateManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(ReplaceOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.SKIP_COLLATION\n]);\n"]},"metadata":{},"sourceType":"script"}