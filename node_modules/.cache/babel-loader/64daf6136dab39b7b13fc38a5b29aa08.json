{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nconst Denque = require(\"denque\");\n\nconst collection_1 = require(\"./collection\");\n\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nconst db_1 = require(\"./db\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst aggregate_1 = require(\"./operations/aggregate\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference', 'comment', ...CHANGE_STREAM_OPTIONS];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\r\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\r\n * @public\r\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\r\n   * @internal\r\n   *\r\n   * @param parent - The parent object that created this change stream\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\r\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    this.cursor = createChangeStreamCursor(this, options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n\n  hasNext(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  next(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    var _a, _b;\n\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n\n\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\r\n   * Return a modified Readable stream including a possible transform method.\r\n   * @throws MongoDriverError if this.cursor is undefined\r\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  tryNext(callback) {\n    setIsIterator(this);\n    return (0, utils_1.maybePromise)(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = 'response';\n/** @event */\n\nChangeStream.MORE = 'more';\n/** @event */\n\nChangeStream.INIT = 'init';\n/** @event */\n\nChangeStream.CLOSE = 'close';\n/**\r\n * Fired for each new matching change in the specified namespace. Attaching a `change`\r\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\r\n * then be passed as soon as it is available.\r\n * @event\r\n */\n\nChangeStream.CHANGE = 'change';\n/** @event */\n\nChangeStream.END = 'end';\n/** @event */\n\nChangeStream.ERROR = 'error';\n/**\r\n * Emitted each time the change stream stores a new resume token.\r\n * @event\r\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\n\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(topology, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(topology, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = applyKnownOptions(this.options, CURSOR_OPTIONS);\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n        Reflect.deleteProperty(result, key);\n      }\n\n      if (this.resumeToken) {\n        const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone() {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, { ...this.cursorOptions\n    });\n  }\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(session, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && (0, utils_1.maxWireVersion)(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n\n}\n\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [ChangeStream.RESUME_TOKEN_CHANGED, ChangeStream.END, ChangeStream.CLOSE];\n\nfunction setIsEmitter(changeStream) {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n  }\n\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator(changeStream) {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n  }\n\n  changeStream[kMode] = 'iterator';\n}\n/**\r\n * Create a new change stream cursor based on self's configuration\r\n * @internal\r\n */\n\n\nfunction createChangeStreamCursor(changeStream, options) {\n  const changeStreamStageOptions = applyKnownOptions(options, CHANGE_STREAM_OPTIONS);\n\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(changeStream.pipeline);\n  const cursorOptions = applyKnownOptions(options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor((0, utils_1.getTopology)(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(source, options) {\n  const result = {};\n\n  for (const option of options) {\n    if (option in source) {\n      result[option] = source[option];\n    }\n  }\n\n  return result;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nconst SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = (0, utils_1.now)();\n    }\n\n    const start = options.start || (0, utils_1.now)();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if ((0, utils_1.calculateDurationInMs)(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError(changeStream, error, callback) {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents(changeStream, cursor) {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream(changeStream) {\n  const cursorStream = changeStream[kCursorStream];\n\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var _a;\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n  } // cache the resume token\n\n\n  (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const cursor = changeStream.cursor; // If the change stream has been closed explicitly, do not process error.\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && (0, error_1.isResumableError)(error, (0, utils_1.maxWireVersion)(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    endStream(changeStream); // close internal cursor, ignore errors\n\n    cursor.close();\n    const topology = (0, utils_1.getTopology)(changeStream.parent);\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.readPreference\n    }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n  return closeWithError(changeStream, error, callback);\n}\n/**\r\n * Safely provides a cursor across resume attempts\r\n *\r\n * @param changeStream - the parent ChangeStream\r\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\r\n * Drain the resume queue when a new has become available\r\n *\r\n * @param changeStream - the parent ChangeStream\r\n * @param err - error getting a new cursor\r\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n\n      if (!changeStream.cursor) {\n        request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n\n    request(err, changeStream.cursor);\n  }\n}","map":{"version":3,"mappings":"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","names":["kResumeQueue","Symbol","kCursorStream","kClosed","kMode","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","NO_RESUME_TOKEN_ERROR","NO_CURSOR_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","Denque","cursor","createChangeStreamCursor","on","eventName","listenerCount","streamEvents","_a","removeAllListeners","cursorStream","resumeToken","hasNext","callback","setIsIterator","cb","getCursor","err","next","error","change","push","processError","processNewChange","closed","_b","close","endStream","undefined","stream","streamOptions","tryNext","exports","ChangeStreamCursor","abstract_cursor_1","topology","_resumeToken","startAtOperationTime","startAfter","resumeAfter","token","emit","RESUME_TOKEN_CHANGED","resumeOptions","result","applyKnownOptions","key","Reflect","deleteProperty","resumeKey","hasReceived","server","cacheResumeToken","bufferedCount","postBatchResumeToken","_processBatch","batchName","response","length","clone","cursorOptions","_initialize","session","aggregateOperation","aggregate_1","operationTime","INIT","RESPONSE","_getMore","batchSize","MORE","CHANGE_STREAM_EVENTS","END","CLOSE","setIsEmitter","changeStream","changeStreamStageOptions","allChangesForCluster","$changeStream","concat","changeStreamCursor","event","e","CHANGE","source","option","SELECTION_TIMEOUT","waitForTopologyConnected","setTimeout","start","timeout","isConnected","closeWithError","ERROR","forEach","destroy","_id","resumeWithCursor","newCursor","processResumeQueue","unresumableError","request","pop"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import Denque = require('denque');\r\nimport type { Readable } from 'stream';\r\n\r\nimport type { Document, Timestamp } from './bson';\r\nimport { Collection } from './collection';\r\nimport {\r\n  AbstractCursor,\r\n  AbstractCursorEvents,\r\n  AbstractCursorOptions,\r\n  CursorStreamOptions\r\n} from './cursor/abstract_cursor';\r\nimport { Db } from './db';\r\nimport {\r\n  AnyError,\r\n  isResumableError,\r\n  MongoAPIError,\r\n  MongoChangeStreamError,\r\n  MongoError,\r\n  MongoRuntimeError\r\n} from './error';\r\nimport { MongoClient } from './mongo_client';\r\nimport { InferIdType, Nullable, TypedEventEmitter } from './mongo_types';\r\nimport { AggregateOperation, AggregateOptions } from './operations/aggregate';\r\nimport type { CollationOptions, OperationParent } from './operations/command';\r\nimport { executeOperation, ExecutionResult } from './operations/execute_operation';\r\nimport type { ReadPreference } from './read_preference';\r\nimport type { Topology } from './sdam/topology';\r\nimport type { ClientSession } from './sessions';\r\nimport {\r\n  calculateDurationInMs,\r\n  Callback,\r\n  getTopology,\r\n  maxWireVersion,\r\n  maybePromise,\r\n  MongoDBNamespace,\r\n  now\r\n} from './utils';\r\n\r\n/** @internal */\r\nconst kResumeQueue = Symbol('resumeQueue');\r\n/** @internal */\r\nconst kCursorStream = Symbol('cursorStream');\r\n/** @internal */\r\nconst kClosed = Symbol('closed');\r\n/** @internal */\r\nconst kMode = Symbol('mode');\r\n\r\nconst CHANGE_STREAM_OPTIONS = [\r\n  'resumeAfter',\r\n  'startAfter',\r\n  'startAtOperationTime',\r\n  'fullDocument'\r\n] as const;\r\n\r\nconst CURSOR_OPTIONS = [\r\n  'batchSize',\r\n  'maxAwaitTimeMS',\r\n  'collation',\r\n  'readPreference',\r\n  'comment',\r\n  ...CHANGE_STREAM_OPTIONS\r\n] as const;\r\n\r\nconst CHANGE_DOMAIN_TYPES = {\r\n  COLLECTION: Symbol('Collection'),\r\n  DATABASE: Symbol('Database'),\r\n  CLUSTER: Symbol('Cluster')\r\n};\r\n\r\nconst NO_RESUME_TOKEN_ERROR =\r\n  'A change stream document has been received that lacks a resume token (_id).';\r\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\r\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\r\n\r\n/** @public */\r\nexport interface ResumeOptions {\r\n  startAtOperationTime?: Timestamp;\r\n  batchSize?: number;\r\n  maxAwaitTimeMS?: number;\r\n  collation?: CollationOptions;\r\n  readPreference?: ReadPreference;\r\n  resumeAfter?: ResumeToken;\r\n  startAfter?: ResumeToken;\r\n}\r\n\r\n/**\r\n * Represents the logical starting point for a new or resuming {@link https://docs.mongodb.com/manual/changeStreams/#std-label-change-stream-resume| Change Stream} on the server.\r\n * @public\r\n */\r\nexport type ResumeToken = unknown;\r\n\r\n/**\r\n * Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\r\n * @public\r\n * @remarks\r\n * See {@link https://docs.mongodb.com/manual/reference/method/db.runCommand/#response| Run Command Response}\r\n */\r\nexport type OperationTime = Timestamp;\r\n\r\n/** @public */\r\nexport interface PipeOptions {\r\n  end?: boolean;\r\n}\r\n\r\n/**\r\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\r\n * @public\r\n */\r\nexport interface ChangeStreamOptions extends AggregateOptions {\r\n  /** Allowed values: 'updateLookup'. When set to 'updateLookup', the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred. */\r\n  fullDocument?: string;\r\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\r\n  maxAwaitTimeMS?: number;\r\n  /** Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}. */\r\n  resumeAfter?: ResumeToken;\r\n  /** Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams|ChangeStream documentation}. */\r\n  startAfter?: ResumeToken;\r\n  /** Will start the changeStream after the specified operationTime. */\r\n  startAtOperationTime?: OperationTime;\r\n  /** The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}. */\r\n  batchSize?: number;\r\n}\r\n\r\n/** @public */\r\nexport interface ChangeStreamDocument<TSchema extends Document = Document> {\r\n  /**\r\n   * The id functions as an opaque token for use when resuming an interrupted\r\n   * change stream.\r\n   */\r\n  _id: InferIdType<TSchema>;\r\n\r\n  /**\r\n   * Describes the type of operation represented in this change notification.\r\n   */\r\n  operationType:\r\n    | 'insert'\r\n    | 'update'\r\n    | 'replace'\r\n    | 'delete'\r\n    | 'invalidate'\r\n    | 'drop'\r\n    | 'dropDatabase'\r\n    | 'rename';\r\n\r\n  /**\r\n   * Contains two fields: “db” and “coll” containing the database and\r\n   * collection name in which the change happened.\r\n   */\r\n  ns: { db: string; coll: string };\r\n\r\n  /**\r\n   * Only present for ops of type ‘insert’, ‘update’, ‘replace’, and\r\n   * ‘delete’.\r\n   *\r\n   * For unsharded collections this contains a single field, _id, with the\r\n   * value of the _id of the document updated.  For sharded collections,\r\n   * this will contain all the components of the shard key in order,\r\n   * followed by the _id if the _id isn’t part of the shard key.\r\n   */\r\n  documentKey?: { _id: InferIdType<TSchema> };\r\n\r\n  /**\r\n   * Only present for ops of type ‘update’.\r\n   *\r\n   * Contains a description of updated and removed fields in this\r\n   * operation.\r\n   */\r\n  updateDescription?: UpdateDescription<TSchema>;\r\n\r\n  /**\r\n   * Always present for operations of type ‘insert’ and ‘replace’. Also\r\n   * present for operations of type ‘update’ if the user has specified ‘updateLookup’\r\n   * in the ‘fullDocument’ arguments to the ‘$changeStream’ stage.\r\n   *\r\n   * For operations of type ‘insert’ and ‘replace’, this key will contain the\r\n   * document being inserted, or the new version of the document that is replacing\r\n   * the existing document, respectively.\r\n   *\r\n   * For operations of type ‘update’, this key will contain a copy of the full\r\n   * version of the document from some point after the update occurred. If the\r\n   * document was deleted since the updated happened, it will be null.\r\n   */\r\n  fullDocument?: TSchema;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateDescription<TSchema extends Document = Document> {\r\n  /**\r\n   * A document containing key:value pairs of names of the fields that were\r\n   * changed, and the new value for those fields.\r\n   */\r\n  updatedFields: Partial<TSchema>;\r\n\r\n  /**\r\n   * An array of field names that were removed from the document.\r\n   */\r\n  removedFields: string[];\r\n}\r\n\r\n/** @public */\r\nexport type ChangeStreamEvents<TSchema extends Document = Document> = {\r\n  resumeTokenChanged(token: ResumeToken): void;\r\n  init(response: TSchema): void;\r\n  more(response?: TSchema | undefined): void;\r\n  response(): void;\r\n  end(): void;\r\n  error(error: Error): void;\r\n  change(change: ChangeStreamDocument<TSchema>): void;\r\n} & AbstractCursorEvents;\r\n\r\n/**\r\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\r\n * @public\r\n */\r\nexport class ChangeStream<TSchema extends Document = Document> extends TypedEventEmitter<\r\n  ChangeStreamEvents<TSchema>\r\n> {\r\n  pipeline: Document[];\r\n  options: ChangeStreamOptions;\r\n  parent: MongoClient | Db | Collection;\r\n  namespace: MongoDBNamespace;\r\n  type: symbol;\r\n  /** @internal */\r\n  cursor?: ChangeStreamCursor<TSchema>;\r\n  streamOptions?: CursorStreamOptions;\r\n  /** @internal */\r\n  [kResumeQueue]: Denque<Callback<ChangeStreamCursor<TSchema>>>;\r\n  /** @internal */\r\n  [kCursorStream]?: Readable;\r\n  /** @internal */\r\n  [kClosed]: boolean;\r\n  /** @internal */\r\n  [kMode]: false | 'iterator' | 'emitter';\r\n\r\n  /** @event */\r\n  static readonly RESPONSE = 'response' as const;\r\n  /** @event */\r\n  static readonly MORE = 'more' as const;\r\n  /** @event */\r\n  static readonly INIT = 'init' as const;\r\n  /** @event */\r\n  static readonly CLOSE = 'close' as const;\r\n  /**\r\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\r\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\r\n   * then be passed as soon as it is available.\r\n   * @event\r\n   */\r\n  static readonly CHANGE = 'change' as const;\r\n  /** @event */\r\n  static readonly END = 'end' as const;\r\n  /** @event */\r\n  static readonly ERROR = 'error' as const;\r\n  /**\r\n   * Emitted each time the change stream stores a new resume token.\r\n   * @event\r\n   */\r\n  static readonly RESUME_TOKEN_CHANGED = 'resumeTokenChanged' as const;\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * @param parent - The parent object that created this change stream\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\r\n   */\r\n  constructor(\r\n    parent: OperationParent,\r\n    pipeline: Document[] = [],\r\n    options: ChangeStreamOptions = {}\r\n  ) {\r\n    super();\r\n\r\n    this.pipeline = pipeline;\r\n    this.options = options;\r\n\r\n    if (parent instanceof Collection) {\r\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\r\n    } else if (parent instanceof Db) {\r\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\r\n    } else if (parent instanceof MongoClient) {\r\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\r\n    } else {\r\n      throw new MongoChangeStreamError(\r\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\r\n      );\r\n    }\r\n\r\n    this.parent = parent;\r\n    this.namespace = parent.s.namespace;\r\n    if (!this.options.readPreference && parent.readPreference) {\r\n      this.options.readPreference = parent.readPreference;\r\n    }\r\n\r\n    this[kResumeQueue] = new Denque();\r\n\r\n    // Create contained Change Stream cursor\r\n    this.cursor = createChangeStreamCursor(this, options);\r\n\r\n    this[kClosed] = false;\r\n    this[kMode] = false;\r\n\r\n    // Listen for any `change` listeners being added to ChangeStream\r\n    this.on('newListener', eventName => {\r\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\r\n        streamEvents(this, this.cursor);\r\n      }\r\n    });\r\n\r\n    this.on('removeListener', eventName => {\r\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\r\n        this[kCursorStream]?.removeAllListeners('data');\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  get cursorStream(): Readable | undefined {\r\n    return this[kCursorStream];\r\n  }\r\n\r\n  /** The cached resume token that is used to resume after the most recently returned change. */\r\n  get resumeToken(): ResumeToken {\r\n    return this.cursor?.resumeToken;\r\n  }\r\n\r\n  /** Check if there is any document still available in the Change Stream */\r\n  hasNext(): Promise<boolean>;\r\n  hasNext(callback: Callback<boolean>): void;\r\n  hasNext(callback?: Callback): Promise<boolean> | void {\r\n    setIsIterator(this);\r\n    return maybePromise(callback, cb => {\r\n      getCursor(this, (err, cursor) => {\r\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\r\n        cursor.hasNext(cb);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Get the next available document from the Change Stream. */\r\n  next(): Promise<ChangeStreamDocument<TSchema>>;\r\n  next(callback: Callback<ChangeStreamDocument<TSchema>>): void;\r\n  next(\r\n    callback?: Callback<ChangeStreamDocument<TSchema>>\r\n  ): Promise<ChangeStreamDocument<TSchema>> | void {\r\n    setIsIterator(this);\r\n    return maybePromise(callback, cb => {\r\n      getCursor(this, (err, cursor) => {\r\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\r\n        cursor.next((error, change) => {\r\n          if (error) {\r\n            this[kResumeQueue].push(() => this.next(cb));\r\n            processError(this, error, cb);\r\n            return;\r\n          }\r\n          processNewChange<TSchema>(this, change, cb);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Is the cursor closed */\r\n  get closed(): boolean {\r\n    return this[kClosed] || (this.cursor?.closed ?? false);\r\n  }\r\n\r\n  /** Close the Change Stream */\r\n  close(callback?: Callback): Promise<void> | void {\r\n    this[kClosed] = true;\r\n\r\n    return maybePromise(callback, cb => {\r\n      if (!this.cursor) {\r\n        return cb();\r\n      }\r\n\r\n      const cursor = this.cursor;\r\n      return cursor.close(err => {\r\n        endStream(this);\r\n        this.cursor = undefined;\r\n        return cb(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return a modified Readable stream including a possible transform method.\r\n   * @throws MongoDriverError if this.cursor is undefined\r\n   */\r\n  stream(options?: CursorStreamOptions): Readable {\r\n    this.streamOptions = options;\r\n    if (!this.cursor) throw new MongoChangeStreamError(NO_CURSOR_ERROR);\r\n    return this.cursor.stream(options);\r\n  }\r\n\r\n  /**\r\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\r\n   */\r\n  tryNext(): Promise<Document | null>;\r\n  tryNext(callback: Callback<Document | null>): void;\r\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\r\n    setIsIterator(this);\r\n    return maybePromise(callback, cb => {\r\n      getCursor(this, (err, cursor) => {\r\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\r\n        return cursor.tryNext(cb);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport interface ChangeStreamCursorOptions extends AbstractCursorOptions {\r\n  startAtOperationTime?: OperationTime;\r\n  resumeAfter?: ResumeToken;\r\n  startAfter?: ResumeToken;\r\n}\r\n\r\n/** @internal */\r\nexport class ChangeStreamCursor<TSchema extends Document = Document> extends AbstractCursor<\r\n  ChangeStreamDocument<TSchema>,\r\n  ChangeStreamEvents\r\n> {\r\n  _resumeToken: ResumeToken;\r\n  startAtOperationTime?: OperationTime;\r\n  hasReceived?: boolean;\r\n  resumeAfter: ResumeToken;\r\n  startAfter: ResumeToken;\r\n  options: ChangeStreamCursorOptions;\r\n\r\n  postBatchResumeToken?: ResumeToken;\r\n  pipeline: Document[];\r\n\r\n  constructor(\r\n    topology: Topology,\r\n    namespace: MongoDBNamespace,\r\n    pipeline: Document[] = [],\r\n    options: ChangeStreamCursorOptions = {}\r\n  ) {\r\n    super(topology, namespace, options);\r\n\r\n    this.pipeline = pipeline;\r\n    this.options = options;\r\n    this._resumeToken = null;\r\n    this.startAtOperationTime = options.startAtOperationTime;\r\n\r\n    if (options.startAfter) {\r\n      this.resumeToken = options.startAfter;\r\n    } else if (options.resumeAfter) {\r\n      this.resumeToken = options.resumeAfter;\r\n    }\r\n  }\r\n\r\n  set resumeToken(token: ResumeToken) {\r\n    this._resumeToken = token;\r\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\r\n  }\r\n\r\n  get resumeToken(): ResumeToken {\r\n    return this._resumeToken;\r\n  }\r\n\r\n  get resumeOptions(): ResumeOptions {\r\n    const result: ResumeOptions = applyKnownOptions(this.options, CURSOR_OPTIONS);\r\n\r\n    if (this.resumeToken || this.startAtOperationTime) {\r\n      for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\r\n        Reflect.deleteProperty(result, key);\r\n      }\r\n\r\n      if (this.resumeToken) {\r\n        const resumeKey =\r\n          this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\r\n\r\n        result[resumeKey] = this.resumeToken;\r\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\r\n        result.startAtOperationTime = this.startAtOperationTime;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  cacheResumeToken(resumeToken: ResumeToken): void {\r\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\r\n      this.resumeToken = this.postBatchResumeToken;\r\n    } else {\r\n      this.resumeToken = resumeToken;\r\n    }\r\n    this.hasReceived = true;\r\n  }\r\n\r\n  _processBatch(batchName: string, response?: Document): void {\r\n    const cursor = response?.cursor || {};\r\n    if (cursor.postBatchResumeToken) {\r\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\r\n\r\n      if (cursor[batchName].length === 0) {\r\n        this.resumeToken = cursor.postBatchResumeToken;\r\n      }\r\n    }\r\n  }\r\n\r\n  clone(): AbstractCursor<ChangeStreamDocument<TSchema>> {\r\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, {\r\n      ...this.cursorOptions\r\n    });\r\n  }\r\n\r\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\r\n    const aggregateOperation = new AggregateOperation(this.namespace, this.pipeline, {\r\n      ...this.cursorOptions,\r\n      ...this.options,\r\n      session\r\n    });\r\n\r\n    executeOperation(session, aggregateOperation, (err, response) => {\r\n      if (err || response == null) {\r\n        return callback(err);\r\n      }\r\n\r\n      const server = aggregateOperation.server;\r\n      if (\r\n        this.startAtOperationTime == null &&\r\n        this.resumeAfter == null &&\r\n        this.startAfter == null &&\r\n        maxWireVersion(server) >= 7\r\n      ) {\r\n        this.startAtOperationTime = response.operationTime;\r\n      }\r\n\r\n      this._processBatch('firstBatch', response);\r\n\r\n      this.emit(ChangeStream.INIT, response);\r\n      this.emit(ChangeStream.RESPONSE);\r\n\r\n      // TODO: NODE-2882\r\n      callback(undefined, { server, session, response });\r\n    });\r\n  }\r\n\r\n  override _getMore(batchSize: number, callback: Callback): void {\r\n    super._getMore(batchSize, (err, response) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      this._processBatch('nextBatch', response);\r\n\r\n      this.emit(ChangeStream.MORE, response);\r\n      this.emit(ChangeStream.RESPONSE);\r\n      callback(err, response);\r\n    });\r\n  }\r\n}\r\n\r\nconst CHANGE_STREAM_EVENTS = [\r\n  ChangeStream.RESUME_TOKEN_CHANGED,\r\n  ChangeStream.END,\r\n  ChangeStream.CLOSE\r\n];\r\n\r\nfunction setIsEmitter<TSchema extends Document>(changeStream: ChangeStream<TSchema>): void {\r\n  if (changeStream[kMode] === 'iterator') {\r\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\r\n    throw new MongoAPIError(\r\n      'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\r\n    );\r\n  }\r\n  changeStream[kMode] = 'emitter';\r\n}\r\n\r\nfunction setIsIterator<TSchema extends Document>(changeStream: ChangeStream<TSchema>): void {\r\n  if (changeStream[kMode] === 'emitter') {\r\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\r\n    throw new MongoAPIError(\r\n      'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\r\n    );\r\n  }\r\n  changeStream[kMode] = 'iterator';\r\n}\r\n\r\n/**\r\n * Create a new change stream cursor based on self's configuration\r\n * @internal\r\n */\r\nfunction createChangeStreamCursor<TSchema extends Document>(\r\n  changeStream: ChangeStream<TSchema>,\r\n  options: ChangeStreamOptions | ResumeOptions\r\n): ChangeStreamCursor<TSchema> {\r\n  const changeStreamStageOptions = applyKnownOptions(options, CHANGE_STREAM_OPTIONS);\r\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\r\n    changeStreamStageOptions.allChangesForCluster = true;\r\n  }\r\n  const pipeline = [{ $changeStream: changeStreamStageOptions } as Document].concat(\r\n    changeStream.pipeline\r\n  );\r\n\r\n  const cursorOptions: ChangeStreamCursorOptions = applyKnownOptions(options, CURSOR_OPTIONS);\r\n\r\n  const changeStreamCursor = new ChangeStreamCursor<TSchema>(\r\n    getTopology(changeStream.parent),\r\n    changeStream.namespace,\r\n    pipeline,\r\n    cursorOptions\r\n  );\r\n\r\n  for (const event of CHANGE_STREAM_EVENTS) {\r\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\r\n  }\r\n\r\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\r\n    streamEvents(changeStream, changeStreamCursor);\r\n  }\r\n\r\n  return changeStreamCursor;\r\n}\r\n\r\nfunction applyKnownOptions(source: Document, options: ReadonlyArray<string>) {\r\n  const result: Document = {};\r\n\r\n  for (const option of options) {\r\n    if (option in source) {\r\n      result[option] = source[option];\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\ninterface TopologyWaitOptions {\r\n  start?: number;\r\n  timeout?: number;\r\n  readPreference?: ReadPreference;\r\n}\r\n// This method performs a basic server selection loop, satisfying the requirements of\r\n// ChangeStream resumability until the new SDAM layer can be used.\r\nconst SELECTION_TIMEOUT = 30000;\r\nfunction waitForTopologyConnected(\r\n  topology: Topology,\r\n  options: TopologyWaitOptions,\r\n  callback: Callback\r\n) {\r\n  setTimeout(() => {\r\n    if (options && options.start == null) {\r\n      options.start = now();\r\n    }\r\n\r\n    const start = options.start || now();\r\n    const timeout = options.timeout || SELECTION_TIMEOUT;\r\n    if (topology.isConnected()) {\r\n      return callback();\r\n    }\r\n\r\n    if (calculateDurationInMs(start) > timeout) {\r\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\r\n      return callback(new MongoRuntimeError('Timed out waiting for connection'));\r\n    }\r\n\r\n    waitForTopologyConnected(topology, options, callback);\r\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\r\n}\r\n\r\nfunction closeWithError<TSchema extends Document>(\r\n  changeStream: ChangeStream<TSchema>,\r\n  error: AnyError,\r\n  callback?: Callback\r\n): void {\r\n  if (!callback) {\r\n    changeStream.emit(ChangeStream.ERROR, error);\r\n  }\r\n\r\n  changeStream.close(() => callback && callback(error));\r\n}\r\n\r\nfunction streamEvents<TSchema extends Document>(\r\n  changeStream: ChangeStream<TSchema>,\r\n  cursor: ChangeStreamCursor<TSchema>\r\n): void {\r\n  setIsEmitter(changeStream);\r\n  const stream = changeStream[kCursorStream] || cursor.stream();\r\n  changeStream[kCursorStream] = stream;\r\n  stream.on('data', change => processNewChange(changeStream, change));\r\n  stream.on('error', error => processError(changeStream, error));\r\n}\r\n\r\nfunction endStream<TSchema extends Document>(changeStream: ChangeStream<TSchema>): void {\r\n  const cursorStream = changeStream[kCursorStream];\r\n  if (cursorStream) {\r\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\r\n    cursorStream.destroy();\r\n  }\r\n\r\n  changeStream[kCursorStream] = undefined;\r\n}\r\n\r\nfunction processNewChange<TSchema extends Document>(\r\n  changeStream: ChangeStream<TSchema>,\r\n  change: Nullable<ChangeStreamDocument<TSchema>>,\r\n  callback?: Callback<ChangeStreamDocument<TSchema>>\r\n) {\r\n  if (changeStream[kClosed]) {\r\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n    if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\r\n    return;\r\n  }\r\n\r\n  // a null change means the cursor has been notified, implicitly closing the change stream\r\n  if (change == null) {\r\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n    return closeWithError(changeStream, new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\r\n  }\r\n\r\n  if (change && !change._id) {\r\n    return closeWithError(\r\n      changeStream,\r\n      new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR),\r\n      callback\r\n    );\r\n  }\r\n\r\n  // cache the resume token\r\n  changeStream.cursor?.cacheResumeToken(change._id);\r\n\r\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\r\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\r\n  changeStream.options.startAtOperationTime = undefined;\r\n\r\n  // Return the change\r\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\r\n  return callback(undefined, change);\r\n}\r\n\r\nfunction processError<TSchema extends Document>(\r\n  changeStream: ChangeStream<TSchema>,\r\n  error: AnyError,\r\n  callback?: Callback\r\n) {\r\n  const cursor = changeStream.cursor;\r\n\r\n  // If the change stream has been closed explicitly, do not process error.\r\n  if (changeStream[kClosed]) {\r\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n    if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\r\n    return;\r\n  }\r\n\r\n  // if the resume succeeds, continue with the new cursor\r\n  function resumeWithCursor(newCursor: ChangeStreamCursor<TSchema>) {\r\n    changeStream.cursor = newCursor;\r\n    processResumeQueue(changeStream);\r\n  }\r\n\r\n  // otherwise, raise an error and close the change stream\r\n  function unresumableError(err: AnyError) {\r\n    if (!callback) {\r\n      changeStream.emit(ChangeStream.ERROR, err);\r\n    }\r\n\r\n    changeStream.close(() => processResumeQueue(changeStream, err));\r\n  }\r\n\r\n  if (cursor && isResumableError(error as MongoError, maxWireVersion(cursor.server))) {\r\n    changeStream.cursor = undefined;\r\n\r\n    // stop listening to all events from old cursor\r\n    endStream(changeStream);\r\n\r\n    // close internal cursor, ignore errors\r\n    cursor.close();\r\n\r\n    const topology = getTopology(changeStream.parent);\r\n    waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\r\n      // if the topology can't reconnect, close the stream\r\n      if (err) return unresumableError(err);\r\n\r\n      // create a new cursor, preserving the old cursor's options\r\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\r\n\r\n      // attempt to continue in emitter mode\r\n      if (!callback) return resumeWithCursor(newCursor);\r\n\r\n      // attempt to continue in iterator mode\r\n      newCursor.hasNext(err => {\r\n        // if there's an error immediately after resuming, close the stream\r\n        if (err) return unresumableError(err);\r\n        resumeWithCursor(newCursor);\r\n      });\r\n    });\r\n    return;\r\n  }\r\n\r\n  // if initial error wasn't resumable, raise an error and close the change stream\r\n  return closeWithError(changeStream, error, callback);\r\n}\r\n\r\n/**\r\n * Safely provides a cursor across resume attempts\r\n *\r\n * @param changeStream - the parent ChangeStream\r\n */\r\nfunction getCursor<T extends Document>(\r\n  changeStream: ChangeStream<T>,\r\n  callback: Callback<ChangeStreamCursor<T>>\r\n) {\r\n  if (changeStream[kClosed]) {\r\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n    callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\r\n    return;\r\n  }\r\n\r\n  // if a cursor exists and it is open, return it\r\n  if (changeStream.cursor) {\r\n    callback(undefined, changeStream.cursor);\r\n    return;\r\n  }\r\n\r\n  // no cursor, queue callback until topology reconnects\r\n  changeStream[kResumeQueue].push(callback);\r\n}\r\n\r\n/**\r\n * Drain the resume queue when a new has become available\r\n *\r\n * @param changeStream - the parent ChangeStream\r\n * @param err - error getting a new cursor\r\n */\r\nfunction processResumeQueue<TSchema extends Document>(\r\n  changeStream: ChangeStream<TSchema>,\r\n  err?: Error\r\n) {\r\n  while (changeStream[kResumeQueue].length) {\r\n    const request = changeStream[kResumeQueue].pop();\r\n    if (!request) break; // Should never occur but TS can't use the length check in the while condition\r\n\r\n    if (!err) {\r\n      if (changeStream[kClosed]) {\r\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n        request(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\r\n        return;\r\n      }\r\n      if (!changeStream.cursor) {\r\n        request(new MongoChangeStreamError(NO_CURSOR_ERROR));\r\n        return;\r\n      }\r\n    }\r\n    request(err, changeStream.cursor);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}