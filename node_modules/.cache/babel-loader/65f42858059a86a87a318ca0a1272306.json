{"ast":null,"code":"import Barcelparts from './Barcelparts.js';\nimport http from \"../http-common\";\nexport async function isAuthenticated() {\n  if (getCookie() != undefined) {\n    let token = getCookie();\n    return await http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + token).then(response => {\n      var userData = {\n        \"Email\": response.data.email,\n        \"User_FirstName\": response.data.given_name,\n        \"User_LastName\": response.data.family_name,\n        \"User_Image\": response.data.picture\n      };\n      return Barcelparts.findUser(userData).then(response => {\n        if (response.data != null) {\n          console.log(\"User authenticated\");\n          setAuthenticated(true);\n        } else {\n          console.log(\"User not authenticated\");\n          setAuthenticated(false);\n        }\n      });\n    });\n  }\n} //function to get cookie from its name\n\nexport const getCookie = () => {\n  let name = \"userGoogleId=\";\n  let token;\n  let ca = document.cookie.split(';');\n\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n\n    if (c.indexOf(name) == 0) {\n      var separatedCookie = c.substring(name.length, c.length); //decrypt cookie\n\n      var CryptoJS = require(\"crypto-js\");\n\n      var bytes = CryptoJS.AES.decrypt(separatedCookie, 'secret key 123');\n      var decodedCookie = bytes.toString(CryptoJS.enc.Utf8);\n      token = decodedCookie;\n    }\n  }\n\n  return token;\n};","map":{"version":3,"sources":["D:/Barcelparts/src/Services/auth.js"],"names":["Barcelparts","http","isAuthenticated","getCookie","undefined","token","get","then","response","userData","data","email","given_name","family_name","picture","findUser","console","log","setAuthenticated","name","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","separatedCookie","CryptoJS","require","bytes","AES","decrypt","decodedCookie","toString","enc","Utf8"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AAEA,OAAO,eAAeC,eAAf,GAAiC;AACpC,MAAIC,SAAS,MAAMC,SAAnB,EAA8B;AAC1B,QAAIC,KAAK,GAAGF,SAAS,EAArB;AACA,WAAO,MAAMF,IAAI,CAACK,GAAL,CAAU,0DAAD,GAA6DD,KAAtE,EACRE,IADQ,CACHC,QAAQ,IAAI;AACd,UAAIC,QAAQ,GAAG;AACX,iBAASD,QAAQ,CAACE,IAAT,CAAcC,KADZ;AAEX,0BAAkBH,QAAQ,CAACE,IAAT,CAAcE,UAFrB;AAGX,yBAAiBJ,QAAQ,CAACE,IAAT,CAAcG,WAHpB;AAIX,sBAAcL,QAAQ,CAACE,IAAT,CAAcI;AAJjB,OAAf;AAOA,aAAOd,WAAW,CAACe,QAAZ,CAAqBN,QAArB,EACFF,IADE,CACGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACE,IAAT,IAAiB,IAArB,EAA2B;AACvBM,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAC,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,SAHD,MAIK;AACDF,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,UAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH;AACJ,OAVE,CAAP;AAWH,KApBQ,CAAb;AAqBH;AACJ,C,CAGD;;AACA,OAAO,MAAMf,SAAS,GAAG,MAAM;AAC3B,MAAIgB,IAAI,GAAG,eAAX;AACA,MAAId,KAAJ;AAEA,MAAIe,EAAE,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,CAAT;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,QAAIE,CAAC,GAAGN,EAAE,CAACI,CAAD,CAAV;;AACA,WAAOE,CAAC,CAACC,MAAF,CAAS,CAAT,KAAe,GAAtB,EAA2B;AACvBD,MAAAA,CAAC,GAAGA,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAJ;AACH;;AACD,QAAIF,CAAC,CAACG,OAAF,CAAUV,IAAV,KAAmB,CAAvB,EAA0B;AACtB,UAAIW,eAAe,GAAGJ,CAAC,CAACE,SAAF,CAAYT,IAAI,CAACM,MAAjB,EAAyBC,CAAC,CAACD,MAA3B,CAAtB,CADsB,CAGtB;;AACA,UAAIM,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,UAAIC,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAaC,OAAb,CAAqBL,eAArB,EAAsC,gBAAtC,CAAZ;AACA,UAAIM,aAAa,GAAGH,KAAK,CAACI,QAAN,CAAeN,QAAQ,CAACO,GAAT,CAAaC,IAA5B,CAApB;AACAlC,MAAAA,KAAK,GAAG+B,aAAR;AACH;AACJ;;AACD,SAAO/B,KAAP;AACH,CArBM","sourcesContent":["import Barcelparts from './Barcelparts.js'\r\nimport http from \"../http-common\";\r\n\r\nexport async function isAuthenticated() {\r\n    if (getCookie() != undefined) {\r\n        let token = getCookie();\r\n        return await http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + token)\r\n            .then(response => {\r\n                var userData = {\r\n                    \"Email\": response.data.email,\r\n                    \"User_FirstName\": response.data.given_name,\r\n                    \"User_LastName\": response.data.family_name,\r\n                    \"User_Image\": response.data.picture,\r\n                }\r\n\r\n                return Barcelparts.findUser(userData)\r\n                    .then(response => {\r\n                        if (response.data != null) {\r\n                            console.log(\"User authenticated\")\r\n                            setAuthenticated(true) \r\n                        }\r\n                        else {\r\n                            console.log(\"User not authenticated\")\r\n                            setAuthenticated(false) \r\n                        }\r\n                    })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//function to get cookie from its name\r\nexport const getCookie = () => {\r\n    let name = \"userGoogleId=\";\r\n    let token;\r\n\r\n    let ca = document.cookie.split(';');\r\n    for (let i = 0; i < ca.length; i++) {\r\n        let c = ca[i];\r\n        while (c.charAt(0) == ' ') {\r\n            c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n            var separatedCookie = c.substring(name.length, c.length)\r\n\r\n            //decrypt cookie\r\n            var CryptoJS = require(\"crypto-js\");\r\n            var bytes = CryptoJS.AES.decrypt(separatedCookie, 'secret key 123');\r\n            var decodedCookie = bytes.toString(CryptoJS.enc.Utf8);\r\n            token = decodedCookie;\r\n        }\r\n    }\r\n    return token\r\n}"]},"metadata":{},"sourceType":"module"}