{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommaAndColonSeparatedRecord = exports.ConnectionString = exports.redactConnectionString = void 0;\n\nconst whatwg_url_1 = require(\"whatwg-url\");\n\nconst redact_1 = require(\"./redact\");\n\nObject.defineProperty(exports, \"redactConnectionString\", {\n  enumerable: true,\n  get: function () {\n    return redact_1.redactConnectionString;\n  }\n});\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\n\nfunction connectionStringHasValidScheme(connectionString) {\n  return connectionString.startsWith('mongodb://') || connectionString.startsWith('mongodb+srv://');\n}\n\nconst HOSTS_REGEX = /^(?<protocol>[^/]+):\\/\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^/?@]*)(?<rest>.*)/;\n\nclass CaseInsensitiveMap extends Map {\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n\n  _normalizeKey(name) {\n    name = `${name}`;\n\n    for (const key of this.keys()) {\n      if (key.toLowerCase() === name.toLowerCase()) {\n        name = key;\n        break;\n      }\n    }\n\n    return name;\n  }\n\n}\n\nfunction caseInsenstiveURLSearchParams(Ctor) {\n  return class CaseInsenstiveURLSearchParams extends Ctor {\n    append(name, value) {\n      return super.append(this._normalizeKey(name), value);\n    }\n\n    delete(name) {\n      return super.delete(this._normalizeKey(name));\n    }\n\n    get(name) {\n      return super.get(this._normalizeKey(name));\n    }\n\n    getAll(name) {\n      return super.getAll(this._normalizeKey(name));\n    }\n\n    has(name) {\n      return super.has(this._normalizeKey(name));\n    }\n\n    set(name, value) {\n      return super.set(this._normalizeKey(name), value);\n    }\n\n    keys() {\n      return super.keys();\n    }\n\n    values() {\n      return super.values();\n    }\n\n    entries() {\n      return super.entries();\n    }\n\n    [Symbol.iterator]() {\n      return super[Symbol.iterator]();\n    }\n\n    _normalizeKey(name) {\n      return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n    }\n\n  };\n}\n\nclass URLWithoutHost extends whatwg_url_1.URL {}\n\nclass MongoParseError extends Error {\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nclass ConnectionString extends URLWithoutHost {\n  constructor(uri) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    const {\n      looseValidation\n    } = options;\n\n    if (!looseValidation && !connectionStringHasValidScheme(uri)) {\n      throw new MongoParseError('Invalid scheme, expected connection string to start with \"mongodb://\" or \"mongodb+srv://\"');\n    }\n\n    const match = uri.match(HOSTS_REGEX);\n\n    if (!match) {\n      throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n    }\n\n    const {\n      protocol,\n      username,\n      password,\n      hosts,\n      rest\n    } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n\n    if (!looseValidation) {\n      if (!protocol || !hosts) {\n        throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n      }\n\n      try {\n        decodeURIComponent(username !== null && username !== void 0 ? username : '');\n        decodeURIComponent(password !== null && password !== void 0 ? password : '');\n      } catch (err) {\n        throw new MongoParseError(err.message);\n      }\n\n      const illegalCharacters = /[:/?#[\\]@]/gi;\n\n      if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n        throw new MongoParseError(`Username contains unescaped characters ${username}`);\n      }\n\n      if (!username || !password) {\n        const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n\n        if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n          throw new MongoParseError('URI contained empty userinfo section');\n        }\n      }\n\n      if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n        throw new MongoParseError('Password contains unescaped characters');\n      }\n    }\n\n    let authString = '';\n    if (typeof username === 'string') authString += username;\n    if (typeof password === 'string') authString += `:${password}`;\n    if (authString) authString += '@';\n\n    try {\n      super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n    } catch (err) {\n      if (looseValidation) {\n        new ConnectionString(uri, { ...options,\n          looseValidation: false\n        });\n      }\n\n      if (typeof err.message === 'string') {\n        err.message = err.message.replace(DUMMY_HOSTNAME, hosts);\n      }\n\n      throw err;\n    }\n\n    this._hosts = hosts.split(',');\n\n    if (!looseValidation) {\n      if (this.isSRV && this.hosts.length !== 1) {\n        throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n      }\n\n      if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n        throw new MongoParseError('mongodb+srv URI cannot have port number');\n      }\n    }\n\n    if (!this.pathname) {\n      this.pathname = '/';\n    }\n\n    Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n  }\n\n  get host() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set host(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get hostname() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set hostname(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get port() {\n    return '';\n  }\n\n  set port(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get href() {\n    return this.toString();\n  }\n\n  set href(_ignored) {\n    throw new Error('Cannot set href for connection strings');\n  }\n\n  get isSRV() {\n    return this.protocol.includes('srv');\n  }\n\n  get hosts() {\n    return this._hosts;\n  }\n\n  set hosts(list) {\n    this._hosts = list;\n  }\n\n  toString() {\n    return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n  }\n\n  clone() {\n    return new ConnectionString(this.toString(), {\n      looseValidation: true\n    });\n  }\n\n  redact(options) {\n    return (0, redact_1.redactValidConnectionString)(this, options);\n  }\n\n  typedSearchParams() {\n    const sametype = false && new (caseInsenstiveURLSearchParams(whatwg_url_1.URLSearchParams))();\n    return this.searchParams;\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    const {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    } = this;\n    return {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    };\n  }\n\n}\n\nexports.ConnectionString = ConnectionString;\n\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n  constructor(from) {\n    super();\n\n    for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n      if (!entry) continue;\n      const colonIndex = entry.indexOf(':');\n\n      if (colonIndex === -1) {\n        this.set(entry, '');\n      } else {\n        this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n      }\n    }\n  }\n\n  toString() {\n    return [...this].map(entry => entry.join(':')).join(',');\n  }\n\n}\n\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\nexports.default = ConnectionString;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAKSA;AAAAC;AAAAC;AAAA,WAHPC,+BAGO;AAHe;AAGf;AAET,MAAMC,cAAc,GAAG,2BAAvB;;AAEA,SAASC,8BAAT,CAAwCC,gBAAxC,EAAgE;AAC9D,SACEA,gBAAgB,CAACC,UAAjB,CAA4B,YAA5B,KACAD,gBAAgB,CAACC,UAAjB,CAA4B,gBAA5B,CAFF;AAID;;AAID,MAAMC,WAAW,GACf,2GADF;;AAGA,MAAMC,kBAAN,SAA4DC,GAA5D,CAA0E;AACxEC,QAAM,CAACC,IAAD,EAAQ;AACZ,WAAO,MAAMD,MAAN,CAAa,KAAKE,aAAL,CAAmBD,IAAnB,CAAb,CAAP;AACD;;AAEDV,KAAG,CAACU,IAAD,EAAQ;AACT,WAAO,MAAMV,GAAN,CAAU,KAAKW,aAAL,CAAmBD,IAAnB,CAAV,CAAP;AACD;;AAEDE,KAAG,CAACF,IAAD,EAAQ;AACT,WAAO,MAAME,GAAN,CAAU,KAAKD,aAAL,CAAmBD,IAAnB,CAAV,CAAP;AACD;;AAEDG,KAAG,CAACH,IAAD,EAAUI,KAAV,EAAoB;AACrB,WAAO,MAAMD,GAAN,CAAU,KAAKF,aAAL,CAAmBD,IAAnB,CAAV,EAAoCI,KAApC,CAAP;AACD;;AAEDH,eAAa,CAACD,IAAD,EAAU;AACrBA,QAAI,GAAG,GAAGA,IAAI,EAAd;;AACA,SAAK,MAAMK,GAAX,IAAkB,KAAKC,IAAL,EAAlB,EAA+B;AAC7B,UAAID,GAAG,CAACE,WAAJ,OAAsBP,IAAI,CAACO,WAAL,EAA1B,EAA8C;AAC5CP,YAAI,GAAGK,GAAP;AACA;AACD;AACF;;AACD,WAAOL,IAAP;AACD;;AA1BuE;;AA6B1E,SAASQ,6BAAT,CAAkEC,IAAlE,EAA8F;AAC5F,SAAO,MAAMC,6BAAN,SAA4CD,IAA5C,CAAgD;AACrDE,UAAM,CAACX,IAAD,EAAUI,KAAV,EAAoB;AACxB,aAAO,MAAMO,MAAN,CAAa,KAAKV,aAAL,CAAmBD,IAAnB,CAAb,EAAuCI,KAAvC,CAAP;AACD;;AAEDL,UAAM,CAACC,IAAD,EAAQ;AACZ,aAAO,MAAMD,MAAN,CAAa,KAAKE,aAAL,CAAmBD,IAAnB,CAAb,CAAP;AACD;;AAEDV,OAAG,CAACU,IAAD,EAAQ;AACT,aAAO,MAAMV,GAAN,CAAU,KAAKW,aAAL,CAAmBD,IAAnB,CAAV,CAAP;AACD;;AAEDY,UAAM,CAACZ,IAAD,EAAQ;AACZ,aAAO,MAAMY,MAAN,CAAa,KAAKX,aAAL,CAAmBD,IAAnB,CAAb,CAAP;AACD;;AAEDE,OAAG,CAACF,IAAD,EAAQ;AACT,aAAO,MAAME,GAAN,CAAU,KAAKD,aAAL,CAAmBD,IAAnB,CAAV,CAAP;AACD;;AAEDG,OAAG,CAACH,IAAD,EAAUI,KAAV,EAAoB;AACrB,aAAO,MAAMD,GAAN,CAAU,KAAKF,aAAL,CAAmBD,IAAnB,CAAV,EAAoCI,KAApC,CAAP;AACD;;AAEDE,QAAI;AACF,aAAO,MAAMA,IAAN,EAAP;AACD;;AAEDO,UAAM;AACJ,aAAO,MAAMA,MAAN,EAAP;AACD;;AAEDC,WAAO;AACL,aAAO,MAAMA,OAAN,EAAP;AACD;;AAEe,KAAfC,MAAM,CAACC,QAAQ,IAAC;AACf,aAAO,MAAMD,MAAM,CAACC,QAAb,GAAP;AACD;;AAEDf,iBAAa,CAACD,IAAD,EAAQ;AACnB,aAAOH,kBAAkB,CAACoB,SAAnB,CAA6BhB,aAA7B,CAA2CiB,IAA3C,CAAgD,IAAhD,EAAsDlB,IAAtD,CAAP;AACD;;AA3CoD,GAAvD;AA6CD;;AAGD,MAAemB,cAAf,SAAsCC,gBAAtC,CAAyC;;AAWzC,MAAMC,eAAN,SAA8BC,KAA9B,CAAmC;AACzB,MAAJtB,IAAI;AACN,WAAO,iBAAP;AACD;;AAHgC;;AAcnC,MAAauB,gBAAb,SAAsCJ,cAAtC,CAAoD;AAIlDK,cAAYC,GAAZ,EAAqE;AAAA,QAA5CC,OAA4C,uEAAF,EAAE;;;;AACnE,UAAM;AAAEC;AAAF,QAAsBD,OAA5B;;AACA,QAAI,CAACC,eAAD,IAAoB,CAAClC,8BAA8B,CAACgC,GAAD,CAAvD,EAA8D;AAC5D,YAAM,IAAIJ,eAAJ,CAAoB,2FAApB,CAAN;AACD;;AAED,UAAMO,KAAK,GAAGH,GAAG,CAACG,KAAJ,CAAUhC,WAAV,CAAd;;AACA,QAAI,CAACgC,KAAL,EAAY;AACV,YAAM,IAAIP,eAAJ,CAAoB,8BAA8BI,GAAG,GAArD,CAAN;AACD;;AAED,UAAM;AAAEI,cAAF;AAAYC,cAAZ;AAAsBC,cAAtB;AAAgCC,WAAhC;AAAuCC;AAAvC,QAAgD,WAAK,CAACC,MAAN,MAAY,IAAZ,IAAYC,aAAZ,GAAYA,EAAZ,GAAgB,EAAtE;;AAEA,QAAI,CAACR,eAAL,EAAsB;AACpB,UAAI,CAACE,QAAD,IAAa,CAACG,KAAlB,EAAyB;AACvB,cAAM,IAAIX,eAAJ,CAAoB,2CAA2CI,GAAG,GAAlE,CAAN;AACD;;AAED,UAAI;AACFW,0BAAkB,CAACN,QAAQ,SAAR,YAAQ,WAAR,cAAY,EAAb,CAAlB;AACAM,0BAAkB,CAACL,QAAQ,SAAR,YAAQ,WAAR,cAAY,EAAb,CAAlB;AACD,OAHD,CAGE,OAAOM,GAAP,EAAY;AACZ,cAAM,IAAIhB,eAAJ,CAAqBgB,GAAa,CAACC,OAAnC,CAAN;AACD;;AAGD,YAAMC,iBAAiB,GAAG,cAA1B;;AACA,UAAIT,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEF,KAAV,CAAgBW,iBAAhB,CAAJ,EAAwC;AACtC,cAAM,IAAIlB,eAAJ,CAAoB,0CAA0CS,QAAQ,EAAtE,CAAN;AACD;;AACD,UAAI,CAACA,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1B,cAAMS,kBAAkB,GAAGf,GAAG,CAACgB,OAAJ,CAAY,GAAGZ,QAAQ,KAAvB,EAA8B,EAA9B,CAA3B;;AACA,YAAIW,kBAAkB,CAAC7C,UAAnB,CAA8B,GAA9B,KAAsC6C,kBAAkB,CAAC7C,UAAnB,CAA8B,GAA9B,CAA1C,EAA8E;AAC5E,gBAAM,IAAI0B,eAAJ,CAAoB,sCAApB,CAAN;AACD;AACF;;AAED,UAAIU,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEH,KAAV,CAAgBW,iBAAhB,CAAJ,EAAwC;AACtC,cAAM,IAAIlB,eAAJ,CAAoB,wCAApB,CAAN;AACD;AACF;;AAED,QAAIqB,UAAU,GAAG,EAAjB;AACA,QAAI,OAAOZ,QAAP,KAAoB,QAAxB,EAAkCY,UAAU,IAAIZ,QAAd;AAClC,QAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkCW,UAAU,IAAI,IAAIX,QAAQ,EAA1B;AAClC,QAAIW,UAAJ,EAAgBA,UAAU,IAAI,GAAd;;AAEhB,QAAI;AACF,YAAM,GAAGb,QAAQ,CAACtB,WAAT,EAAsB,MAAMmC,UAAU,GAAGlD,cAAc,GAAGyC,IAAI,EAAvE;AACD,KAFD,CAEE,OAAOI,GAAP,EAAiB;AACjB,UAAIV,eAAJ,EAAqB;AAInB,YAAIJ,gBAAJ,CAAqBE,GAArB,EAA0B,EACxB,GAAGC,OADqB;AAExBC,yBAAe,EAAE;AAFO,SAA1B;AAID;;AACD,UAAI,OAAOU,GAAG,CAACC,OAAX,KAAuB,QAA3B,EAAqC;AACnCD,WAAG,CAACC,OAAJ,GAAcD,GAAG,CAACC,OAAJ,CAAYG,OAAZ,CAAoBjD,cAApB,EAAoCwC,KAApC,CAAd;AACD;;AACD,YAAMK,GAAN;AACD;;AACD,SAAKM,MAAL,GAAcX,KAAK,CAACY,KAAN,CAAY,GAAZ,CAAd;;AAEA,QAAI,CAACjB,eAAL,EAAsB;AACpB,UAAI,KAAKkB,KAAL,IAAc,KAAKb,KAAL,CAAWc,MAAX,KAAsB,CAAxC,EAA2C;AACzC,cAAM,IAAIzB,eAAJ,CAAoB,oDAApB,CAAN;AACD;;AACD,UAAI,KAAKwB,KAAL,IAAc,KAAKb,KAAL,CAAWe,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAc,GAAd,CAAxB,CAAlB,EAA+D;AAC7D,cAAM,IAAI5B,eAAJ,CAAoB,yCAApB,CAAN;AACD;AACF;;AAED,QAAI,CAAC,KAAK6B,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,GAAhB;AACD;;AACD9D,UAAM,CAAC+D,cAAP,CAAsB,KAAKC,YAA3B,EAAyC5C,6BAA6B,CAAC,KAAK4C,YAAL,CAAkB5B,WAAnB,CAA7B,CAAoEP,SAA7G;AACD;;AAKO,MAAJ+B,IAAI;AAAY,WAAOxD,cAAP;AAAiC;;AAC7C,MAAJwD,IAAI,CAACK,QAAD,EAAgB;AAAI,UAAM,IAAI/B,KAAJ,CAAU,sCAAV,CAAN;AAA0D;;AAC1E,MAARgC,QAAQ;AAAY,WAAO9D,cAAP;AAAiC;;AAC7C,MAAR8D,QAAQ,CAACD,QAAD,EAAgB;AAAI,UAAM,IAAI/B,KAAJ,CAAU,sCAAV,CAAN;AAA0D;;AAClF,MAAJiC,IAAI;AAAY,WAAO,EAAP;AAAqB;;AACjC,MAAJA,IAAI,CAACF,QAAD,EAAgB;AAAI,UAAM,IAAI/B,KAAJ,CAAU,sCAAV,CAAN;AAA0D;;AAC9E,MAAJkC,IAAI;AAAa,WAAO,KAAKC,QAAL,EAAP;AAAyB;;AACtC,MAAJD,IAAI,CAACH,QAAD,EAAiB;AAAI,UAAM,IAAI/B,KAAJ,CAAU,wCAAV,CAAN;AAA4D;;AAEhF,MAALuB,KAAK;AACP,WAAO,KAAKhB,QAAL,CAAcoB,QAAd,CAAuB,KAAvB,CAAP;AACD;;AAEQ,MAALjB,KAAK;AACP,WAAO,KAAKW,MAAZ;AACD;;AAEQ,MAALX,KAAK,CAAC0B,IAAD,EAAe;AACtB,SAAKf,MAAL,GAAce,IAAd;AACD;;AAEDD,UAAQ;AACN,WAAO,MAAMA,QAAN,GAAiBhB,OAAjB,CAAyBjD,cAAzB,EAAyC,KAAKwC,KAAL,CAAW2B,IAAX,CAAgB,GAAhB,CAAzC,CAAP;AACD;;AAEDC,OAAK;AACH,WAAO,IAAIrC,gBAAJ,CAAqB,KAAKkC,QAAL,EAArB,EAAsC;AAC3C9B,qBAAe,EAAE;AAD0B,KAAtC,CAAP;AAGD;;AAEDkC,QAAM,CAACnC,OAAD,EAA2C;AAC/C,WAAO,0CAA4B,IAA5B,EAAkCA,OAAlC,CAAP;AACD;;AAGDoC,mBAAiB;AACf,UAAMC,QAAQ,GAAI,SAAkB,KAAKvD,6BAA6B,CAAmBY,4BAAnB,CAAlC,GAApC;AACA,WAAO,KAAKgC,YAAZ;AACD;;AAEwC,GAAxCrC,MAAM,CAACiD,GAAP,CAAW,4BAAX,CAAwC,IAAC;AACxC,UAAM;AAAER,UAAF;AAAQS,YAAR;AAAgBpC,cAAhB;AAA0BC,cAA1B;AAAoCC,cAApC;AAA8CC,WAA9C;AAAqDkB,cAArD;AAA+DgB,YAA/D;AAAuEd,kBAAvE;AAAqFe;AAArF,QAA8F,IAApG;AACA,WAAO;AAAEX,UAAF;AAAQS,YAAR;AAAgBpC,cAAhB;AAA0BC,cAA1B;AAAoCC,cAApC;AAA8CC,WAA9C;AAAqDkB,cAArD;AAA+DgB,YAA/D;AAAuEd,kBAAvE;AAAqFe;AAArF,KAAP;AACD;;AApIiD;;AAApDC;;AA4IA,MAAaC,4BAAb,SAA0FxE,kBAA1F,CAA8H;AAC5H2B,cAAY8C,IAAZ,EAAgC;AAC9B;;AACA,SAAK,MAAMC,KAAX,IAAoB,CAACD,IAAI,SAAJ,QAAI,WAAJ,UAAQ,EAAT,EAAa1B,KAAb,CAAmB,GAAnB,CAApB,EAA6C;AAC3C,UAAI,CAAC2B,KAAL,EAAY;AACZ,YAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,CAAc,GAAd,CAAnB;;AAEA,UAAID,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrB,aAAKrE,GAAL,CAASoE,KAAT,EAAsC,EAAtC;AACD,OAFD,MAEO;AACL,aAAKpE,GAAL,CAASoE,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeF,UAAf,CAAT,EAA2DD,KAAK,CAACG,KAAN,CAAYF,UAAU,GAAG,CAAzB,CAA3D;AACD;AACF;AACF;;AAEDf,UAAQ;AACN,WAAO,CAAC,GAAG,IAAJ,EAAUkB,GAAV,CAAcJ,KAAK,IAAIA,KAAK,CAACZ,IAAN,CAAW,GAAX,CAAvB,EAAwCA,IAAxC,CAA6C,GAA7C,CAAP;AACD;;AAjB2H;;AAA9HS;AAoBAA,kBAAe7C,gBAAf","names":["Object","enumerable","get","redact_1","DUMMY_HOSTNAME","connectionStringHasValidScheme","connectionString","startsWith","HOSTS_REGEX","CaseInsensitiveMap","Map","delete","name","_normalizeKey","has","set","value","key","keys","toLowerCase","caseInsenstiveURLSearchParams","Ctor","CaseInsenstiveURLSearchParams","append","getAll","values","entries","Symbol","iterator","prototype","call","URLWithoutHost","whatwg_url_1","MongoParseError","Error","ConnectionString","constructor","uri","options","looseValidation","match","protocol","username","password","hosts","rest","groups","_a","decodeURIComponent","err","message","illegalCharacters","uriWithoutProtocol","replace","authString","_hosts","split","isSRV","length","some","host","includes","pathname","setPrototypeOf","searchParams","_ignored","hostname","port","href","toString","list","join","clone","redact","typedSearchParams","sametype","for","origin","search","hash","exports","CommaAndColonSeparatedRecord","from","entry","colonIndex","indexOf","slice","map"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}