{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DistinctOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\n\n\nclass DistinctOperation extends command_1.CommandOperation {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options; // Distinct command\n\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    }; // Add maxTimeMS if defined\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    } // Do we have a readConcern specified\n\n\n    (0, utils_1.decorateWithReadConcern)(cmd, coll, options); // Have we specified collation\n\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on distinct`));\n      return;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n\n}\n\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"mappings":";;;;;;;AAEA;;AAGA;;AACA;;AACA;AAKA;;;;;;AAIA,MAAaA,iBAAb,SAAuCC,0BAAvC,CAA8D;AAQ5D;;;;;;;;AAQAC,cAAYC,UAAZ,EAAoCC,GAApC,EAAiDC,KAAjD,EAAkEC,OAAlE,EAA2F;AACzF,UAAMH,UAAN,EAAkBG,OAAlB;AAEA,SAAKA,OAAL,GAAeA,OAAO,SAAP,WAAO,WAAP,aAAW,EAA1B;AACA,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAEQE,SAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGW;AAEzB,UAAMC,IAAI,GAAG,KAAKR,UAAlB;AACA,UAAMC,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMC,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB,CALyB,CAOzB;;AACA,UAAMM,GAAG,GAAa;AACpBC,cAAQ,EAAEF,IAAI,CAACG,cADK;AAEpBV,SAAG,EAAEA,GAFe;AAGpBC,WAAK,EAAEA;AAHa,KAAtB,CARyB,CAczB;;AACA,QAAI,OAAOC,OAAO,CAACS,SAAf,KAA6B,QAAjC,EAA2C;AACzCH,SAAG,CAACG,SAAJ,GAAgBT,OAAO,CAACS,SAAxB;AACD,KAjBwB,CAmBzB;;;AACA,yCAAwBH,GAAxB,EAA6BD,IAA7B,EAAmCL,OAAnC,EApByB,CAsBzB;;AACA,QAAI;AACF,yCAAsBM,GAAtB,EAA2BD,IAA3B,EAAiCL,OAAjC;AACD,KAFD,CAEE,OAAOU,GAAP,EAAY;AACZ,aAAON,QAAQ,CAACM,GAAD,CAAf;AACD;;AAED,QAAI,KAAKC,OAAL,IAAgB,4BAAeT,MAAf,IAAyB,CAA7C,EAAgD;AAC9CE,cAAQ,CACN,IAAIQ,+BAAJ,CAA4B,UAAUV,MAAM,CAACW,IAAI,uCAAjD,CADM,CAAR;AAGA;AACD;;AAED,UAAMC,cAAN,CAAqBZ,MAArB,EAA6BC,OAA7B,EAAsCG,GAAtC,EAA2C,CAACI,GAAD,EAAMK,MAAN,KAAgB;AACzD,UAAIL,GAAJ,EAAS;AACPN,gBAAQ,CAACM,GAAD,CAAR;AACA;AACD;;AAEDN,cAAQ,CAACY,SAAD,EAAY,KAAKL,OAAL,GAAeI,MAAf,GAAwBA,MAAM,CAACE,MAA3C,CAAR;AACD,KAPD;AAQD;;AAxE2D;;AAA9DC;AA2EA,+BAAcxB,iBAAd,EAAiC,CAACyB,mBAAOC,cAAR,EAAwBD,mBAAOE,SAA/B,EAA0CF,mBAAOG,WAAjD,CAAjC","names":["DistinctOperation","command_1","constructor","collection","key","query","options","execute","server","session","callback","coll","cmd","distinct","collectionName","maxTimeMS","err","explain","error_1","name","executeCommand","result","undefined","values","exports","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\distinct.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, decorateWithCollation, decorateWithReadConcern, maxWireVersion } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport type DistinctOptions = CommandOperationOptions;\n\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nexport class DistinctOperation extends CommandOperation<any[]> {\n  override options: DistinctOptions;\n  collection: Collection;\n  /** Field of the document to find distinct values for. */\n  key: string;\n  /** The query for filtering the set of documents to which we apply the distinct filter. */\n  query: Document;\n\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection: Collection, key: string, query: Document, options?: DistinctOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<any[]>\n  ): void {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n\n    // Distinct command\n    const cmd: Document = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(cmd, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (this.explain && maxWireVersion(server) < 4) {\n      callback(\n        new MongoCompatibilityError(`Server ${server.name} does not support explain on distinct`)\n      );\n      return;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n}\n\ndefineAspects(DistinctOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXPLAINABLE]);\n"]},"metadata":{},"sourceType":"script"}