{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst transactions_1 = require(\"../transactions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst monitor_1 = require(\"./monitor\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kMonitor = Symbol('monitor');\n/** @internal */\n\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\r\n   * Create a server\r\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions)\n    };\n\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n\n    if (this.loadBalanced) {\n      this[kMonitor] = null; // monitoring is disabled in load balancing mode\n\n      return;\n    } // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n\n\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n\n    monitor.on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get clusterTime() {\n    return this.s.topology.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n\n    return;\n  }\n\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\r\n   * Initiate server connect\r\n   */\n\n\n  connect() {\n    var _a;\n\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n\n\n  destroy(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\r\n   * Immediately schedule monitoring of this server. If there already an attempt being made\r\n   * this will be a no-op.\r\n   */\n\n\n  requestCheck() {\n    var _a;\n\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.requestCheck();\n    }\n  }\n  /**\r\n   * Execute a command\r\n   * @internal\r\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    } // Clone the options\n\n\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    } // error if collation not supported\n\n\n    if ((0, utils_1.collationNotSupported)(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, cb));\n    }, callback);\n  }\n  /**\r\n   * Execute a query against the server\r\n   * @internal\r\n   */\n\n\n  query(ns, cmd, options, callback) {\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection(undefined, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n    }, callback);\n  }\n  /**\r\n   * Execute a `getMore` against the server\r\n   * @internal\r\n   */\n\n\n  getMore(ns, cursorId, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\n    }, callback);\n  }\n  /**\r\n   * Execute a `killCursors` command against the server\r\n   * @internal\r\n   */\n\n\n  killCursors(ns, cursorIds, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new error_1.MongoServerClosedError());\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorIds, options, makeOperationHandler(this, conn, {}, undefined, cb));\n    }, callback);\n  }\n\n}\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\n\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\n\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\n\nServer.ENDED = constants_1.ENDED;\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  var _a; // Load balancer servers can never be marked unknown.\n\n\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    (_a = server[kMonitor]) === null || _a === void 0 ? void 0 : _a.reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\r\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      } // inActiveTransaction check handles commit and abort.\n\n\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n\n      if (!(error instanceof error_1.MongoNetworkTimeoutError) || (0, error_1.isNetworkErrorBeforeHandshake)(error)) {\n        // In load balanced mode we never mark the server as unknown and always\n        // clear for the specific service id.\n        server.s.pool.clear(connection.serviceId);\n\n        if (!server.loadBalanced) {\n          markServerUnknown(server, error);\n        }\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(server, error)) {\n          if ((0, utils_1.maxWireVersion)(server) <= 7 || (0, error_1.isNodeShuttingDownError)(error)) {\n            server.s.pool.clear(connection.serviceId);\n          }\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, error);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n\n    return callback(error);\n  };\n}","map":{"version":3,"mappings":"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","names":["stateTransition","common_1","kMonitor","Symbol","Server","mongo_types_1","constructor","topology","description","options","serverApi","poolOptions","hostAddress","s","logger","logger_1","state","pool","connection_pool_1","event","constants_1","on","e","emit","connection_1","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","monitor_1","clear","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","server_description_1","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","LoadBalanced","connect","_a","destroy","callback","Object","assign","force","close","err","requestCheck","command","ns","cmd","error_1","db","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","withConnection","cb","makeOperationHandler","query","undefined","getMore","cursorId","killCursors","cursorIds","exports","oldRtt","alpha","server","reset","topologyVersion","inTransaction","connectionIsStale","connection","serviceId","generation","serviceGenerations","get","toHexString","shouldHandleStateChangeError","etv","stv","inActiveTransaction","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","hasEnded","serverSession","isDirty","hasErrorLabel","TransientTransactionError","addErrorLabel","RetryableWriteError","process","nextTick","isPinned","unpin"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\sdam\\server.ts"],"sourcesContent":["import type { Document, Long } from '../bson';\r\nimport {\r\n  CommandOptions,\r\n  Connection,\r\n  DestroyOptions,\r\n  GetMoreOptions,\r\n  QueryOptions\r\n} from '../cmap/connection';\r\nimport {\r\n  ConnectionPool,\r\n  ConnectionPoolEvents,\r\n  ConnectionPoolOptions\r\n} from '../cmap/connection_pool';\r\nimport {\r\n  APM_EVENTS,\r\n  CLOSED,\r\n  CMAP_EVENTS,\r\n  CONNECT,\r\n  DESCRIPTION_RECEIVED,\r\n  ENDED,\r\n  HEARTBEAT_EVENTS,\r\n  SERVER_HEARTBEAT_FAILED,\r\n  SERVER_HEARTBEAT_STARTED,\r\n  SERVER_HEARTBEAT_SUCCEEDED\r\n} from '../constants';\r\nimport type { AutoEncrypter } from '../deps';\r\nimport {\r\n  isNetworkErrorBeforeHandshake,\r\n  isNodeShuttingDownError,\r\n  isSDAMUnrecoverableError,\r\n  MongoCompatibilityError,\r\n  MongoError,\r\n  MongoErrorLabel,\r\n  MongoInvalidArgumentError,\r\n  MongoNetworkError,\r\n  MongoNetworkTimeoutError,\r\n  MongoServerClosedError,\r\n  MongoUnexpectedServerResponseError,\r\n  needsRetryableWriteLabel\r\n} from '../error';\r\nimport { Logger } from '../logger';\r\nimport type { ServerApi } from '../mongo_client';\r\nimport { TypedEventEmitter } from '../mongo_types';\r\nimport type { ClientSession } from '../sessions';\r\nimport { isTransactionCommand } from '../transactions';\r\nimport {\r\n  Callback,\r\n  collationNotSupported,\r\n  EventEmitterWithState,\r\n  makeStateMachine,\r\n  maxWireVersion,\r\n  MongoDBNamespace,\r\n  supportsRetryableWrites\r\n} from '../utils';\r\nimport {\r\n  ClusterTime,\r\n  STATE_CLOSED,\r\n  STATE_CLOSING,\r\n  STATE_CONNECTED,\r\n  STATE_CONNECTING,\r\n  TopologyType\r\n} from './common';\r\nimport type {\r\n  ServerHeartbeatFailedEvent,\r\n  ServerHeartbeatStartedEvent,\r\n  ServerHeartbeatSucceededEvent\r\n} from './events';\r\nimport { Monitor, MonitorOptions } from './monitor';\r\nimport { compareTopologyVersion, ServerDescription } from './server_description';\r\nimport type { Topology } from './topology';\r\n\r\nconst stateTransition = makeStateMachine({\r\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\r\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\r\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\r\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\r\n});\r\n\r\n/** @internal */\r\nconst kMonitor = Symbol('monitor');\r\n\r\n/** @public */\r\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\r\n  MonitorOptions;\r\n\r\n/** @internal */\r\nexport interface ServerPrivate {\r\n  /** The server description for this server */\r\n  description: ServerDescription;\r\n  /** A copy of the options used to construct this instance */\r\n  options: ServerOptions;\r\n  /** A logger instance */\r\n  logger: Logger;\r\n  /** The current state of the Server */\r\n  state: string;\r\n  /** The topology this server is a part of */\r\n  topology: Topology;\r\n  /** A connection pool for this server */\r\n  pool: ConnectionPool;\r\n  /** MongoDB server API version */\r\n  serverApi?: ServerApi;\r\n}\r\n\r\n/** @public */\r\nexport type ServerEvents = {\r\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\r\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\r\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\r\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\r\n  connect(server: Server): void;\r\n  descriptionReceived(description: ServerDescription): void;\r\n  closed(): void;\r\n  ended(): void;\r\n} & ConnectionPoolEvents &\r\n  EventEmitterWithState;\r\n\r\n/** @internal */\r\nexport class Server extends TypedEventEmitter<ServerEvents> {\r\n  /** @internal */\r\n  s: ServerPrivate;\r\n  serverApi?: ServerApi;\r\n  hello?: Document;\r\n  [kMonitor]: Monitor | null;\r\n\r\n  /** @event */\r\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\r\n  /** @event */\r\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\r\n  /** @event */\r\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\r\n  /** @event */\r\n  static readonly CONNECT = CONNECT;\r\n  /** @event */\r\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\r\n  /** @event */\r\n  static readonly CLOSED = CLOSED;\r\n  /** @event */\r\n  static readonly ENDED = ENDED;\r\n\r\n  /**\r\n   * Create a server\r\n   */\r\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\r\n    super();\r\n\r\n    this.serverApi = options.serverApi;\r\n\r\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\r\n\r\n    this.s = {\r\n      description,\r\n      options,\r\n      logger: new Logger('Server'),\r\n      state: STATE_CLOSED,\r\n      topology,\r\n      pool: new ConnectionPool(poolOptions)\r\n    };\r\n\r\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\r\n      this.s.pool.on(event, (e: any) => this.emit(event, e));\r\n    }\r\n\r\n    this.s.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\r\n      this.clusterTime = clusterTime;\r\n    });\r\n\r\n    if (this.loadBalanced) {\r\n      this[kMonitor] = null;\r\n      // monitoring is disabled in load balancing mode\r\n      return;\r\n    }\r\n\r\n    // create the monitor\r\n    // TODO(NODE-4144): Remove new variable for type narrowing\r\n    const monitor = new Monitor(this, this.s.options);\r\n    this[kMonitor] = monitor;\r\n\r\n    for (const event of HEARTBEAT_EVENTS) {\r\n      monitor.on(event, (e: any) => this.emit(event, e));\r\n    }\r\n\r\n    monitor.on('resetConnectionPool', () => {\r\n      this.s.pool.clear();\r\n    });\r\n\r\n    monitor.on('resetServer', (error: MongoError) => markServerUnknown(this, error));\r\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\r\n      this.emit(\r\n        Server.DESCRIPTION_RECEIVED,\r\n        new ServerDescription(this.description.hostAddress, event.reply, {\r\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\r\n        })\r\n      );\r\n\r\n      if (this.s.state === STATE_CONNECTING) {\r\n        stateTransition(this, STATE_CONNECTED);\r\n        this.emit(Server.CONNECT, this);\r\n      }\r\n    });\r\n  }\r\n\r\n  get clusterTime(): ClusterTime | undefined {\r\n    return this.s.topology.clusterTime;\r\n  }\r\n\r\n  set clusterTime(clusterTime: ClusterTime | undefined) {\r\n    this.s.topology.clusterTime = clusterTime;\r\n  }\r\n\r\n  get description(): ServerDescription {\r\n    return this.s.description;\r\n  }\r\n\r\n  get name(): string {\r\n    return this.s.description.address;\r\n  }\r\n\r\n  get autoEncrypter(): AutoEncrypter | undefined {\r\n    if (this.s.options && this.s.options.autoEncrypter) {\r\n      return this.s.options.autoEncrypter;\r\n    }\r\n    return;\r\n  }\r\n\r\n  get loadBalanced(): boolean {\r\n    return this.s.topology.description.type === TopologyType.LoadBalanced;\r\n  }\r\n\r\n  /**\r\n   * Initiate server connect\r\n   */\r\n  connect(): void {\r\n    if (this.s.state !== STATE_CLOSED) {\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CONNECTING);\r\n\r\n    // If in load balancer mode we automatically set the server to\r\n    // a load balancer. It never transitions out of this state and\r\n    // has no monitor.\r\n    if (!this.loadBalanced) {\r\n      this[kMonitor]?.connect();\r\n    } else {\r\n      stateTransition(this, STATE_CONNECTED);\r\n      this.emit(Server.CONNECT, this);\r\n    }\r\n  }\r\n\r\n  /** Destroy the server connection */\r\n  destroy(options?: DestroyOptions, callback?: Callback): void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = Object.assign({}, { force: false }, options);\r\n\r\n    if (this.s.state === STATE_CLOSED) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CLOSING);\r\n\r\n    if (!this.loadBalanced) {\r\n      this[kMonitor]?.close();\r\n    }\r\n\r\n    this.s.pool.close(options, err => {\r\n      stateTransition(this, STATE_CLOSED);\r\n      this.emit('closed');\r\n      if (typeof callback === 'function') {\r\n        callback(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Immediately schedule monitoring of this server. If there already an attempt being made\r\n   * this will be a no-op.\r\n   */\r\n  requestCheck(): void {\r\n    if (!this.loadBalanced) {\r\n      this[kMonitor]?.requestCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   * @internal\r\n   */\r\n  command(\r\n    ns: MongoDBNamespace,\r\n    cmd: Document,\r\n    options: CommandOptions,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    if (callback == null) {\r\n      throw new MongoInvalidArgumentError('Callback must be provided');\r\n    }\r\n\r\n    if (ns.db == null || typeof ns === 'string') {\r\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\r\n    }\r\n\r\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\r\n      callback(new MongoServerClosedError());\r\n      return;\r\n    }\r\n\r\n    // Clone the options\r\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\r\n\r\n    // There are cases where we need to flag the read preference not to get sent in\r\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\r\n    // with a non-primary read preference. In this case the effective read preference\r\n    // (primary) is not the same as the provided and must be removed completely.\r\n    if (finalOptions.omitReadPreference) {\r\n      delete finalOptions.readPreference;\r\n    }\r\n\r\n    // error if collation not supported\r\n    if (collationNotSupported(this, cmd)) {\r\n      callback(new MongoCompatibilityError(`Server ${this.name} does not support collation`));\r\n      return;\r\n    }\r\n\r\n    const session = finalOptions.session;\r\n    const conn = session?.pinnedConnection;\r\n\r\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\r\n    //       (and prevent them from being checked back in) at the point of operation execution.\r\n    //       This should be considered as part of the work for NODE-2882\r\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\r\n      this.s.pool.checkOut((err, checkedOut) => {\r\n        if (err || checkedOut == null) {\r\n          if (callback) return callback(err);\r\n          return;\r\n        }\r\n\r\n        session.pin(checkedOut);\r\n        this.command(ns, cmd, finalOptions, callback);\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.s.pool.withConnection(\r\n      conn,\r\n      (err, conn, cb) => {\r\n        if (err || !conn) {\r\n          markServerUnknown(this, err);\r\n          return cb(err);\r\n        }\r\n\r\n        conn.command(\r\n          ns,\r\n          cmd,\r\n          finalOptions,\r\n          makeOperationHandler(this, conn, cmd, finalOptions, cb)\r\n        );\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute a query against the server\r\n   * @internal\r\n   */\r\n  query(ns: MongoDBNamespace, cmd: Document, options: QueryOptions, callback: Callback): void {\r\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\r\n      callback(new MongoServerClosedError());\r\n      return;\r\n    }\r\n\r\n    this.s.pool.withConnection(\r\n      undefined,\r\n      (err, conn, cb) => {\r\n        if (err || !conn) {\r\n          markServerUnknown(this, err);\r\n          return cb(err);\r\n        }\r\n\r\n        conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute a `getMore` against the server\r\n   * @internal\r\n   */\r\n  getMore(\r\n    ns: MongoDBNamespace,\r\n    cursorId: Long,\r\n    options: GetMoreOptions,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\r\n      callback(new MongoServerClosedError());\r\n      return;\r\n    }\r\n\r\n    this.s.pool.withConnection(\r\n      options.session?.pinnedConnection,\r\n      (err, conn, cb) => {\r\n        if (err || !conn) {\r\n          markServerUnknown(this, err);\r\n          return cb(err);\r\n        }\r\n\r\n        conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute a `killCursors` command against the server\r\n   * @internal\r\n   */\r\n  killCursors(\r\n    ns: MongoDBNamespace,\r\n    cursorIds: Long[],\r\n    options: CommandOptions,\r\n    callback?: Callback\r\n  ): void {\r\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\r\n      if (typeof callback === 'function') {\r\n        callback(new MongoServerClosedError());\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this.s.pool.withConnection(\r\n      options.session?.pinnedConnection,\r\n      (err, conn, cb) => {\r\n        if (err || !conn) {\r\n          markServerUnknown(this, err);\r\n          return cb(err);\r\n        }\r\n\r\n        conn.killCursors(\r\n          ns,\r\n          cursorIds,\r\n          options,\r\n          makeOperationHandler(this, conn, {}, undefined, cb)\r\n        );\r\n      },\r\n      callback\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\r\n  if (oldRtt === -1) {\r\n    return duration;\r\n  }\r\n\r\n  const alpha = 0.2;\r\n  return alpha * duration + (1 - alpha) * oldRtt;\r\n}\r\n\r\nfunction markServerUnknown(server: Server, error?: MongoError) {\r\n  // Load balancer servers can never be marked unknown.\r\n  if (server.loadBalanced) {\r\n    return;\r\n  }\r\n\r\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\r\n    server[kMonitor]?.reset();\r\n  }\r\n\r\n  server.emit(\r\n    Server.DESCRIPTION_RECEIVED,\r\n    new ServerDescription(server.description.hostAddress, undefined, {\r\n      error,\r\n      topologyVersion:\r\n        error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\r\n    })\r\n  );\r\n}\r\n\r\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\r\n  if (session) {\r\n    return (\r\n      session.inTransaction() ||\r\n      'aggregate' in cmd ||\r\n      'find' in cmd ||\r\n      'getMore' in cmd ||\r\n      'listCollections' in cmd ||\r\n      'listIndexes' in cmd\r\n    );\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\r\n  if (connection.serviceId) {\r\n    return (\r\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\r\n    );\r\n  }\r\n\r\n  return connection.generation !== pool.generation;\r\n}\r\n\r\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\r\n  const etv = err.topologyVersion;\r\n  const stv = server.description.topologyVersion;\r\n  return compareTopologyVersion(stv, etv) < 0;\r\n}\r\n\r\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\r\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\r\n}\r\n\r\n/** this checks the retryWrites option passed down from the client options, it\r\n * does not check if the server supports retryable writes */\r\nfunction isRetryableWritesEnabled(topology: Topology) {\r\n  return topology.s.options.retryWrites !== false;\r\n}\r\n\r\nfunction makeOperationHandler(\r\n  server: Server,\r\n  connection: Connection,\r\n  cmd: Document,\r\n  options: CommandOptions | GetMoreOptions | undefined,\r\n  callback: Callback\r\n): Callback {\r\n  const session = options?.session;\r\n  return function handleOperationResult(error, result) {\r\n    if (result != null) {\r\n      return callback(undefined, result);\r\n    }\r\n\r\n    if (!error) {\r\n      return callback(new MongoUnexpectedServerResponseError('Empty response with no error'));\r\n    }\r\n\r\n    if (!(error instanceof MongoError)) {\r\n      // Node.js or some other error we have not special handling for\r\n      return callback(error);\r\n    }\r\n\r\n    if (connectionIsStale(server.s.pool, connection)) {\r\n      return callback(error);\r\n    }\r\n\r\n    if (error instanceof MongoNetworkError) {\r\n      if (session && !session.hasEnded && session.serverSession) {\r\n        session.serverSession.isDirty = true;\r\n      }\r\n\r\n      // inActiveTransaction check handles commit and abort.\r\n      if (\r\n        inActiveTransaction(session, cmd) &&\r\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\r\n      ) {\r\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\r\n      }\r\n\r\n      if (\r\n        (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\r\n        supportsRetryableWrites(server) &&\r\n        !inActiveTransaction(session, cmd)\r\n      ) {\r\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\r\n      }\r\n\r\n      if (!(error instanceof MongoNetworkTimeoutError) || isNetworkErrorBeforeHandshake(error)) {\r\n        // In load balanced mode we never mark the server as unknown and always\r\n        // clear for the specific service id.\r\n\r\n        server.s.pool.clear(connection.serviceId);\r\n        if (!server.loadBalanced) {\r\n          markServerUnknown(server, error);\r\n        }\r\n      }\r\n    } else {\r\n      if (\r\n        (isRetryableWritesEnabled(server.s.topology) || isTransactionCommand(cmd)) &&\r\n        needsRetryableWriteLabel(error, maxWireVersion(server)) &&\r\n        !inActiveTransaction(session, cmd)\r\n      ) {\r\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\r\n      }\r\n\r\n      if (isSDAMUnrecoverableError(error)) {\r\n        if (shouldHandleStateChangeError(server, error)) {\r\n          if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(error)) {\r\n            server.s.pool.clear(connection.serviceId);\r\n          }\r\n\r\n          if (!server.loadBalanced) {\r\n            markServerUnknown(server, error);\r\n            process.nextTick(() => server.requestCheck());\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (\r\n      session &&\r\n      session.isPinned &&\r\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\r\n    ) {\r\n      session.unpin({ force: true });\r\n    }\r\n\r\n    return callback(error);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"script"}