{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EstimatedDocumentCountOperation = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n  constructor(collection) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(collection, options);\n    this.options = options;\n    this.collectionName = collection.collectionName;\n  }\n\n  execute(server, session, callback) {\n    if ((0, utils_1.maxWireVersion)(server) < 12) {\n      return this.executeLegacy(server, session, callback);\n    }\n\n    const pipeline = [{\n      $collStats: {\n        count: {}\n      }\n    }, {\n      $group: {\n        _id: 1,\n        n: {\n          $sum: '$count'\n        }\n      }\n    }];\n    const cmd = {\n      aggregate: this.collectionName,\n      pipeline,\n      cursor: {}\n    };\n\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, response) => {\n      var _a, _b;\n\n      if (err && err.code !== 26) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, ((_b = (_a = response === null || response === void 0 ? void 0 : response.cursor) === null || _a === void 0 ? void 0 : _a.firstBatch[0]) === null || _b === void 0 ? void 0 : _b.n) || 0);\n    });\n  }\n\n  executeLegacy(server, session, callback) {\n    const cmd = {\n      count: this.collectionName\n    };\n\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, response.n || 0);\n    });\n  }\n\n}\n\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":";;;;;;;AAKA;;AACA;;AACA;AAYA;;;AACA,MAAaA,+BAAb,SAAqDC,0BAArD,CAA6E;AAI3EC,cAAYC,UAAZ,EAA+E;AAAA,QAA3CC,OAA2C,uEAAF,EAAE;AAC7E,UAAMD,UAAN,EAAkBC,OAAlB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,cAAL,GAAsBF,UAAU,CAACE,cAAjC;AACD;;AAEQC,SAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGY;AAE1B,QAAI,4BAAeF,MAAf,IAAyB,EAA7B,EAAiC;AAC/B,aAAO,KAAKG,aAAL,CAAmBH,MAAnB,EAA2BC,OAA3B,EAAoCC,QAApC,CAAP;AACD;;AACD,UAAME,QAAQ,GAAG,CAAC;AAAEC,gBAAU,EAAE;AAAEC,aAAK,EAAE;AAAT;AAAd,KAAD,EAAgC;AAAEC,YAAM,EAAE;AAAEC,WAAG,EAAE,CAAP;AAAUC,SAAC,EAAE;AAAEC,cAAI,EAAE;AAAR;AAAb;AAAV,KAAhC,CAAjB;AAEA,UAAMC,GAAG,GAAa;AAAEC,eAAS,EAAE,KAAKd,cAAlB;AAAkCM,cAAlC;AAA4CS,YAAM,EAAE;AAApD,KAAtB;;AAEA,QAAI,OAAO,KAAKhB,OAAL,CAAaiB,SAApB,KAAkC,QAAtC,EAAgD;AAC9CH,SAAG,CAACG,SAAJ,GAAgB,KAAKjB,OAAL,CAAaiB,SAA7B;AACD;;AAED,UAAMC,cAAN,CAAqBf,MAArB,EAA6BC,OAA7B,EAAsCU,GAAtC,EAA2C,CAACK,GAAD,EAAMC,QAAN,KAAkB;;;AAC3D,UAAID,GAAG,IAAKA,GAAwB,CAACE,IAAzB,KAAkC,EAA9C,EAAkD;AAChDhB,gBAAQ,CAACc,GAAD,CAAR;AACA;AACD;;AAEDd,cAAQ,CAACiB,SAAD,EAAY,qBAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEN,MAAV,MAAgB,IAAhB,IAAgBO,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEC,UAAF,CAAa,CAAb,CAAhB,MAA+B,IAA/B,IAA+BC,aAA/B,GAA+B,MAA/B,GAA+BA,GAAEb,CAAjC,KAAsC,CAAlD,CAAR;AACD,KAPD;AAQD;;AAEDN,eAAa,CACXH,MADW,EAEXC,OAFW,EAGXC,QAHW,EAGe;AAE1B,UAAMS,GAAG,GAAa;AAAEL,WAAK,EAAE,KAAKR;AAAd,KAAtB;;AAEA,QAAI,OAAO,KAAKD,OAAL,CAAaiB,SAApB,KAAkC,QAAtC,EAAgD;AAC9CH,SAAG,CAACG,SAAJ,GAAgB,KAAKjB,OAAL,CAAaiB,SAA7B;AACD;;AAED,UAAMC,cAAN,CAAqBf,MAArB,EAA6BC,OAA7B,EAAsCU,GAAtC,EAA2C,CAACK,GAAD,EAAMC,QAAN,KAAkB;AAC3D,UAAID,GAAJ,EAAS;AACPd,gBAAQ,CAACc,GAAD,CAAR;AACA;AACD;;AAEDd,cAAQ,CAACiB,SAAD,EAAYF,QAAQ,CAACR,CAAT,IAAc,CAA1B,CAAR;AACD,KAPD;AAQD;;AAvD0E;;AAA7Ec;AA0DA,+BAAc9B,+BAAd,EAA+C,CAC7C+B,mBAAOC,cADsC,EAE7CD,mBAAOE,SAFsC,EAG7CF,mBAAOG,eAHsC,CAA/C","names":["EstimatedDocumentCountOperation","command_1","constructor","collection","options","collectionName","execute","server","session","callback","executeLegacy","pipeline","$collStats","count","$group","_id","n","$sum","cmd","aggregate","cursor","maxTimeMS","executeCommand","err","response","code","undefined","_a","firstBatch","_b","exports","operation_1","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\estimated_document_count.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface EstimatedDocumentCountOptions extends CommandOperationOptions {\n  /**\n   * The maximum amount of time to allow the operation to run.\n   *\n   * This option is sent only if the caller explicitly provides a value. The default is to not send a value.\n   */\n  maxTimeMS?: number;\n}\n\n/** @internal */\nexport class EstimatedDocumentCountOperation extends CommandOperation<number> {\n  override options: EstimatedDocumentCountOptions;\n  collectionName: string;\n\n  constructor(collection: Collection, options: EstimatedDocumentCountOptions = {}) {\n    super(collection, options);\n    this.options = options;\n    this.collectionName = collection.collectionName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<number>\n  ): void {\n    if (maxWireVersion(server) < 12) {\n      return this.executeLegacy(server, session, callback);\n    }\n    const pipeline = [{ $collStats: { count: {} } }, { $group: { _id: 1, n: { $sum: '$count' } } }];\n\n    const cmd: Document = { aggregate: this.collectionName, pipeline, cursor: {} };\n\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, response) => {\n      if (err && (err as MongoServerError).code !== 26) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, response?.cursor?.firstBatch[0]?.n || 0);\n    });\n  }\n\n  executeLegacy(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<number>\n  ): void {\n    const cmd: Document = { count: this.collectionName };\n\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, response.n || 0);\n    });\n  }\n}\n\ndefineAspects(EstimatedDocumentCountOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script"}