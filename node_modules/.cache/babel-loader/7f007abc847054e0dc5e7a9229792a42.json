{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\"); // The default Buffer size if one is not provided.\n\n\nconst DEFAULT_SMARTBUFFER_SIZE = 4096; // The default string encoding to use for reading/writing strings.\n\nconst DEFAULT_SMARTBUFFER_ENCODING = 'utf8';\n\nclass SmartBuffer {\n  /**\n   * Creates a new SmartBuffer instance.\n   *\n   * @param options { SmartBufferOptions } The SmartBufferOptions to apply to this instance.\n   */\n  constructor(options) {\n    this.length = 0;\n    this._encoding = DEFAULT_SMARTBUFFER_ENCODING;\n    this._writeOffset = 0;\n    this._readOffset = 0;\n\n    if (SmartBuffer.isSmartBufferOptions(options)) {\n      // Checks for encoding\n      if (options.encoding) {\n        utils_1.checkEncoding(options.encoding);\n        this._encoding = options.encoding;\n      } // Checks for initial size length\n\n\n      if (options.size) {\n        if (utils_1.isFiniteInteger(options.size) && options.size > 0) {\n          this._buff = Buffer.allocUnsafe(options.size);\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_SIZE);\n        } // Check for initial Buffer\n\n      } else if (options.buff) {\n        if (Buffer.isBuffer(options.buff)) {\n          this._buff = options.buff;\n          this.length = options.buff.length;\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_BUFFER);\n        }\n      } else {\n        this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n      }\n    } else {\n      // If something was passed but it's not a SmartBufferOptions object\n      if (typeof options !== 'undefined') {\n        throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_OBJECT);\n      } // Otherwise default to sane options\n\n\n      this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n    }\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided internal Buffer size and optional encoding.\n   *\n   * @param size { Number } The size of the internal Buffer.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n\n\n  static fromSize(size, encoding) {\n    return new this({\n      size: size,\n      encoding: encoding\n    });\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided Buffer and optional encoding.\n   *\n   * @param buffer { Buffer } The Buffer to use as the internal Buffer value.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n\n\n  static fromBuffer(buff, encoding) {\n    return new this({\n      buff: buff,\n      encoding: encoding\n    });\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided SmartBufferOptions options.\n   *\n   * @param options { SmartBufferOptions } The options to use when creating the SmartBuffer instance.\n   */\n\n\n  static fromOptions(options) {\n    return new this(options);\n  }\n  /**\n   * Type checking function that determines if an object is a SmartBufferOptions object.\n   */\n\n\n  static isSmartBufferOptions(options) {\n    const castOptions = options;\n    return castOptions && (castOptions.encoding !== undefined || castOptions.size !== undefined || castOptions.buff !== undefined);\n  } // Signed integers\n\n  /**\n   * Reads an Int8 value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt8(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt8, 1, offset);\n  }\n  /**\n   * Reads an Int16BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt16BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt16BE, 2, offset);\n  }\n  /**\n   * Reads an Int16LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt16LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt16LE, 2, offset);\n  }\n  /**\n   * Reads an Int32BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt32BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt32BE, 4, offset);\n  }\n  /**\n   * Reads an Int32LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt32LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt32LE, 4, offset);\n  }\n  /**\n   * Reads a BigInt64BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigInt64BE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigInt64BE');\n    return this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, offset);\n  }\n  /**\n   * Reads a BigInt64LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigInt64LE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigInt64LE');\n    return this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, offset);\n  }\n  /**\n   * Writes an Int8 value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt8(value, offset) {\n    this._writeNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n\n    return this;\n  }\n  /**\n   * Inserts an Int8 value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt8(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n  }\n  /**\n   * Writes an Int16BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt16BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n  }\n  /**\n   * Inserts an Int16BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt16BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n  }\n  /**\n   * Writes an Int16LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt16LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n  }\n  /**\n   * Inserts an Int16LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt16LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n  }\n  /**\n   * Writes an Int32BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt32BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n  }\n  /**\n   * Inserts an Int32BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt32BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n  }\n  /**\n   * Writes an Int32LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt32LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n  }\n  /**\n   * Inserts an Int32LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt32LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n  }\n  /**\n   * Writes a BigInt64BE value to the current write position (or at optional offset).\n   *\n   * @param value { BigInt } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n    return this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigInt64BE value at the given offset value.\n   *\n   * @param value { BigInt } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n    return this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n  }\n  /**\n   * Writes a BigInt64LE value to the current write position (or at optional offset).\n   *\n   * @param value { BigInt } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n    return this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n  }\n  /**\n   * Inserts a Int64LE value at the given offset value.\n   *\n   * @param value { BigInt } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n    return this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n  } // Unsigned Integers\n\n  /**\n   * Reads an UInt8 value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt8(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt8, 1, offset);\n  }\n  /**\n   * Reads an UInt16BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt16BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, offset);\n  }\n  /**\n   * Reads an UInt16LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt16LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, offset);\n  }\n  /**\n   * Reads an UInt32BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt32BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, offset);\n  }\n  /**\n   * Reads an UInt32LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt32LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, offset);\n  }\n  /**\n   * Reads a BigUInt64BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigUInt64BE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigUInt64BE');\n    return this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, offset);\n  }\n  /**\n   * Reads a BigUInt64LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigUInt64LE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigUInt64LE');\n    return this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, offset);\n  }\n  /**\n   * Writes an UInt8 value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt8(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n  }\n  /**\n   * Inserts an UInt8 value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt8(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n  }\n  /**\n   * Writes an UInt16BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt16BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n  }\n  /**\n   * Inserts an UInt16BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt16BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n  }\n  /**\n   * Writes an UInt16LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt16LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n  }\n  /**\n   * Inserts an UInt16LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt16LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n  }\n  /**\n   * Writes an UInt32BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt32BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n  }\n  /**\n   * Inserts an UInt32BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt32BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n  }\n  /**\n   * Writes an UInt32LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt32LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n  }\n  /**\n   * Inserts an UInt32LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt32LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n  }\n  /**\n   * Writes a BigUInt64BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigUInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n    return this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigUInt64BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigUInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n    return this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n  }\n  /**\n   * Writes a BigUInt64LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigUInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n    return this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigUInt64LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigUInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n    return this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n  } // Floating Point\n\n  /**\n   * Reads an FloatBE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readFloatBE(offset) {\n    return this._readNumberValue(Buffer.prototype.readFloatBE, 4, offset);\n  }\n  /**\n   * Reads an FloatLE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readFloatLE(offset) {\n    return this._readNumberValue(Buffer.prototype.readFloatLE, 4, offset);\n  }\n  /**\n   * Writes a FloatBE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeFloatBE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n  }\n  /**\n   * Inserts a FloatBE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertFloatBE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n  }\n  /**\n   * Writes a FloatLE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeFloatLE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n  }\n  /**\n   * Inserts a FloatLE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertFloatLE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n  } // Double Floating Point\n\n  /**\n   * Reads an DoublEBE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readDoubleBE(offset) {\n    return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, offset);\n  }\n  /**\n   * Reads an DoubleLE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readDoubleLE(offset) {\n    return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, offset);\n  }\n  /**\n   * Writes a DoubleBE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeDoubleBE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n  }\n  /**\n   * Inserts a DoubleBE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertDoubleBE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n  }\n  /**\n   * Writes a DoubleLE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeDoubleLE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n  }\n  /**\n   * Inserts a DoubleLE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertDoubleLE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n  } // Strings\n\n  /**\n   * Reads a String from the current read position.\n   *\n   * @param arg1 { Number | String } The number of bytes to read as a String, or the BufferEncoding to use for\n   *             the string (Defaults to instance level encoding).\n   * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n   *\n   * @return { String }\n   */\n\n\n  readString(arg1, encoding) {\n    let lengthVal; // Length provided\n\n    if (typeof arg1 === 'number') {\n      utils_1.checkLengthValue(arg1);\n      lengthVal = Math.min(arg1, this.length - this._readOffset);\n    } else {\n      encoding = arg1;\n      lengthVal = this.length - this._readOffset;\n    } // Check encoding\n\n\n    if (typeof encoding !== 'undefined') {\n      utils_1.checkEncoding(encoding);\n    }\n\n    const value = this._buff.slice(this._readOffset, this._readOffset + lengthVal).toString(encoding || this._encoding);\n\n    this._readOffset += lengthVal;\n    return value;\n  }\n  /**\n   * Inserts a String\n   *\n   * @param value { String } The String value to insert.\n   * @param offset { Number } The offset to insert the string at.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  insertString(value, offset, encoding) {\n    utils_1.checkOffsetValue(offset);\n    return this._handleString(value, true, offset, encoding);\n  }\n  /**\n   * Writes a String\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string at, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  writeString(value, arg2, encoding) {\n    return this._handleString(value, false, arg2, encoding);\n  }\n  /**\n   * Reads a null-terminated String from the current read position.\n   *\n   * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n   *\n   * @return { String }\n   */\n\n\n  readStringNT(encoding) {\n    if (typeof encoding !== 'undefined') {\n      utils_1.checkEncoding(encoding);\n    } // Set null character position to the end SmartBuffer instance.\n\n\n    let nullPos = this.length; // Find next null character (if one is not found, default from above is used)\n\n    for (let i = this._readOffset; i < this.length; i++) {\n      if (this._buff[i] === 0x00) {\n        nullPos = i;\n        break;\n      }\n    } // Read string value\n\n\n    const value = this._buff.slice(this._readOffset, nullPos); // Increment internal Buffer read offset\n\n\n    this._readOffset = nullPos + 1;\n    return value.toString(encoding || this._encoding);\n  }\n  /**\n   * Inserts a null-terminated String.\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  insertStringNT(value, offset, encoding) {\n    utils_1.checkOffsetValue(offset); // Write Values\n\n    this.insertString(value, offset, encoding);\n    this.insertUInt8(0x00, offset + value.length);\n    return this;\n  }\n  /**\n   * Writes a null-terminated String.\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  writeStringNT(value, arg2, encoding) {\n    // Write Values\n    this.writeString(value, arg2, encoding);\n    this.writeUInt8(0x00, typeof arg2 === 'number' ? arg2 + value.length : this.writeOffset);\n    return this;\n  } // Buffers\n\n  /**\n   * Reads a Buffer from the internal read position.\n   *\n   * @param length { Number } The length of data to read as a Buffer.\n   *\n   * @return { Buffer }\n   */\n\n\n  readBuffer(length) {\n    if (typeof length !== 'undefined') {\n      utils_1.checkLengthValue(length);\n    }\n\n    const lengthVal = typeof length === 'number' ? length : this.length;\n    const endPoint = Math.min(this.length, this._readOffset + lengthVal); // Read buffer value\n\n    const value = this._buff.slice(this._readOffset, endPoint); // Increment internal Buffer read offset\n\n\n    this._readOffset = endPoint;\n    return value;\n  }\n  /**\n   * Writes a Buffer to the current write position.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  insertBuffer(value, offset) {\n    utils_1.checkOffsetValue(offset);\n    return this._handleBuffer(value, true, offset);\n  }\n  /**\n   * Writes a Buffer to the current write position.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  writeBuffer(value, offset) {\n    return this._handleBuffer(value, false, offset);\n  }\n  /**\n   * Reads a null-terminated Buffer from the current read poisiton.\n   *\n   * @return { Buffer }\n   */\n\n\n  readBufferNT() {\n    // Set null character position to the end SmartBuffer instance.\n    let nullPos = this.length; // Find next null character (if one is not found, default from above is used)\n\n    for (let i = this._readOffset; i < this.length; i++) {\n      if (this._buff[i] === 0x00) {\n        nullPos = i;\n        break;\n      }\n    } // Read value\n\n\n    const value = this._buff.slice(this._readOffset, nullPos); // Increment internal Buffer read offset\n\n\n    this._readOffset = nullPos + 1;\n    return value;\n  }\n  /**\n   * Inserts a null-terminated Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  insertBufferNT(value, offset) {\n    utils_1.checkOffsetValue(offset); // Write Values\n\n    this.insertBuffer(value, offset);\n    this.insertUInt8(0x00, offset + value.length);\n    return this;\n  }\n  /**\n   * Writes a null-terminated Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  writeBufferNT(value, offset) {\n    // Checks for valid numberic value;\n    if (typeof offset !== 'undefined') {\n      utils_1.checkOffsetValue(offset);\n    } // Write Values\n\n\n    this.writeBuffer(value, offset);\n    this.writeUInt8(0x00, typeof offset === 'number' ? offset + value.length : this._writeOffset);\n    return this;\n  }\n  /**\n   * Clears the SmartBuffer instance to its original empty state.\n   */\n\n\n  clear() {\n    this._writeOffset = 0;\n    this._readOffset = 0;\n    this.length = 0;\n    return this;\n  }\n  /**\n   * Gets the remaining data left to be read from the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n\n\n  remaining() {\n    return this.length - this._readOffset;\n  }\n  /**\n   * Gets the current read offset value of the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n\n\n  get readOffset() {\n    return this._readOffset;\n  }\n  /**\n   * Sets the read offset value of the SmartBuffer instance.\n   *\n   * @param offset { Number } - The offset value to set.\n   */\n\n\n  set readOffset(offset) {\n    utils_1.checkOffsetValue(offset); // Check for bounds.\n\n    utils_1.checkTargetOffset(offset, this);\n    this._readOffset = offset;\n  }\n  /**\n   * Gets the current write offset value of the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n\n\n  get writeOffset() {\n    return this._writeOffset;\n  }\n  /**\n   * Sets the write offset value of the SmartBuffer instance.\n   *\n   * @param offset { Number } - The offset value to set.\n   */\n\n\n  set writeOffset(offset) {\n    utils_1.checkOffsetValue(offset); // Check for bounds.\n\n    utils_1.checkTargetOffset(offset, this);\n    this._writeOffset = offset;\n  }\n  /**\n   * Gets the currently set string encoding of the SmartBuffer instance.\n   *\n   * @return { BufferEncoding } The string Buffer encoding currently set.\n   */\n\n\n  get encoding() {\n    return this._encoding;\n  }\n  /**\n   * Sets the string encoding of the SmartBuffer instance.\n   *\n   * @param encoding { BufferEncoding } The string Buffer encoding to set.\n   */\n\n\n  set encoding(encoding) {\n    utils_1.checkEncoding(encoding);\n    this._encoding = encoding;\n  }\n  /**\n   * Gets the underlying internal Buffer. (This includes unmanaged data in the Buffer)\n   *\n   * @return { Buffer } The Buffer value.\n   */\n\n\n  get internalBuffer() {\n    return this._buff;\n  }\n  /**\n   * Gets the value of the internal managed Buffer (Includes managed data only)\n   *\n   * @param { Buffer }\n   */\n\n\n  toBuffer() {\n    return this._buff.slice(0, this.length);\n  }\n  /**\n   * Gets the String value of the internal managed Buffer\n   *\n   * @param encoding { String } The BufferEncoding to display the Buffer as (defaults to instance level encoding).\n   */\n\n\n  toString(encoding) {\n    const encodingVal = typeof encoding === 'string' ? encoding : this._encoding; // Check for invalid encoding.\n\n    utils_1.checkEncoding(encodingVal);\n    return this._buff.toString(encodingVal, 0, this.length);\n  }\n  /**\n   * Destroys the SmartBuffer instance.\n   */\n\n\n  destroy() {\n    this.clear();\n    return this;\n  }\n  /**\n   * Handles inserting and writing strings.\n   *\n   * @param value { String } The String value to insert.\n   * @param isInsert { Boolean } True if inserting a string, false if writing.\n   * @param arg2 { Number | String } The offset to insert the string at, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   */\n\n\n  _handleString(value, isInsert, arg3, encoding) {\n    let offsetVal = this._writeOffset;\n    let encodingVal = this._encoding; // Check for offset\n\n    if (typeof arg3 === 'number') {\n      offsetVal = arg3; // Check for encoding\n    } else if (typeof arg3 === 'string') {\n      utils_1.checkEncoding(arg3);\n      encodingVal = arg3;\n    } // Check for encoding (third param)\n\n\n    if (typeof encoding === 'string') {\n      utils_1.checkEncoding(encoding);\n      encodingVal = encoding;\n    } // Calculate bytelength of string.\n\n\n    const byteLength = Buffer.byteLength(value, encodingVal); // Ensure there is enough internal Buffer capacity.\n\n    if (isInsert) {\n      this.ensureInsertable(byteLength, offsetVal);\n    } else {\n      this._ensureWriteable(byteLength, offsetVal);\n    } // Write value\n\n\n    this._buff.write(value, offsetVal, byteLength, encodingVal); // Increment internal Buffer write offset;\n\n\n    if (isInsert) {\n      this._writeOffset += byteLength;\n    } else {\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof arg3 === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + byteLength);\n      } else {\n        // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += byteLength;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Handles writing or insert of a Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   */\n\n\n  _handleBuffer(value, isInsert, offset) {\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset; // Ensure there is enough internal Buffer capacity.\n\n    if (isInsert) {\n      this.ensureInsertable(value.length, offsetVal);\n    } else {\n      this._ensureWriteable(value.length, offsetVal);\n    } // Write buffer value\n\n\n    value.copy(this._buff, offsetVal); // Increment internal Buffer write offset;\n\n    if (isInsert) {\n      this._writeOffset += value.length;\n    } else {\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof offset === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + value.length);\n      } else {\n        // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += value.length;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to read data.\n   *\n   * @param length { Number } The length of the data that needs to be read.\n   * @param offset { Number } The offset of the data that needs to be read.\n   */\n\n\n  ensureReadable(length, offset) {\n    // Offset value defaults to managed read offset.\n    let offsetVal = this._readOffset; // If an offset was provided, use it.\n\n    if (typeof offset !== 'undefined') {\n      // Checks for valid numberic value;\n      utils_1.checkOffsetValue(offset); // Overide with custom offset.\n\n      offsetVal = offset;\n    } // Checks if offset is below zero, or the offset+length offset is beyond the total length of the managed data.\n\n\n    if (offsetVal < 0 || offsetVal + length > this.length) {\n      throw new Error(utils_1.ERRORS.INVALID_READ_BEYOND_BOUNDS);\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to insert data.\n   *\n   * @param dataLength { Number } The length of the data that needs to be written.\n   * @param offset { Number } The offset of the data to be written.\n   */\n\n\n  ensureInsertable(dataLength, offset) {\n    // Checks for valid numberic value;\n    utils_1.checkOffsetValue(offset); // Ensure there is enough internal Buffer capacity.\n\n    this._ensureCapacity(this.length + dataLength); // If an offset was provided and its not the very end of the buffer, copy data into appropriate location in regards to the offset.\n\n\n    if (offset < this.length) {\n      this._buff.copy(this._buff, offset + dataLength, offset, this._buff.length);\n    } // Adjust tracked smart buffer length\n\n\n    if (offset + dataLength > this.length) {\n      this.length = offset + dataLength;\n    } else {\n      this.length += dataLength;\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to write data.\n   *\n   * @param dataLength { Number } The length of the data that needs to be written.\n   * @param offset { Number } The offset of the data to be written (defaults to writeOffset).\n   */\n\n\n  _ensureWriteable(dataLength, offset) {\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset; // Ensure enough capacity to write data.\n\n    this._ensureCapacity(offsetVal + dataLength); // Adjust SmartBuffer length (if offset + length is larger than managed length, adjust length)\n\n\n    if (offsetVal + dataLength > this.length) {\n      this.length = offsetVal + dataLength;\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to write at least the given amount of data.\n   *\n   * @param minLength { Number } The minimum length of the data needs to be written.\n   */\n\n\n  _ensureCapacity(minLength) {\n    const oldLength = this._buff.length;\n\n    if (minLength > oldLength) {\n      let data = this._buff;\n      let newLength = oldLength * 3 / 2 + 1;\n\n      if (newLength < minLength) {\n        newLength = minLength;\n      }\n\n      this._buff = Buffer.allocUnsafe(newLength);\n      data.copy(this._buff, 0, 0, oldLength);\n    }\n  }\n  /**\n   * Reads a numeric number value using the provided function.\n   *\n   * @typeparam T { number | bigint } The type of the value to be read\n   *\n   * @param func { Function(offset: number) => number } The function to read data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes read.\n   * @param offset { Number } The offset to read from (optional). When this is not provided, the managed readOffset is used instead.\n   *\n   * @returns { T } the number value\n   */\n\n\n  _readNumberValue(func, byteSize, offset) {\n    this.ensureReadable(byteSize, offset); // Call Buffer.readXXXX();\n\n    const value = func.call(this._buff, typeof offset === 'number' ? offset : this._readOffset); // Adjust internal read offset if an optional read offset was not provided.\n\n    if (typeof offset === 'undefined') {\n      this._readOffset += byteSize;\n    }\n\n    return value;\n  }\n  /**\n   * Inserts a numeric number value based on the given offset and value.\n   *\n   * @typeparam T { number | bigint } The type of the value to be written\n   *\n   * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes written.\n   * @param value { T } The number value to write.\n   * @param offset { Number } the offset to write the number at (REQUIRED).\n   *\n   * @returns SmartBuffer this buffer\n   */\n\n\n  _insertNumberValue(func, byteSize, value, offset) {\n    // Check for invalid offset values.\n    utils_1.checkOffsetValue(offset); // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n\n    this.ensureInsertable(byteSize, offset); // Call buffer.writeXXXX();\n\n    func.call(this._buff, value, offset); // Adjusts internally managed write offset.\n\n    this._writeOffset += byteSize;\n    return this;\n  }\n  /**\n   * Writes a numeric number value based on the given offset and value.\n   *\n   * @typeparam T { number | bigint } The type of the value to be written\n   *\n   * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes written.\n   * @param value { T } The number value to write.\n   * @param offset { Number } the offset to write the number at (REQUIRED).\n   *\n   * @returns SmartBuffer this buffer\n   */\n\n\n  _writeNumberValue(func, byteSize, value, offset) {\n    // If an offset was provided, validate it.\n    if (typeof offset === 'number') {\n      // Check if we're writing beyond the bounds of the managed data.\n      if (offset < 0) {\n        throw new Error(utils_1.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);\n      }\n\n      utils_1.checkOffsetValue(offset);\n    } // Default to writeOffset if no offset value was given.\n\n\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset; // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n\n    this._ensureWriteable(byteSize, offsetVal);\n\n    func.call(this._buff, value, offsetVal); // If an offset was given, check to see if we wrote beyond the current writeOffset.\n\n    if (typeof offset === 'number') {\n      this._writeOffset = Math.max(this._writeOffset, offsetVal + byteSize);\n    } else {\n      // If no numeric offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n      this._writeOffset += byteSize;\n    }\n\n    return this;\n  }\n\n}\n\nexports.SmartBuffer = SmartBuffer;","map":{"version":3,"mappings":"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","names":["DEFAULT_SMARTBUFFER_SIZE","DEFAULT_SMARTBUFFER_ENCODING","SmartBuffer","constructor","options","isSmartBufferOptions","encoding","utils_1","_encoding","size","_buff","Buffer","allocUnsafe","Error","INVALID_SMARTBUFFER_SIZE","buff","isBuffer","length","INVALID_SMARTBUFFER_BUFFER","INVALID_SMARTBUFFER_OBJECT","fromSize","fromBuffer","fromOptions","castOptions","undefined","readInt8","offset","_readNumberValue","prototype","readInt16BE","readInt16LE","readInt32BE","readInt32LE","readBigInt64BE","readBigInt64LE","writeInt8","value","_writeNumberValue","insertInt8","_insertNumberValue","writeInt16BE","insertInt16BE","writeInt16LE","insertInt16LE","writeInt32BE","insertInt32BE","writeInt32LE","insertInt32LE","writeBigInt64BE","insertBigInt64BE","writeBigInt64LE","insertBigInt64LE","readUInt8","readUInt16BE","readUInt16LE","readUInt32BE","readUInt32LE","readBigUInt64BE","readBigUInt64LE","writeUInt8","insertUInt8","writeUInt16BE","insertUInt16BE","writeUInt16LE","insertUInt16LE","writeUInt32BE","insertUInt32BE","writeUInt32LE","insertUInt32LE","writeBigUInt64BE","insertBigUInt64BE","writeBigUInt64LE","insertBigUInt64LE","readFloatBE","readFloatLE","writeFloatBE","insertFloatBE","writeFloatLE","insertFloatLE","readDoubleBE","readDoubleLE","writeDoubleBE","insertDoubleBE","writeDoubleLE","insertDoubleLE","readString","arg1","lengthVal","Math","min","_readOffset","slice","toString","insertString","_handleString","writeString","arg2","readStringNT","nullPos","i","insertStringNT","writeStringNT","writeOffset","readBuffer","endPoint","insertBuffer","_handleBuffer","writeBuffer","readBufferNT","insertBufferNT","writeBufferNT","_writeOffset","clear","remaining","readOffset","internalBuffer","toBuffer","encodingVal","destroy","isInsert","arg3","offsetVal","byteLength","ensureInsertable","_ensureWriteable","write","max","copy","ensureReadable","INVALID_READ_BEYOND_BOUNDS","dataLength","_ensureCapacity","minLength","oldLength","data","newLength","func","byteSize","call","INVALID_WRITE_BEYOND_BOUNDS","exports"],"sources":["../src/smartbuffer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}