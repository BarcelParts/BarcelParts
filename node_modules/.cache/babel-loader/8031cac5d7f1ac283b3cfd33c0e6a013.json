{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\n\nconst bson_1 = require(\"./bson\");\n\nconst ordered_1 = require(\"./bulk/ordered\");\n\nconst unordered_1 = require(\"./bulk/unordered\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst bulk_write_1 = require(\"./operations/bulk_write\");\n\nconst count_1 = require(\"./operations/count\");\n\nconst count_documents_1 = require(\"./operations/count_documents\");\n\nconst delete_1 = require(\"./operations/delete\");\n\nconst distinct_1 = require(\"./operations/distinct\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst insert_1 = require(\"./operations/insert\");\n\nconst is_capped_1 = require(\"./operations/is_capped\");\n\nconst map_reduce_1 = require(\"./operations/map_reduce\");\n\nconst options_operation_1 = require(\"./operations/options_operation\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst update_1 = require(\"./operations/update\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\");\n/**\r\n * The **Collection** class is an internal class that embodies a MongoDB collection\r\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\r\n *\r\n * **COLLECTION Cannot directly be instantiated**\r\n * @public\r\n *\r\n * @example\r\n * ```js\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * const test = require('assert');\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Create a collection we want to drop later\r\n *   const col = client.db(dbName).collection('createIndexExample1');\r\n *   // Show that duplicate records got dropped\r\n *   col.find({}).toArray(function(err, items) {\r\n *     expect(err).to.not.exist;\r\n *     test.equal(4, items.length);\r\n *     client.close();\r\n *   });\r\n * });\r\n * ```\r\n */\n\n\nclass Collection {\n  /**\r\n   * Create a new Collection instance\r\n   * @internal\r\n   */\n  constructor(db, name, options) {\n    var _a, _b;\n\n    (0, utils_1.checkCollectionName)(name); // Internal state\n\n    this.s = {\n      db,\n      options,\n      namespace: new utils_1.MongoDBNamespace(db.databaseName, name),\n      pkFactory: (_b = (_a = db.options) === null || _a === void 0 ? void 0 : _a.pkFactory) !== null && _b !== void 0 ? _b : utils_1.DEFAULT_PK_FACTORY,\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n  }\n  /**\r\n   * The name of the database this collection belongs to\r\n   */\n\n\n  get dbName() {\n    return this.s.namespace.db;\n  }\n  /**\r\n   * The name of this collection\r\n   */\n\n\n  get collectionName() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.s.namespace.collection;\n  }\n  /**\r\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\r\n   */\n\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\r\n   * The current readConcern of the collection. If not explicitly defined for\r\n   * this collection, will be inherited from the parent DB\r\n   */\n\n\n  get readConcern() {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n\n    return this.s.readConcern;\n  }\n  /**\r\n   * The current readPreference of the collection. If not explicitly defined for\r\n   * this collection, will be inherited from the parent DB\r\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\r\n   * The current writeConcern of the collection. If not explicitly defined for\r\n   * this collection, will be inherited from the parent DB\r\n   */\n\n\n  get writeConcern() {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n\n    return this.s.writeConcern;\n  }\n  /** The current index hint for the collection */\n\n\n  get hint() {\n    return this.s.collectionHint;\n  }\n\n  set hint(v) {\n    this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n  }\n\n  insertOne(doc, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    } // CSFLE passes in { w: 'majority' } to ensure the lib works in both 3.x and 4.x\n    // we support that option style here only\n\n\n    if (options && Reflect.get(options, 'w')) {\n      options.writeConcern = write_concern_1.WriteConcern.fromOptions(Reflect.get(options, 'w'));\n    }\n\n    return (0, execute_operation_1.executeOperation)(this, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  insertMany(docs, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ? Object.assign({}, options) : {\n      ordered: true\n    };\n    return (0, execute_operation_1.executeOperation)(this, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  bulkWrite(operations, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {\n      ordered: true\n    };\n\n    if (!Array.isArray(operations)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n\n    return (0, execute_operation_1.executeOperation)(this, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  updateOne(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new update_1.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  replaceOne(filter, replacement, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new update_1.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  updateMany(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new update_1.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  deleteOne(filter, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  deleteMany(filter, options, callback) {\n    if (filter == null) {\n      filter = {};\n      options = {};\n      callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return (0, execute_operation_1.executeOperation)(this, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  rename(newName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    return (0, execute_operation_1.executeOperation)(this, new rename_1.RenameOperation(this, newName, { ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }), callback);\n  }\n\n  drop(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options), callback);\n  }\n\n  findOne(filter, options, callback) {\n    if (callback != null && typeof callback !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Third parameter to `findOne()` must be a callback or undefined');\n    }\n\n    if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    }\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    const finalFilter = filter !== null && filter !== void 0 ? filter : {};\n    const finalOptions = options !== null && options !== void 0 ? options : {};\n    return this.find(finalFilter, finalOptions).limit(-1).batchSize(1).next(callback);\n  }\n\n  find(filter, options) {\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"collection.find()\" accepts at most two arguments');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new find_cursor_1.FindCursor((0, utils_1.getTopology)(this), this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  options(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  isCapped(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndex(indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndexes(indexSpecs, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ? Object.assign({}, options) : {};\n    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  dropIndex(indexName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = (0, utils_1.resolveOptions)(this, options); // Run only against primary\n\n    options.readPreference = read_preference_1.ReadPreference.primary;\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.DropIndexOperation(this, indexName, options), callback);\n  }\n\n  dropIndexes(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.DropIndexesOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\r\n   * Get the list of all indexes information for the collection.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n\n\n  listIndexes(options) {\n    return new indexes_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  indexExists(indexes, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexInformation(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  estimatedDocumentCount(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  countDocuments(filter, options, callback) {\n    if (filter == null) {\n      filter = {}, options = {}, callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (arguments.length === 2) {\n        if (typeof options === 'function') callback = options, options = {};\n      }\n    }\n\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)(this, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  } // Implementation\n\n\n  distinct(key, filter, options, callback) {\n    if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (arguments.length === 3 && typeof options === 'function') {\n        callback = options, options = {};\n      }\n    }\n\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)(this, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexes(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this, new stats_1.CollStatsOperation(this, options), callback);\n  }\n\n  findOneAndDelete(filter, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  findOneAndReplace(filter, replacement, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  findOneAndUpdate(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\r\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\r\n   *\r\n   * @param pipeline - An array of aggregation pipelines to execute\r\n   * @param options - Optional settings for the command\r\n   */\n\n\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"collection.aggregate()\" accepts at most two arguments');\n    }\n\n    if (!Array.isArray(pipeline)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor((0, utils_1.getTopology)(this), this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\r\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\r\n   *\r\n   * @since 3.0.0\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n   * @param options - Optional settings for the command\r\n   */\n\n\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  mapReduce(map, reduce, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.');\n    if ('function' === typeof options) callback = options, options = {}; // Out must always be defined (make sure we don't break weirdly on pre 1.8+ servers)\n    // TODO NODE-3339: Figure out if this is still necessary given we no longer officially support pre-1.8\n\n    if ((options === null || options === void 0 ? void 0 : options.out) == null) {\n      throw new error_1.MongoInvalidArgumentError('Option \"out\" must be defined, see mongodb docs for possible values');\n    }\n\n    if ('function' === typeof map) {\n      map = map.toString();\n    }\n\n    if ('function' === typeof reduce) {\n      reduce = reduce.toString();\n    }\n\n    if ('function' === typeof options.finalize) {\n      options.finalize = options.finalize.toString();\n    }\n\n    return (0, execute_operation_1.executeOperation)(this, new map_reduce_1.MapReduceOperation(this, map, reduce, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /** Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order. */\n\n\n  initializeUnorderedBulkOp(options) {\n    return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types. */\n\n\n  initializeOrderedBulkOp(options) {\n    return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Get the db scoped logger */\n\n\n  getLogger() {\n    return this.s.db.s.logger;\n  }\n\n  get logger() {\n    return this.s.db.s.logger;\n  }\n  /**\r\n   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\r\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\r\n   * can be overridden by setting the **forceServerObjectId** flag.\r\n   *\r\n   * @deprecated Use insertOne, insertMany or bulkWrite instead.\r\n   * @param docs - The documents to insert\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\n\n\n  insert(docs, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {\n      ordered: false\n    };\n    docs = !Array.isArray(docs) ? [docs] : docs;\n\n    if (options.keepGoing === true) {\n      options.ordered = false;\n    }\n\n    return this.insertMany(docs, options, callback);\n  }\n  /**\r\n   * Updates documents.\r\n   *\r\n   * @deprecated use updateOne, updateMany or bulkWrite\r\n   * @param selector - The selector for the update operation.\r\n   * @param update - The update operations to be applied to the documents\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\n\n\n  update(selector, update, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.updateMany(selector, update, options, callback);\n  }\n  /**\r\n   * Remove documents.\r\n   *\r\n   * @deprecated use deleteOne, deleteMany or bulkWrite\r\n   * @param selector - The selector for the update operation.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\n\n\n  remove(selector, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.deleteMany(selector, options, callback);\n  }\n\n  count(filter, options, callback) {\n    if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)(this, new count_1.CountOperation(utils_1.MongoDBNamespace.fromString(this.namespace), filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n}\n\nexports.Collection = Collection;","map":{"version":3,"mappings":"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","names":["Collection","constructor","db","name","options","s","namespace","utils_1","databaseName","pkFactory","_a","_b","readPreference","read_preference_1","fromOptions","bsonOptions","readConcern","read_concern_1","writeConcern","write_concern_1","dbName","collectionName","collection","toString","hint","collectionHint","v","insertOne","doc","callback","Reflect","get","insert_1","insertMany","docs","Object","assign","ordered","bulkWrite","operations","Array","isArray","error_1","bulk_write_1","updateOne","filter","update","update_1","replaceOne","replacement","updateMany","deleteOne","delete_1","deleteMany","undefined","rename","newName","rename_1","PRIMARY","drop","drop_1","findOne","finalFilter","finalOptions","find","limit","batchSize","next","arguments","length","find_cursor_1","options_operation_1","isCapped","is_capped_1","createIndex","indexSpec","indexes_1","createIndexes","indexSpecs","maxTimeMS","dropIndex","indexName","primary","dropIndexes","listIndexes","indexExists","indexes","indexInformation","estimatedDocumentCount","estimated_document_count_1","countDocuments","count_documents_1","distinct","key","distinct_1","stats","stats_1","findOneAndDelete","find_and_modify_1","findOneAndReplace","findOneAndUpdate","aggregate","pipeline","aggregation_cursor_1","watch","change_stream_1","mapReduce","map","reduce","out","finalize","map_reduce_1","initializeUnorderedBulkOp","unordered_1","initializeOrderedBulkOp","ordered_1","getLogger","logger","insert","keepGoing","selector","remove","count","count_1","fromString","exports"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\collection.ts"],"sourcesContent":["import { BSONSerializeOptions, Document, resolveBSONOptions } from './bson';\r\nimport type { AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult } from './bulk/common';\r\nimport { OrderedBulkOperation } from './bulk/ordered';\r\nimport { UnorderedBulkOperation } from './bulk/unordered';\r\nimport { ChangeStream, ChangeStreamOptions } from './change_stream';\r\nimport { AggregationCursor } from './cursor/aggregation_cursor';\r\nimport { FindCursor } from './cursor/find_cursor';\r\nimport type { Db } from './db';\r\nimport { MongoInvalidArgumentError } from './error';\r\nimport type { Logger, LoggerOptions } from './logger';\r\nimport type { PkFactory } from './mongo_client';\r\nimport type {\r\n  Filter,\r\n  Flatten,\r\n  OptionalUnlessRequiredId,\r\n  TODO_NODE_3286,\r\n  UpdateFilter,\r\n  WithId,\r\n  WithoutId\r\n} from './mongo_types';\r\nimport type { AggregateOptions } from './operations/aggregate';\r\nimport { BulkWriteOperation } from './operations/bulk_write';\r\nimport type { IndexInformationOptions } from './operations/common_functions';\r\nimport { CountOperation, CountOptions } from './operations/count';\r\nimport { CountDocumentsOperation, CountDocumentsOptions } from './operations/count_documents';\r\nimport {\r\n  DeleteManyOperation,\r\n  DeleteOneOperation,\r\n  DeleteOptions,\r\n  DeleteResult\r\n} from './operations/delete';\r\nimport { DistinctOperation, DistinctOptions } from './operations/distinct';\r\nimport { DropCollectionOperation, DropCollectionOptions } from './operations/drop';\r\nimport {\r\n  EstimatedDocumentCountOperation,\r\n  EstimatedDocumentCountOptions\r\n} from './operations/estimated_document_count';\r\nimport { executeOperation } from './operations/execute_operation';\r\nimport type { FindOptions } from './operations/find';\r\nimport {\r\n  FindOneAndDeleteOperation,\r\n  FindOneAndDeleteOptions,\r\n  FindOneAndReplaceOperation,\r\n  FindOneAndReplaceOptions,\r\n  FindOneAndUpdateOperation,\r\n  FindOneAndUpdateOptions\r\n} from './operations/find_and_modify';\r\nimport {\r\n  CreateIndexesOperation,\r\n  CreateIndexesOptions,\r\n  CreateIndexOperation,\r\n  DropIndexesOperation,\r\n  DropIndexesOptions,\r\n  DropIndexOperation,\r\n  IndexDescription,\r\n  IndexesOperation,\r\n  IndexExistsOperation,\r\n  IndexInformationOperation,\r\n  IndexSpecification,\r\n  ListIndexesCursor,\r\n  ListIndexesOptions\r\n} from './operations/indexes';\r\nimport {\r\n  InsertManyOperation,\r\n  InsertManyResult,\r\n  InsertOneOperation,\r\n  InsertOneOptions,\r\n  InsertOneResult\r\n} from './operations/insert';\r\nimport { IsCappedOperation } from './operations/is_capped';\r\nimport {\r\n  MapFunction,\r\n  MapReduceOperation,\r\n  MapReduceOptions,\r\n  ReduceFunction\r\n} from './operations/map_reduce';\r\nimport type { Hint, OperationOptions } from './operations/operation';\r\nimport { OptionsOperation } from './operations/options_operation';\r\nimport { RenameOperation, RenameOptions } from './operations/rename';\r\nimport { CollStats, CollStatsOperation, CollStatsOptions } from './operations/stats';\r\nimport {\r\n  ReplaceOneOperation,\r\n  ReplaceOptions,\r\n  UpdateManyOperation,\r\n  UpdateOneOperation,\r\n  UpdateOptions,\r\n  UpdateResult\r\n} from './operations/update';\r\nimport { ReadConcern, ReadConcernLike } from './read_concern';\r\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\r\nimport {\r\n  Callback,\r\n  checkCollectionName,\r\n  DEFAULT_PK_FACTORY,\r\n  emitWarningOnce,\r\n  getTopology,\r\n  MongoDBNamespace,\r\n  normalizeHintField,\r\n  resolveOptions\r\n} from './utils';\r\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\r\n\r\n/** @public */\r\nexport interface ModifyResult<TSchema = Document> {\r\n  value: WithId<TSchema> | null;\r\n  lastErrorObject?: Document;\r\n  ok: 0 | 1;\r\n}\r\n\r\n/** @public */\r\nexport interface CollectionOptions\r\n  extends BSONSerializeOptions,\r\n    WriteConcernOptions,\r\n    LoggerOptions {\r\n  /**\r\n   * @deprecated Use readPreference instead\r\n   */\r\n  slaveOk?: boolean;\r\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\r\n  readConcern?: ReadConcernLike;\r\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\r\n  readPreference?: ReadPreferenceLike;\r\n}\r\n\r\n/** @internal */\r\nexport interface CollectionPrivate {\r\n  pkFactory: PkFactory;\r\n  db: Db;\r\n  options: any;\r\n  namespace: MongoDBNamespace;\r\n  readPreference?: ReadPreference;\r\n  bsonOptions: BSONSerializeOptions;\r\n  collectionHint?: Hint;\r\n  readConcern?: ReadConcern;\r\n  writeConcern?: WriteConcern;\r\n}\r\n\r\n/**\r\n * The **Collection** class is an internal class that embodies a MongoDB collection\r\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\r\n *\r\n * **COLLECTION Cannot directly be instantiated**\r\n * @public\r\n *\r\n * @example\r\n * ```js\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * const test = require('assert');\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Create a collection we want to drop later\r\n *   const col = client.db(dbName).collection('createIndexExample1');\r\n *   // Show that duplicate records got dropped\r\n *   col.find({}).toArray(function(err, items) {\r\n *     expect(err).to.not.exist;\r\n *     test.equal(4, items.length);\r\n *     client.close();\r\n *   });\r\n * });\r\n * ```\r\n */\r\nexport class Collection<TSchema extends Document = Document> {\r\n  /** @internal */\r\n  s: CollectionPrivate;\r\n\r\n  /**\r\n   * Create a new Collection instance\r\n   * @internal\r\n   */\r\n  constructor(db: Db, name: string, options?: CollectionOptions) {\r\n    checkCollectionName(name);\r\n\r\n    // Internal state\r\n    this.s = {\r\n      db,\r\n      options,\r\n      namespace: new MongoDBNamespace(db.databaseName, name),\r\n      pkFactory: db.options?.pkFactory ?? DEFAULT_PK_FACTORY,\r\n      readPreference: ReadPreference.fromOptions(options),\r\n      bsonOptions: resolveBSONOptions(options, db),\r\n      readConcern: ReadConcern.fromOptions(options),\r\n      writeConcern: WriteConcern.fromOptions(options)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The name of the database this collection belongs to\r\n   */\r\n  get dbName(): string {\r\n    return this.s.namespace.db;\r\n  }\r\n\r\n  /**\r\n   * The name of this collection\r\n   */\r\n  get collectionName(): string {\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    return this.s.namespace.collection!;\r\n  }\r\n\r\n  /**\r\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\r\n   */\r\n  get namespace(): string {\r\n    return this.s.namespace.toString();\r\n  }\r\n\r\n  /**\r\n   * The current readConcern of the collection. If not explicitly defined for\r\n   * this collection, will be inherited from the parent DB\r\n   */\r\n  get readConcern(): ReadConcern | undefined {\r\n    if (this.s.readConcern == null) {\r\n      return this.s.db.readConcern;\r\n    }\r\n    return this.s.readConcern;\r\n  }\r\n\r\n  /**\r\n   * The current readPreference of the collection. If not explicitly defined for\r\n   * this collection, will be inherited from the parent DB\r\n   */\r\n  get readPreference(): ReadPreference | undefined {\r\n    if (this.s.readPreference == null) {\r\n      return this.s.db.readPreference;\r\n    }\r\n\r\n    return this.s.readPreference;\r\n  }\r\n\r\n  get bsonOptions(): BSONSerializeOptions {\r\n    return this.s.bsonOptions;\r\n  }\r\n\r\n  /**\r\n   * The current writeConcern of the collection. If not explicitly defined for\r\n   * this collection, will be inherited from the parent DB\r\n   */\r\n  get writeConcern(): WriteConcern | undefined {\r\n    if (this.s.writeConcern == null) {\r\n      return this.s.db.writeConcern;\r\n    }\r\n    return this.s.writeConcern;\r\n  }\r\n\r\n  /** The current index hint for the collection */\r\n  get hint(): Hint | undefined {\r\n    return this.s.collectionHint;\r\n  }\r\n\r\n  set hint(v: Hint | undefined) {\r\n    this.s.collectionHint = normalizeHintField(v);\r\n  }\r\n\r\n  /**\r\n   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\r\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\r\n   * can be overridden by setting the **forceServerObjectId** flag.\r\n   *\r\n   * @param doc - The document to insert\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  insertOne(doc: OptionalUnlessRequiredId<TSchema>): Promise<InsertOneResult<TSchema>>;\r\n  insertOne(\r\n    doc: OptionalUnlessRequiredId<TSchema>,\r\n    callback: Callback<InsertOneResult<TSchema>>\r\n  ): void;\r\n  insertOne(\r\n    doc: OptionalUnlessRequiredId<TSchema>,\r\n    options: InsertOneOptions\r\n  ): Promise<InsertOneResult<TSchema>>;\r\n  insertOne(\r\n    doc: OptionalUnlessRequiredId<TSchema>,\r\n    options: InsertOneOptions,\r\n    callback: Callback<InsertOneResult<TSchema>>\r\n  ): void;\r\n  insertOne(\r\n    doc: OptionalUnlessRequiredId<TSchema>,\r\n    options?: InsertOneOptions | Callback<InsertOneResult<TSchema>>,\r\n    callback?: Callback<InsertOneResult<TSchema>>\r\n  ): Promise<InsertOneResult<TSchema>> | void {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    // CSFLE passes in { w: 'majority' } to ensure the lib works in both 3.x and 4.x\r\n    // we support that option style here only\r\n    if (options && Reflect.get(options, 'w')) {\r\n      options.writeConcern = WriteConcern.fromOptions(Reflect.get(options, 'w'));\r\n    }\r\n\r\n    return executeOperation(\r\n      this,\r\n      new InsertOneOperation(\r\n        this as TODO_NODE_3286,\r\n        doc,\r\n        resolveOptions(this, options)\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\r\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\r\n   * can be overridden by setting the **forceServerObjectId** flag.\r\n   *\r\n   * @param docs - The documents to insert\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  insertMany(docs: OptionalUnlessRequiredId<TSchema>[]): Promise<InsertManyResult<TSchema>>;\r\n  insertMany(\r\n    docs: OptionalUnlessRequiredId<TSchema>[],\r\n    callback: Callback<InsertManyResult<TSchema>>\r\n  ): void;\r\n  insertMany(\r\n    docs: OptionalUnlessRequiredId<TSchema>[],\r\n    options: BulkWriteOptions\r\n  ): Promise<InsertManyResult<TSchema>>;\r\n  insertMany(\r\n    docs: OptionalUnlessRequiredId<TSchema>[],\r\n    options: BulkWriteOptions,\r\n    callback: Callback<InsertManyResult<TSchema>>\r\n  ): void;\r\n  insertMany(\r\n    docs: OptionalUnlessRequiredId<TSchema>[],\r\n    options?: BulkWriteOptions | Callback<InsertManyResult<TSchema>>,\r\n    callback?: Callback<InsertManyResult<TSchema>>\r\n  ): Promise<InsertManyResult<TSchema>> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ? Object.assign({}, options) : { ordered: true };\r\n\r\n    return executeOperation(\r\n      this,\r\n      new InsertManyOperation(\r\n        this as TODO_NODE_3286,\r\n        docs,\r\n        resolveOptions(this, options)\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Perform a bulkWrite operation without a fluent API\r\n   *\r\n   * Legal operation types are\r\n   *\r\n   * ```js\r\n   *  { insertOne: { document: { a: 1 } } }\r\n   *\r\n   *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\r\n   *\r\n   *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\r\n   *\r\n   *  { updateMany: { filter: {}, update: {$set: {\"a.$[i].x\": 5}}, arrayFilters: [{ \"i.x\": 5 }]} }\r\n   *\r\n   *  { deleteOne: { filter: {c:1} } }\r\n   *\r\n   *  { deleteMany: { filter: {c:1} } }\r\n   *\r\n   *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true} }\r\n   *```\r\n   * Please note that raw operations are no longer accepted as of driver version 4.0.\r\n   *\r\n   * If documents passed in do not contain the **_id** field,\r\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\r\n   * can be overridden by setting the **forceServerObjectId** flag.\r\n   *\r\n   * @param operations - Bulk operations to perform\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   * @throws MongoDriverError if operations is not an array\r\n   */\r\n  bulkWrite(operations: AnyBulkWriteOperation<TSchema>[]): Promise<BulkWriteResult>;\r\n  bulkWrite(\r\n    operations: AnyBulkWriteOperation<TSchema>[],\r\n    callback: Callback<BulkWriteResult>\r\n  ): void;\r\n  bulkWrite(\r\n    operations: AnyBulkWriteOperation<TSchema>[],\r\n    options: BulkWriteOptions\r\n  ): Promise<BulkWriteResult>;\r\n  bulkWrite(\r\n    operations: AnyBulkWriteOperation<TSchema>[],\r\n    options: BulkWriteOptions,\r\n    callback: Callback<BulkWriteResult>\r\n  ): void;\r\n  bulkWrite(\r\n    operations: AnyBulkWriteOperation<TSchema>[],\r\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\r\n    callback?: Callback<BulkWriteResult>\r\n  ): Promise<BulkWriteResult> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options || { ordered: true };\r\n\r\n    if (!Array.isArray(operations)) {\r\n      throw new MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\r\n    }\r\n\r\n    return executeOperation(\r\n      this,\r\n      new BulkWriteOperation(\r\n        this as TODO_NODE_3286,\r\n        operations as TODO_NODE_3286,\r\n        resolveOptions(this, options)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update a single document in a collection\r\n   *\r\n   * @param filter - The filter used to select the document to update\r\n   * @param update - The update operations to be applied to the document\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  updateOne(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema> | Partial<TSchema>\r\n  ): Promise<UpdateResult>;\r\n  updateOne(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\r\n    callback: Callback<UpdateResult>\r\n  ): void;\r\n  updateOne(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\r\n    options: UpdateOptions\r\n  ): Promise<UpdateResult>;\r\n  updateOne(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\r\n    options: UpdateOptions,\r\n    callback: Callback<UpdateResult>\r\n  ): void;\r\n  updateOne(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\r\n    options?: UpdateOptions | Callback<UpdateResult>,\r\n    callback?: Callback<UpdateResult>\r\n  ): Promise<UpdateResult> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new UpdateOneOperation(\r\n        this as TODO_NODE_3286,\r\n        filter,\r\n        update,\r\n        resolveOptions(this, options)\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Replace a document in a collection with another document\r\n   *\r\n   * @param filter - The filter used to select the document to replace\r\n   * @param replacement - The Document that replaces the matching document\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  replaceOne(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>\r\n  ): Promise<UpdateResult | Document>;\r\n  replaceOne(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void;\r\n  replaceOne(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    options: ReplaceOptions\r\n  ): Promise<UpdateResult | Document>;\r\n  replaceOne(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    options: ReplaceOptions,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void;\r\n  replaceOne(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    options?: ReplaceOptions | Callback<UpdateResult | Document>,\r\n    callback?: Callback<UpdateResult | Document>\r\n  ): Promise<UpdateResult | Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new ReplaceOneOperation(\r\n        this as TODO_NODE_3286,\r\n        filter,\r\n        replacement,\r\n        resolveOptions(this, options)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update multiple documents in a collection\r\n   *\r\n   * @param filter - The filter used to select the documents to update\r\n   * @param update - The update operations to be applied to the documents\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  updateMany(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>\r\n  ): Promise<UpdateResult | Document>;\r\n  updateMany(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void;\r\n  updateMany(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options: UpdateOptions\r\n  ): Promise<UpdateResult | Document>;\r\n  updateMany(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options: UpdateOptions,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void;\r\n  updateMany(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options?: UpdateOptions | Callback<UpdateResult | Document>,\r\n    callback?: Callback<UpdateResult | Document>\r\n  ): Promise<UpdateResult | Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new UpdateManyOperation(\r\n        this as TODO_NODE_3286,\r\n        filter,\r\n        update,\r\n        resolveOptions(this, options)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete a document from a collection\r\n   *\r\n   * @param filter - The filter used to select the document to remove\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  deleteOne(filter: Filter<TSchema>): Promise<DeleteResult>;\r\n  deleteOne(filter: Filter<TSchema>, callback: Callback<DeleteResult>): void;\r\n  deleteOne(filter: Filter<TSchema>, options: DeleteOptions): Promise<DeleteResult>;\r\n  deleteOne(\r\n    filter: Filter<TSchema>,\r\n    options: DeleteOptions,\r\n    callback?: Callback<DeleteResult>\r\n  ): void;\r\n  deleteOne(\r\n    filter: Filter<TSchema>,\r\n    options?: DeleteOptions | Callback<DeleteResult>,\r\n    callback?: Callback<DeleteResult>\r\n  ): Promise<DeleteResult> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new DeleteOneOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete multiple documents from a collection\r\n   *\r\n   * @param filter - The filter used to select the documents to remove\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  deleteMany(filter: Filter<TSchema>): Promise<DeleteResult>;\r\n  deleteMany(filter: Filter<TSchema>, callback: Callback<DeleteResult>): void;\r\n  deleteMany(filter: Filter<TSchema>, options: DeleteOptions): Promise<DeleteResult>;\r\n  deleteMany(\r\n    filter: Filter<TSchema>,\r\n    options: DeleteOptions,\r\n    callback: Callback<DeleteResult>\r\n  ): void;\r\n  deleteMany(\r\n    filter: Filter<TSchema>,\r\n    options?: DeleteOptions | Callback<DeleteResult>,\r\n    callback?: Callback<DeleteResult>\r\n  ): Promise<DeleteResult> | void {\r\n    if (filter == null) {\r\n      filter = {};\r\n      options = {};\r\n      callback = undefined;\r\n    } else if (typeof filter === 'function') {\r\n      callback = filter as Callback<DeleteResult>;\r\n      filter = {};\r\n      options = {};\r\n    } else if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    return executeOperation(\r\n      this,\r\n      new DeleteManyOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rename the collection.\r\n   *\r\n   * @remarks\r\n   * This operation does not inherit options from the Db or MongoClient.\r\n   *\r\n   * @param newName - New name of of the collection.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  rename(newName: string): Promise<Collection>;\r\n  rename(newName: string, callback: Callback<Collection>): void;\r\n  rename(newName: string, options: RenameOptions): Promise<Collection>;\r\n  rename(newName: string, options: RenameOptions, callback: Callback<Collection>): void;\r\n  rename(\r\n    newName: string,\r\n    options?: RenameOptions | Callback<Collection>,\r\n    callback?: Callback<Collection>\r\n  ): Promise<Collection> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    // Intentionally, we do not inherit options from parent for this operation.\r\n    return executeOperation(\r\n      this,\r\n      new RenameOperation(this as TODO_NODE_3286, newName, {\r\n        ...options,\r\n        readPreference: ReadPreference.PRIMARY\r\n      }),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  drop(): Promise<boolean>;\r\n  drop(callback: Callback<boolean>): void;\r\n  drop(options: DropCollectionOptions): Promise<boolean>;\r\n  drop(options: DropCollectionOptions, callback: Callback<boolean>): void;\r\n  drop(\r\n    options?: DropCollectionOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    return executeOperation(\r\n      this,\r\n      new DropCollectionOperation(this.s.db, this.collectionName, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches the first document that matches the filter\r\n   *\r\n   * @param filter - Query for find Operation\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  findOne(): Promise<WithId<TSchema> | null>;\r\n  findOne(callback: Callback<WithId<TSchema> | null>): void;\r\n  findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\r\n  findOne(filter: Filter<TSchema>, callback: Callback<WithId<TSchema> | null>): void;\r\n  findOne(filter: Filter<TSchema>, options: FindOptions): Promise<WithId<TSchema> | null>;\r\n  findOne(\r\n    filter: Filter<TSchema>,\r\n    options: FindOptions,\r\n    callback: Callback<WithId<TSchema> | null>\r\n  ): void;\r\n\r\n  // allow an override of the schema.\r\n  findOne<T = TSchema>(): Promise<T | null>;\r\n  findOne<T = TSchema>(callback: Callback<T | null>): void;\r\n  findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>;\r\n  findOne<T = TSchema>(filter: Filter<TSchema>, options?: FindOptions): Promise<T | null>;\r\n  findOne<T = TSchema>(\r\n    filter: Filter<TSchema>,\r\n    options?: FindOptions,\r\n    callback?: Callback<T | null>\r\n  ): void;\r\n\r\n  findOne(\r\n    filter?: Filter<TSchema> | Callback<WithId<TSchema> | null>,\r\n    options?: FindOptions | Callback<WithId<TSchema> | null>,\r\n    callback?: Callback<WithId<TSchema> | null>\r\n  ): Promise<WithId<TSchema> | null> | void {\r\n    if (callback != null && typeof callback !== 'function') {\r\n      throw new MongoInvalidArgumentError(\r\n        'Third parameter to `findOne()` must be a callback or undefined'\r\n      );\r\n    }\r\n\r\n    if (typeof filter === 'function') {\r\n      callback = filter as Callback<WithId<TSchema> | null>;\r\n      filter = {};\r\n      options = {};\r\n    }\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    const finalFilter = filter ?? {};\r\n    const finalOptions = options ?? {};\r\n    return this.find(finalFilter, finalOptions).limit(-1).batchSize(1).next(callback);\r\n  }\r\n\r\n  /**\r\n   * Creates a cursor for a filter that can be used to iterate over results from MongoDB\r\n   *\r\n   * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate\r\n   */\r\n  find(): FindCursor<WithId<TSchema>>;\r\n  find(filter: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>>;\r\n  find<T extends Document>(filter: Filter<TSchema>, options?: FindOptions): FindCursor<T>;\r\n  find(filter?: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>> {\r\n    if (arguments.length > 2) {\r\n      throw new MongoInvalidArgumentError(\r\n        'Method \"collection.find()\" accepts at most two arguments'\r\n      );\r\n    }\r\n    if (typeof options === 'function') {\r\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\r\n    }\r\n\r\n    return new FindCursor<WithId<TSchema>>(\r\n      getTopology(this),\r\n      this.s.namespace,\r\n      filter,\r\n      resolveOptions(this as TODO_NODE_3286, options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the options of the collection.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  options(): Promise<Document>;\r\n  options(callback: Callback<Document>): void;\r\n  options(options: OperationOptions): Promise<Document>;\r\n  options(options: OperationOptions, callback: Callback<Document>): void;\r\n  options(\r\n    options?: OperationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new OptionsOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns if the collection is a capped collection\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  isCapped(): Promise<boolean>;\r\n  isCapped(callback: Callback<boolean>): void;\r\n  isCapped(options: OperationOptions): Promise<boolean>;\r\n  isCapped(options: OperationOptions, callback: Callback<boolean>): void;\r\n  isCapped(\r\n    options?: OperationOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new IsCappedOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates an index on the db and collection collection.\r\n   *\r\n   * @param indexSpec - The field name or index specification to create an index for\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const collection = client.db('foo').collection('bar');\r\n   *\r\n   * await collection.createIndex({ a: 1, b: -1 });\r\n   *\r\n   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\r\n   * await collection.createIndex([ [c, 1], [d, -1] ]);\r\n   *\r\n   * // Equivalent to { e: 1 }\r\n   * await collection.createIndex('e');\r\n   *\r\n   * // Equivalent to { f: 1, g: 1 }\r\n   * await collection.createIndex(['f', 'g'])\r\n   *\r\n   * // Equivalent to { h: 1, i: -1 }\r\n   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\r\n   *\r\n   * // Equivalent to { j: 1, k: -1, l: 2d }\r\n   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\r\n   * ```\r\n   */\r\n  createIndex(indexSpec: IndexSpecification): Promise<string>;\r\n  createIndex(indexSpec: IndexSpecification, callback: Callback<string>): void;\r\n  createIndex(indexSpec: IndexSpecification, options: CreateIndexesOptions): Promise<string>;\r\n  createIndex(\r\n    indexSpec: IndexSpecification,\r\n    options: CreateIndexesOptions,\r\n    callback: Callback<string>\r\n  ): void;\r\n  createIndex(\r\n    indexSpec: IndexSpecification,\r\n    options?: CreateIndexesOptions | Callback<string>,\r\n    callback?: Callback<string>\r\n  ): Promise<string> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new CreateIndexOperation(\r\n        this as TODO_NODE_3286,\r\n        this.collectionName,\r\n        indexSpec,\r\n        resolveOptions(this, options)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates multiple indexes in the collection, this method is only supported for\r\n   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\r\n   * error.\r\n   *\r\n   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\r\n   * Index specifications are defined {@link http://docs.mongodb.org/manual/reference/command/createIndexes/| here}.\r\n   *\r\n   * @param indexSpecs - An array of index specifications to be created\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const collection = client.db('foo').collection('bar');\r\n   * await collection.createIndexes([\r\n   *   // Simple index on field fizz\r\n   *   {\r\n   *     key: { fizz: 1 },\r\n   *   }\r\n   *   // wildcard index\r\n   *   {\r\n   *     key: { '$**': 1 }\r\n   *   },\r\n   *   // named index on darmok and jalad\r\n   *   {\r\n   *     key: { darmok: 1, jalad: -1 }\r\n   *     name: 'tanagra'\r\n   *   }\r\n   * ]);\r\n   * ```\r\n   */\r\n  createIndexes(indexSpecs: IndexDescription[]): Promise<string[]>;\r\n  createIndexes(indexSpecs: IndexDescription[], callback: Callback<string[]>): void;\r\n  createIndexes(indexSpecs: IndexDescription[], options: CreateIndexesOptions): Promise<string[]>;\r\n  createIndexes(\r\n    indexSpecs: IndexDescription[],\r\n    options: CreateIndexesOptions,\r\n    callback: Callback<string[]>\r\n  ): void;\r\n  createIndexes(\r\n    indexSpecs: IndexDescription[],\r\n    options?: CreateIndexesOptions | Callback<string[]>,\r\n    callback?: Callback<string[]>\r\n  ): Promise<string[]> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ? Object.assign({}, options) : {};\r\n    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\r\n\r\n    return executeOperation(\r\n      this,\r\n      new CreateIndexesOperation(\r\n        this as TODO_NODE_3286,\r\n        this.collectionName,\r\n        indexSpecs,\r\n        resolveOptions(this, options)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drops an index from this collection.\r\n   *\r\n   * @param indexName - Name of the index to drop.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  dropIndex(indexName: string): Promise<Document>;\r\n  dropIndex(indexName: string, callback: Callback<Document>): void;\r\n  dropIndex(indexName: string, options: DropIndexesOptions): Promise<Document>;\r\n  dropIndex(indexName: string, options: DropIndexesOptions, callback: Callback<Document>): void;\r\n  dropIndex(\r\n    indexName: string,\r\n    options?: DropIndexesOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = resolveOptions(this, options);\r\n\r\n    // Run only against primary\r\n    options.readPreference = ReadPreference.primary;\r\n\r\n    return executeOperation(\r\n      this,\r\n      new DropIndexOperation(this as TODO_NODE_3286, indexName, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drops all indexes from this collection.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  dropIndexes(): Promise<Document>;\r\n  dropIndexes(callback: Callback<Document>): void;\r\n  dropIndexes(options: DropIndexesOptions): Promise<Document>;\r\n  dropIndexes(options: DropIndexesOptions, callback: Callback<Document>): void;\r\n  dropIndexes(\r\n    options?: DropIndexesOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new DropIndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the list of all indexes information for the collection.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  listIndexes(options?: ListIndexesOptions): ListIndexesCursor {\r\n    return new ListIndexesCursor(this as TODO_NODE_3286, resolveOptions(this, options));\r\n  }\r\n\r\n  /**\r\n   * Checks if one or more indexes exist on the collection, fails on first non-existing index\r\n   *\r\n   * @param indexes - One or more index names to check.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  indexExists(indexes: string | string[]): Promise<boolean>;\r\n  indexExists(indexes: string | string[], callback: Callback<boolean>): void;\r\n  indexExists(indexes: string | string[], options: IndexInformationOptions): Promise<boolean>;\r\n  indexExists(\r\n    indexes: string | string[],\r\n    options: IndexInformationOptions,\r\n    callback: Callback<boolean>\r\n  ): void;\r\n  indexExists(\r\n    indexes: string | string[],\r\n    options?: IndexInformationOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new IndexExistsOperation(this as TODO_NODE_3286, indexes, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves this collections index info.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  indexInformation(): Promise<Document>;\r\n  indexInformation(callback: Callback<Document>): void;\r\n  indexInformation(options: IndexInformationOptions): Promise<Document>;\r\n  indexInformation(options: IndexInformationOptions, callback: Callback<Document>): void;\r\n  indexInformation(\r\n    options?: IndexInformationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new IndexInformationOperation(this.s.db, this.collectionName, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets an estimate of the count of documents in a collection using collection metadata.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  estimatedDocumentCount(): Promise<number>;\r\n  estimatedDocumentCount(callback: Callback<number>): void;\r\n  estimatedDocumentCount(options: EstimatedDocumentCountOptions): Promise<number>;\r\n  estimatedDocumentCount(options: EstimatedDocumentCountOptions, callback: Callback<number>): void;\r\n  estimatedDocumentCount(\r\n    options?: EstimatedDocumentCountOptions | Callback<number>,\r\n    callback?: Callback<number>\r\n  ): Promise<number> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    return executeOperation(\r\n      this,\r\n      new EstimatedDocumentCountOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the number of documents matching the filter.\r\n   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\r\n   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\r\n   * the following query operators must be replaced:\r\n   *\r\n   * | Operator | Replacement |\r\n   * | -------- | ----------- |\r\n   * | `$where`   | [`$expr`][1] |\r\n   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\r\n   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\r\n   *\r\n   * [1]: https://docs.mongodb.com/manual/reference/operator/query/expr/\r\n   * [2]: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\r\n   * [3]: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\r\n   * [4]: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\r\n   *\r\n   * @param filter - The filter for the count\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   *\r\n   * @see https://docs.mongodb.com/manual/reference/operator/query/expr/\r\n   * @see https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\r\n   * @see https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\r\n   * @see https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\r\n   */\r\n  countDocuments(): Promise<number>;\r\n  countDocuments(callback: Callback<number>): void;\r\n  countDocuments(filter: Filter<TSchema>): Promise<number>;\r\n  countDocuments(callback: Callback<number>): void;\r\n  countDocuments(filter: Filter<TSchema>, options: CountDocumentsOptions): Promise<number>;\r\n  countDocuments(\r\n    filter: Filter<TSchema>,\r\n    options: CountDocumentsOptions,\r\n    callback: Callback<number>\r\n  ): void;\r\n  countDocuments(filter: Filter<TSchema>, callback: Callback<number>): void;\r\n  countDocuments(\r\n    filter?: Document | CountDocumentsOptions | Callback<number>,\r\n    options?: CountDocumentsOptions | Callback<number>,\r\n    callback?: Callback<number>\r\n  ): Promise<number> | void {\r\n    if (filter == null) {\r\n      (filter = {}), (options = {}), (callback = undefined);\r\n    } else if (typeof filter === 'function') {\r\n      (callback = filter as Callback<number>), (filter = {}), (options = {});\r\n    } else {\r\n      if (arguments.length === 2) {\r\n        if (typeof options === 'function') (callback = options), (options = {});\r\n      }\r\n    }\r\n\r\n    filter ??= {};\r\n    return executeOperation(\r\n      this,\r\n      new CountDocumentsOperation(\r\n        this as TODO_NODE_3286,\r\n        filter as Document,\r\n        resolveOptions(this, options as CountDocumentsOptions)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The distinct command returns a list of distinct values for the given key across a collection.\r\n   *\r\n   * @param key - Field of the document to find distinct values for\r\n   * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key\r\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key,\r\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\r\n  ): void;\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key,\r\n    filter: Filter<TSchema>\r\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key,\r\n    filter: Filter<TSchema>,\r\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\r\n  ): void;\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key,\r\n    filter: Filter<TSchema>,\r\n    options: DistinctOptions\r\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key,\r\n    filter: Filter<TSchema>,\r\n    options: DistinctOptions,\r\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\r\n  ): void;\r\n\r\n  // Embedded documents overload\r\n  distinct(key: string): Promise<any[]>;\r\n  distinct(key: string, callback: Callback<any[]>): void;\r\n  distinct(key: string, filter: Filter<TSchema>): Promise<any[]>;\r\n  distinct(key: string, filter: Filter<TSchema>, callback: Callback<any[]>): void;\r\n  distinct(key: string, filter: Filter<TSchema>, options: DistinctOptions): Promise<any[]>;\r\n  distinct(\r\n    key: string,\r\n    filter: Filter<TSchema>,\r\n    options: DistinctOptions,\r\n    callback: Callback<any[]>\r\n  ): void;\r\n  // Implementation\r\n  distinct<Key extends keyof WithId<TSchema>>(\r\n    key: Key,\r\n    filter?: Filter<TSchema> | DistinctOptions | Callback<any[]>,\r\n    options?: DistinctOptions | Callback<any[]>,\r\n    callback?: Callback<any[]>\r\n  ): Promise<any[]> | void {\r\n    if (typeof filter === 'function') {\r\n      (callback = filter as Callback<any[]>), (filter = {}), (options = {});\r\n    } else {\r\n      if (arguments.length === 3 && typeof options === 'function') {\r\n        (callback = options), (options = {});\r\n      }\r\n    }\r\n\r\n    filter ??= {};\r\n    return executeOperation(\r\n      this,\r\n      new DistinctOperation(\r\n        this as TODO_NODE_3286,\r\n        key as TODO_NODE_3286,\r\n        filter,\r\n        resolveOptions(this, options as DistinctOptions)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieve all the indexes on the collection.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  indexes(): Promise<Document[]>;\r\n  indexes(callback: Callback<Document[]>): void;\r\n  indexes(options: IndexInformationOptions): Promise<Document[]>;\r\n  indexes(options: IndexInformationOptions, callback: Callback<Document[]>): void;\r\n  indexes(\r\n    options?: IndexInformationOptions | Callback<Document[]>,\r\n    callback?: Callback<Document[]>\r\n  ): Promise<Document[]> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new IndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all the collection statistics.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  stats(): Promise<CollStats>;\r\n  stats(callback: Callback<CollStats>): void;\r\n  stats(options: CollStatsOptions): Promise<CollStats>;\r\n  stats(options: CollStatsOptions, callback: Callback<CollStats>): void;\r\n  stats(\r\n    options?: CollStatsOptions | Callback<CollStats>,\r\n    callback?: Callback<CollStats>\r\n  ): Promise<CollStats> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    return executeOperation(\r\n      this,\r\n      new CollStatsOperation(this as TODO_NODE_3286, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\r\n   *\r\n   * @param filter - The filter used to select the document to remove\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  findOneAndDelete(filter: Filter<TSchema>): Promise<ModifyResult<TSchema>>;\r\n  findOneAndDelete(\r\n    filter: Filter<TSchema>,\r\n    options: FindOneAndDeleteOptions\r\n  ): Promise<ModifyResult<TSchema>>;\r\n  findOneAndDelete(filter: Filter<TSchema>, callback: Callback<ModifyResult<TSchema>>): void;\r\n  findOneAndDelete(\r\n    filter: Filter<TSchema>,\r\n    options: FindOneAndDeleteOptions,\r\n    callback: Callback<ModifyResult<TSchema>>\r\n  ): void;\r\n  findOneAndDelete(\r\n    filter: Filter<TSchema>,\r\n    options?: FindOneAndDeleteOptions | Callback<ModifyResult<TSchema>>,\r\n    callback?: Callback<ModifyResult<TSchema>>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new FindOneAndDeleteOperation(\r\n        this as TODO_NODE_3286,\r\n        filter,\r\n        resolveOptions(this, options)\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\r\n   *\r\n   * @param filter - The filter used to select the document to replace\r\n   * @param replacement - The Document that replaces the matching document\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  findOneAndReplace(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>\r\n  ): Promise<ModifyResult<TSchema>>;\r\n  findOneAndReplace(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    callback: Callback<ModifyResult<TSchema>>\r\n  ): void;\r\n  findOneAndReplace(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    options: FindOneAndReplaceOptions\r\n  ): Promise<ModifyResult<TSchema>>;\r\n  findOneAndReplace(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    options: FindOneAndReplaceOptions,\r\n    callback: Callback<ModifyResult<TSchema>>\r\n  ): void;\r\n  findOneAndReplace(\r\n    filter: Filter<TSchema>,\r\n    replacement: WithoutId<TSchema>,\r\n    options?: FindOneAndReplaceOptions | Callback<ModifyResult<TSchema>>,\r\n    callback?: Callback<ModifyResult<TSchema>>\r\n  ): Promise<ModifyResult<TSchema>> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new FindOneAndReplaceOperation(\r\n        this as TODO_NODE_3286,\r\n        filter,\r\n        replacement,\r\n        resolveOptions(this, options)\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\r\n   *\r\n   * @param filter - The filter used to select the document to update\r\n   * @param update - Update operations to be performed on the document\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  findOneAndUpdate(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>\r\n  ): Promise<ModifyResult<TSchema>>;\r\n  findOneAndUpdate(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    callback: Callback<ModifyResult<TSchema>>\r\n  ): void;\r\n  findOneAndUpdate(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options: FindOneAndUpdateOptions\r\n  ): Promise<ModifyResult<TSchema>>;\r\n  findOneAndUpdate(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options: FindOneAndUpdateOptions,\r\n    callback: Callback<ModifyResult<TSchema>>\r\n  ): void;\r\n  findOneAndUpdate(\r\n    filter: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options?: FindOneAndUpdateOptions | Callback<ModifyResult<TSchema>>,\r\n    callback?: Callback<ModifyResult<TSchema>>\r\n  ): Promise<ModifyResult<TSchema>> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this,\r\n      new FindOneAndUpdateOperation(\r\n        this as TODO_NODE_3286,\r\n        filter,\r\n        update,\r\n        resolveOptions(this, options)\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\r\n   *\r\n   * @param pipeline - An array of aggregation pipelines to execute\r\n   * @param options - Optional settings for the command\r\n   */\r\n  aggregate<T extends Document = Document>(\r\n    pipeline: Document[] = [],\r\n    options?: AggregateOptions\r\n  ): AggregationCursor<T> {\r\n    if (arguments.length > 2) {\r\n      throw new MongoInvalidArgumentError(\r\n        'Method \"collection.aggregate()\" accepts at most two arguments'\r\n      );\r\n    }\r\n    if (!Array.isArray(pipeline)) {\r\n      throw new MongoInvalidArgumentError(\r\n        'Argument \"pipeline\" must be an array of aggregation stages'\r\n      );\r\n    }\r\n    if (typeof options === 'function') {\r\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\r\n    }\r\n\r\n    return new AggregationCursor(\r\n      getTopology(this),\r\n      this.s.namespace,\r\n      pipeline,\r\n      resolveOptions(this, options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\r\n   *\r\n   * @since 3.0.0\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n   * @param options - Optional settings for the command\r\n   */\r\n  watch<TLocal extends Document = TSchema>(\r\n    pipeline: Document[] = [],\r\n    options: ChangeStreamOptions = {}\r\n  ): ChangeStream<TLocal> {\r\n    // Allow optionally not specifying a pipeline\r\n    if (!Array.isArray(pipeline)) {\r\n      options = pipeline;\r\n      pipeline = [];\r\n    }\r\n\r\n    return new ChangeStream<TLocal>(this, pipeline, resolveOptions(this, options));\r\n  }\r\n\r\n  /**\r\n   * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\r\n   *\r\n   * @deprecated collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.\r\n   * @param map - The mapping function.\r\n   * @param reduce - The reduce function.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  mapReduce<TKey = any, TValue = any>(\r\n    map: string | MapFunction<TSchema>,\r\n    reduce: string | ReduceFunction<TKey, TValue>\r\n  ): Promise<Document | Document[]>;\r\n  mapReduce<TKey = any, TValue = any>(\r\n    map: string | MapFunction<TSchema>,\r\n    reduce: string | ReduceFunction<TKey, TValue>,\r\n    callback: Callback<Document | Document[]>\r\n  ): void;\r\n  mapReduce<TKey = any, TValue = any>(\r\n    map: string | MapFunction<TSchema>,\r\n    reduce: string | ReduceFunction<TKey, TValue>,\r\n    options: MapReduceOptions<TKey, TValue>\r\n  ): Promise<Document | Document[]>;\r\n  mapReduce<TKey = any, TValue = any>(\r\n    map: string | MapFunction<TSchema>,\r\n    reduce: string | ReduceFunction<TKey, TValue>,\r\n    options: MapReduceOptions<TKey, TValue>,\r\n    callback: Callback<Document | Document[]>\r\n  ): void;\r\n  mapReduce<TKey = any, TValue = any>(\r\n    map: string | MapFunction<TSchema>,\r\n    reduce: string | ReduceFunction<TKey, TValue>,\r\n    options?: MapReduceOptions<TKey, TValue> | Callback<Document | Document[]>,\r\n    callback?: Callback<Document | Document[]>\r\n  ): Promise<Document | Document[]> | void {\r\n    emitWarningOnce(\r\n      'collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.'\r\n    );\r\n    if ('function' === typeof options) (callback = options), (options = {});\r\n    // Out must always be defined (make sure we don't break weirdly on pre 1.8+ servers)\r\n    // TODO NODE-3339: Figure out if this is still necessary given we no longer officially support pre-1.8\r\n    if (options?.out == null) {\r\n      throw new MongoInvalidArgumentError(\r\n        'Option \"out\" must be defined, see mongodb docs for possible values'\r\n      );\r\n    }\r\n\r\n    if ('function' === typeof map) {\r\n      map = map.toString();\r\n    }\r\n\r\n    if ('function' === typeof reduce) {\r\n      reduce = reduce.toString();\r\n    }\r\n\r\n    if ('function' === typeof options.finalize) {\r\n      options.finalize = options.finalize.toString();\r\n    }\r\n\r\n    return executeOperation(\r\n      this,\r\n      new MapReduceOperation(\r\n        this as TODO_NODE_3286,\r\n        map,\r\n        reduce,\r\n        resolveOptions(this, options) as TODO_NODE_3286\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /** Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order. */\r\n  initializeUnorderedBulkOp(options?: BulkWriteOptions): UnorderedBulkOperation {\r\n    return new UnorderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\r\n  }\r\n\r\n  /** Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types. */\r\n  initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\r\n    return new OrderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\r\n  }\r\n\r\n  /** Get the db scoped logger */\r\n  getLogger(): Logger {\r\n    return this.s.db.s.logger;\r\n  }\r\n\r\n  get logger(): Logger {\r\n    return this.s.db.s.logger;\r\n  }\r\n\r\n  /**\r\n   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\r\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\r\n   * can be overridden by setting the **forceServerObjectId** flag.\r\n   *\r\n   * @deprecated Use insertOne, insertMany or bulkWrite instead.\r\n   * @param docs - The documents to insert\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  insert(\r\n    docs: OptionalUnlessRequiredId<TSchema>[],\r\n    options: BulkWriteOptions,\r\n    callback: Callback<InsertManyResult<TSchema>>\r\n  ): Promise<InsertManyResult<TSchema>> | void {\r\n    emitWarningOnce(\r\n      'collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.'\r\n    );\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options || { ordered: false };\r\n    docs = !Array.isArray(docs) ? [docs] : docs;\r\n\r\n    if (options.keepGoing === true) {\r\n      options.ordered = false;\r\n    }\r\n\r\n    return this.insertMany(docs, options, callback);\r\n  }\r\n\r\n  /**\r\n   * Updates documents.\r\n   *\r\n   * @deprecated use updateOne, updateMany or bulkWrite\r\n   * @param selector - The selector for the update operation.\r\n   * @param update - The update operations to be applied to the documents\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  update(\r\n    selector: Filter<TSchema>,\r\n    update: UpdateFilter<TSchema>,\r\n    options: UpdateOptions,\r\n    callback: Callback<Document>\r\n  ): Promise<UpdateResult> | void {\r\n    emitWarningOnce(\r\n      'collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.'\r\n    );\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    return this.updateMany(selector, update, options, callback);\r\n  }\r\n\r\n  /**\r\n   * Remove documents.\r\n   *\r\n   * @deprecated use deleteOne, deleteMany or bulkWrite\r\n   * @param selector - The selector for the update operation.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  remove(\r\n    selector: Filter<TSchema>,\r\n    options: DeleteOptions,\r\n    callback: Callback\r\n  ): Promise<DeleteResult> | void {\r\n    emitWarningOnce(\r\n      'collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.'\r\n    );\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    return this.deleteMany(selector, options, callback);\r\n  }\r\n\r\n  /**\r\n   * An estimated count of matching documents in the db to a filter.\r\n   *\r\n   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\r\n   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\r\n   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\r\n   *\r\n   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\r\n   *\r\n   * @param filter - The filter for the count.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  count(): Promise<number>;\r\n  count(callback: Callback<number>): void;\r\n  count(filter: Filter<TSchema>): Promise<number>;\r\n  count(filter: Filter<TSchema>, callback: Callback<number>): void;\r\n  count(filter: Filter<TSchema>, options: CountOptions): Promise<number>;\r\n  count(\r\n    filter: Filter<TSchema>,\r\n    options: CountOptions,\r\n    callback: Callback<number>\r\n  ): Promise<number> | void;\r\n  count(\r\n    filter?: Filter<TSchema> | CountOptions | Callback<number>,\r\n    options?: CountOptions | Callback<number>,\r\n    callback?: Callback<number>\r\n  ): Promise<number> | void {\r\n    if (typeof filter === 'function') {\r\n      (callback = filter as Callback<number>), (filter = {}), (options = {});\r\n    } else {\r\n      if (typeof options === 'function') (callback = options), (options = {});\r\n    }\r\n\r\n    filter ??= {};\r\n    return executeOperation(\r\n      this,\r\n      new CountOperation(\r\n        MongoDBNamespace.fromString(this.namespace),\r\n        filter,\r\n        resolveOptions(this, options)\r\n      ),\r\n      callback\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}