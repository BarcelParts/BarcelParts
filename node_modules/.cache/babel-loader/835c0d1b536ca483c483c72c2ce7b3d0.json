{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\n\nconst Denque = require(\"denque\");\n\nconst bson_1 = require(\"../bson\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst server_selection_1 = require(\"./server_selection\");\n\nconst srv_polling_1 = require(\"./srv_polling\");\n\nconst topology_description_1 = require(\"./topology_description\"); // Global state\n\n\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/**\r\n * A container of server instances representing a connection to a MongoDB topology.\r\n * @internal\r\n */\n\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\r\n   * @param seedlist - a list of HostAddress instances to connect to\r\n   */\n  constructor(seeds, options) {\n    var _a;\n\n    super(); // Legacy CSFLE support\n\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize; // Options should only be undefined in tests, MongoClient will always have defined options\n\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist = [];\n\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\r\n   * @returns A `TopologyDescription` for this topology\r\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  /** Initiate server connect */\n\n\n  connect(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)])); // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      } // TODO: NODE-2471\n\n\n      if (server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n  /** Close this topology */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    (0, utils_1.eachAsync)(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n      this.s.sessionPool.endAllPooledSessions(() => {\n        (0, utils_1.eachAsync)(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n          this.s.servers.clear(); // emit an event for close\n\n          this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n          stateTransition(this, common_1.STATE_CLOSED);\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    });\n  }\n  /**\r\n   * Selects a server according to the selection predicate provided\r\n   *\r\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\r\n   * @param options - Optional settings related to server selection\r\n   * @param callback - The callback used to indicate success or failure\r\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\r\n   */\n\n\n  selectServer(selector, options, callback) {\n    let serverSelector;\n\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\r\n   * @returns Whether the topology should initiate selection to determine session support\r\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\r\n   * @returns Whether sessions are supported on the current topology\r\n   */\n\n\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /** Start a logical session */\n\n\n  startSession(options, clientOptions) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /** Send endSessions command(s) with the given session ids */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred), {}, (err, server) => {\n      if (err || !server) {\n        if (typeof callback === 'function') callback(err);\n        return;\n      }\n\n      server.command((0, utils_1.ns)('admin.$cmd'), {\n        endSessions: sessions\n      }, {\n        noResponse: true\n      }, (err, result) => {\n        if (typeof callback === 'function') callback(err, result);\n      });\n    });\n  }\n  /**\r\n   * Update the internal TopologyDescription with a ServerDescription\r\n   *\r\n   * @param serverDescription - The server to update in the internal list of server descriptions\r\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    if (!previousServerDescription) {\n      return;\n    } // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\r\n   * @deprecated This function is deprecated and will be removed in the next major version.\r\n   */\n\n\n  unref() {\n    (0, utils_1.emitWarning)('`unref` is a noop and will be removed in the next major version');\n  } // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n\n\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n\n}\n\nexports.Topology = Topology;\n/** @event */\n\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\n\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\n\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\n\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\n\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.ERROR = constants_1.ERROR;\n/** @event */\n\nTopology.OPEN = constants_1.OPEN;\n/** @event */\n\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\n\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\n\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\n\n\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n\n  return common_1.TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n/**\r\n * Creates new server instances and attempts to connect them\r\n *\r\n * @param topology - The topology that this server belongs to\r\n * @param serverDescription - The description for the server to initialize and connect to\r\n */\n\n\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\r\n * @param topology - Topology to update.\r\n * @param incomingServerDescription - New server description.\r\n */\n\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\n\n\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n\n}\n\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"mappings":"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","names":["globalTopologyCounter","stateTransition","common_1","kCancelled","Symbol","kWaitQueue","Topology","mongo_types_1","constructor","seeds","options","bson","Object","create","serialize","bson_1","deserialize","hosts","utils_1","fromString","retryReads","connection_string_1","get","retryWrites","serverSelectionTimeoutMS","directConnection","loadBalanced","metadata","monitorCommands","tls","maxPoolSize","minPoolSize","waitQueueTimeoutMS","connectionType","connectTimeoutMS","maxIdleTimeMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Array","isArray","seedlist","seed","push","error_1","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","serverDescriptions","Map","hostAddress","set","toString","server_description_1","Denque","s","id","state","description","topology_description_1","replicaSet","undefined","servers","sessionPool","sessions_1","sessions","Set","credentials","clusterTime","connectionTimers","detectShardedTopology","ev","detectSrvRecords","srvHost","srvPoller","_a","srv_polling_1","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","_b","_c","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","events_1","capabilities","ServerCapabilities","lastHello","connect","callback","TOPOLOGY_OPENING","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","readPreference","read_preference_1","primary","selectServer","err","server","close","ERROR","command","ping","OPEN","CONNECT","force","drainWaitQueue","stop","removeListener","session","cb","endSession","endAllPooledSessions","destroyServer","clear","TOPOLOGY_CLOSED","selector","serverSelector","translate","assign","isSharded","transaction","waitQueueMember","timer","setTimeout","timeoutError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","once","delete","add","endSessions","primaryPreferred","noResponse","result","hasServer","isStaleServerDescription","previousServerDescription","$clusterTime","equalDescriptions","equals","update","compatibilityError","SERVER_DESCRIPTION_CHANGED","auth","clientMetadata","isConnected","isDestroyed","unref","sd","filter","maxWireVersion","commonWireVersion","exports","constants_1","topology","removeAllListeners","destroy","SERVER_CLOSED","ReplicaSetNoPrimary","LoadBalanced","randomSelection","array","Math","floor","random","SERVER_OPENING","server_1","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","entry","serverAddress","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\sdam\\topology.ts"],"sourcesContent":["import Denque = require('denque');\r\nimport type { BSONSerializeOptions, Document } from '../bson';\r\nimport { deserialize, serialize } from '../bson';\r\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\r\nimport type { ConnectionEvents, DestroyOptions } from '../cmap/connection';\r\nimport type { CloseOptions, ConnectionPoolEvents } from '../cmap/connection_pool';\r\nimport { DEFAULT_OPTIONS } from '../connection_string';\r\nimport {\r\n  CLOSE,\r\n  CONNECT,\r\n  ERROR,\r\n  LOCAL_SERVER_EVENTS,\r\n  OPEN,\r\n  SERVER_CLOSED,\r\n  SERVER_DESCRIPTION_CHANGED,\r\n  SERVER_OPENING,\r\n  SERVER_RELAY_EVENTS,\r\n  TIMEOUT,\r\n  TOPOLOGY_CLOSED,\r\n  TOPOLOGY_DESCRIPTION_CHANGED,\r\n  TOPOLOGY_OPENING\r\n} from '../constants';\r\nimport {\r\n  MongoCompatibilityError,\r\n  MongoDriverError,\r\n  MongoRuntimeError,\r\n  MongoServerSelectionError,\r\n  MongoTopologyClosedError\r\n} from '../error';\r\nimport type { MongoOptions, ServerApi } from '../mongo_client';\r\nimport { TypedEventEmitter } from '../mongo_types';\r\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\r\nimport {\r\n  ClientSession,\r\n  ClientSessionOptions,\r\n  ServerSessionId,\r\n  ServerSessionPool\r\n} from '../sessions';\r\nimport type { Transaction } from '../transactions';\r\nimport {\r\n  Callback,\r\n  ClientMetadata,\r\n  eachAsync,\r\n  emitWarning,\r\n  EventEmitterWithState,\r\n  HostAddress,\r\n  makeStateMachine,\r\n  ns,\r\n  shuffle\r\n} from '../utils';\r\nimport {\r\n  _advanceClusterTime,\r\n  ClusterTime,\r\n  drainTimerQueue,\r\n  ServerType,\r\n  STATE_CLOSED,\r\n  STATE_CLOSING,\r\n  STATE_CONNECTED,\r\n  STATE_CONNECTING,\r\n  TimerQueue,\r\n  TopologyType\r\n} from './common';\r\nimport {\r\n  ServerClosedEvent,\r\n  ServerDescriptionChangedEvent,\r\n  ServerOpeningEvent,\r\n  TopologyClosedEvent,\r\n  TopologyDescriptionChangedEvent,\r\n  TopologyOpeningEvent\r\n} from './events';\r\nimport { Server, ServerEvents, ServerOptions } from './server';\r\nimport { compareTopologyVersion, ServerDescription } from './server_description';\r\nimport { readPreferenceServerSelector, ServerSelector } from './server_selection';\r\nimport { SrvPoller, SrvPollingEvent } from './srv_polling';\r\nimport { TopologyDescription } from './topology_description';\r\n\r\n// Global state\r\nlet globalTopologyCounter = 0;\r\n\r\nconst stateTransition = makeStateMachine({\r\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\r\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\r\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\r\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\r\n});\r\n\r\n/** @internal */\r\nconst kCancelled = Symbol('cancelled');\r\n/** @internal */\r\nconst kWaitQueue = Symbol('waitQueue');\r\n\r\n/** @internal */\r\nexport type ServerSelectionCallback = Callback<Server>;\r\n\r\n/** @internal */\r\nexport interface ServerSelectionRequest {\r\n  serverSelector: ServerSelector;\r\n  transaction?: Transaction;\r\n  callback: ServerSelectionCallback;\r\n  timer?: NodeJS.Timeout;\r\n  [kCancelled]?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport interface TopologyPrivate {\r\n  /** the id of this topology */\r\n  id: number;\r\n  /** passed in options */\r\n  options: TopologyOptions;\r\n  /** initial seedlist of servers to connect to */\r\n  seedlist: HostAddress[];\r\n  /** initial state */\r\n  state: string;\r\n  /** the topology description */\r\n  description: TopologyDescription;\r\n  serverSelectionTimeoutMS: number;\r\n  heartbeatFrequencyMS: number;\r\n  minHeartbeatFrequencyMS: number;\r\n  /** A map of server instances to normalized addresses */\r\n  servers: Map<string, Server>;\r\n  /** Server Session Pool */\r\n  sessionPool: ServerSessionPool;\r\n  /** Active client sessions */\r\n  sessions: Set<ClientSession>;\r\n  credentials?: MongoCredentials;\r\n  clusterTime?: ClusterTime;\r\n  /** timers created for the initial connect to a server */\r\n  connectionTimers: TimerQueue;\r\n\r\n  /** related to srv polling */\r\n  srvPoller?: SrvPoller;\r\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\r\n  detectSrvRecords: (event: SrvPollingEvent) => void;\r\n}\r\n\r\n/** @public */\r\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\r\n  srvMaxHosts: number;\r\n  srvServiceName: string;\r\n  hosts: HostAddress[];\r\n  retryWrites: boolean;\r\n  retryReads: boolean;\r\n  /** How long to block for server selection before throwing an error */\r\n  serverSelectionTimeoutMS: number;\r\n  /** The name of the replica set to connect to */\r\n  replicaSet?: string;\r\n  srvHost?: string;\r\n  /** @internal */\r\n  srvPoller?: SrvPoller;\r\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\r\n  directConnection: boolean;\r\n  loadBalanced: boolean;\r\n  metadata: ClientMetadata;\r\n  /** MongoDB server API version */\r\n  serverApi?: ServerApi;\r\n}\r\n\r\n/** @public */\r\nexport interface ConnectOptions {\r\n  readPreference?: ReadPreference;\r\n}\r\n\r\n/** @public */\r\nexport interface SelectServerOptions {\r\n  readPreference?: ReadPreferenceLike;\r\n  /** How long to block for server selection before throwing an error */\r\n  serverSelectionTimeoutMS?: number;\r\n  session?: ClientSession;\r\n}\r\n\r\n/** @public */\r\nexport type TopologyEvents = {\r\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\r\n  connect(topology: Topology): void;\r\n  serverOpening(event: ServerOpeningEvent): void;\r\n  serverClosed(event: ServerClosedEvent): void;\r\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\r\n  topologyClosed(event: TopologyClosedEvent): void;\r\n  topologyOpening(event: TopologyOpeningEvent): void;\r\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\r\n  error(error: Error): void;\r\n  /** @internal */\r\n  open(topology: Topology): void;\r\n  close(): void;\r\n  timeout(): void;\r\n} & Omit<ServerEvents, 'connect'> &\r\n  ConnectionPoolEvents &\r\n  ConnectionEvents &\r\n  EventEmitterWithState;\r\n/**\r\n * A container of server instances representing a connection to a MongoDB topology.\r\n * @internal\r\n */\r\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\r\n  /** @internal */\r\n  s: TopologyPrivate;\r\n  /** @internal */\r\n  [kWaitQueue]: Denque<ServerSelectionRequest>;\r\n  /** @internal */\r\n  hello?: Document;\r\n  /** @internal */\r\n  _type?: string;\r\n\r\n  /** @event */\r\n  static readonly SERVER_OPENING = SERVER_OPENING;\r\n  /** @event */\r\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\r\n  /** @event */\r\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\r\n  /** @event */\r\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\r\n  /** @event */\r\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\r\n  /** @event */\r\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\r\n  /** @event */\r\n  static readonly ERROR = ERROR;\r\n  /** @event */\r\n  static readonly OPEN = OPEN;\r\n  /** @event */\r\n  static readonly CONNECT = CONNECT;\r\n  /** @event */\r\n  static readonly CLOSE = CLOSE;\r\n  /** @event */\r\n  static readonly TIMEOUT = TIMEOUT;\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * @privateRemarks\r\n   * mongodb-client-encryption's class ClientEncryption falls back to finding the bson lib\r\n   * defined on client.topology.bson, in order to maintain compatibility with any version\r\n   * of mongodb-client-encryption we keep a reference to serialize and deserialize here.\r\n   */\r\n  bson: { serialize: typeof serialize; deserialize: typeof deserialize };\r\n\r\n  /**\r\n   * @param seedlist - a list of HostAddress instances to connect to\r\n   */\r\n  constructor(seeds: string | string[] | HostAddress | HostAddress[], options: TopologyOptions) {\r\n    super();\r\n\r\n    // Legacy CSFLE support\r\n    this.bson = Object.create(null);\r\n    this.bson.serialize = serialize;\r\n    this.bson.deserialize = deserialize;\r\n\r\n    // Options should only be undefined in tests, MongoClient will always have defined options\r\n    options = options ?? {\r\n      hosts: [HostAddress.fromString('localhost:27017')],\r\n      retryReads: DEFAULT_OPTIONS.get('retryReads'),\r\n      retryWrites: DEFAULT_OPTIONS.get('retryWrites'),\r\n      serverSelectionTimeoutMS: DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\r\n      directConnection: DEFAULT_OPTIONS.get('directConnection'),\r\n      loadBalanced: DEFAULT_OPTIONS.get('loadBalanced'),\r\n      metadata: DEFAULT_OPTIONS.get('metadata'),\r\n      monitorCommands: DEFAULT_OPTIONS.get('monitorCommands'),\r\n      tls: DEFAULT_OPTIONS.get('tls'),\r\n      maxPoolSize: DEFAULT_OPTIONS.get('maxPoolSize'),\r\n      minPoolSize: DEFAULT_OPTIONS.get('minPoolSize'),\r\n      waitQueueTimeoutMS: DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\r\n      connectionType: DEFAULT_OPTIONS.get('connectionType'),\r\n      connectTimeoutMS: DEFAULT_OPTIONS.get('connectTimeoutMS'),\r\n      maxIdleTimeMS: DEFAULT_OPTIONS.get('maxIdleTimeMS'),\r\n      heartbeatFrequencyMS: DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\r\n      minHeartbeatFrequencyMS: DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\r\n    };\r\n\r\n    if (typeof seeds === 'string') {\r\n      seeds = [HostAddress.fromString(seeds)];\r\n    } else if (!Array.isArray(seeds)) {\r\n      seeds = [seeds];\r\n    }\r\n\r\n    const seedlist: HostAddress[] = [];\r\n    for (const seed of seeds) {\r\n      if (typeof seed === 'string') {\r\n        seedlist.push(HostAddress.fromString(seed));\r\n      } else if (seed instanceof HostAddress) {\r\n        seedlist.push(seed);\r\n      } else {\r\n        // FIXME(NODE-3483): May need to be a MongoParseError\r\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\r\n      }\r\n    }\r\n\r\n    const topologyType = topologyTypeFromOptions(options);\r\n    const topologyId = globalTopologyCounter++;\r\n\r\n    const selectedHosts =\r\n      options.srvMaxHosts == null ||\r\n      options.srvMaxHosts === 0 ||\r\n      options.srvMaxHosts >= seedlist.length\r\n        ? seedlist\r\n        : shuffle(seedlist, options.srvMaxHosts);\r\n\r\n    const serverDescriptions = new Map();\r\n    for (const hostAddress of selectedHosts) {\r\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\r\n    }\r\n\r\n    this[kWaitQueue] = new Denque();\r\n    this.s = {\r\n      // the id of this topology\r\n      id: topologyId,\r\n      // passed in options\r\n      options,\r\n      // initial seedlist of servers to connect to\r\n      seedlist,\r\n      // initial state\r\n      state: STATE_CLOSED,\r\n      // the topology description\r\n      description: new TopologyDescription(\r\n        topologyType,\r\n        serverDescriptions,\r\n        options.replicaSet,\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        options\r\n      ),\r\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\r\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\r\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\r\n      // a map of server instances to normalized addresses\r\n      servers: new Map(),\r\n      // Server Session Pool\r\n      sessionPool: new ServerSessionPool(this),\r\n      // Active client sessions\r\n      sessions: new Set(),\r\n      credentials: options?.credentials,\r\n      clusterTime: undefined,\r\n\r\n      // timer management\r\n      connectionTimers: new Set<NodeJS.Timeout>(),\r\n\r\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\r\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\r\n    };\r\n\r\n    if (options.srvHost && !options.loadBalanced) {\r\n      this.s.srvPoller =\r\n        options.srvPoller ??\r\n        new SrvPoller({\r\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\r\n          srvHost: options.srvHost,\r\n          srvMaxHosts: options.srvMaxHosts,\r\n          srvServiceName: options.srvServiceName\r\n        });\r\n\r\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\r\n    }\r\n  }\r\n\r\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\r\n    const previousType = event.previousDescription.type;\r\n    const newType = event.newDescription.type;\r\n\r\n    const transitionToSharded =\r\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\r\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\r\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\r\n\r\n    if (transitionToSharded && !listeningToSrvPolling) {\r\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\r\n      this.s.srvPoller?.start();\r\n    }\r\n  }\r\n\r\n  private detectSrvRecords(ev: SrvPollingEvent) {\r\n    const previousTopologyDescription = this.s.description;\r\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\r\n      ev,\r\n      this.s.options.srvMaxHosts\r\n    );\r\n    if (this.s.description === previousTopologyDescription) {\r\n      // Nothing changed, so return\r\n      return;\r\n    }\r\n\r\n    updateServers(this);\r\n\r\n    this.emit(\r\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\r\n      new TopologyDescriptionChangedEvent(\r\n        this.s.id,\r\n        previousTopologyDescription,\r\n        this.s.description\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns A `TopologyDescription` for this topology\r\n   */\r\n  get description(): TopologyDescription {\r\n    return this.s.description;\r\n  }\r\n\r\n  get loadBalanced(): boolean {\r\n    return this.s.options.loadBalanced;\r\n  }\r\n\r\n  get capabilities(): ServerCapabilities {\r\n    return new ServerCapabilities(this.lastHello());\r\n  }\r\n\r\n  /** Initiate server connect */\r\n  connect(options?: ConnectOptions, callback?: Callback): void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    if (this.s.state === STATE_CONNECTED) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CONNECTING);\r\n\r\n    // emit SDAM monitoring events\r\n    this.emit(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\r\n\r\n    // emit an event for the topology change\r\n    this.emit(\r\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\r\n      new TopologyDescriptionChangedEvent(\r\n        this.s.id,\r\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\r\n        this.s.description\r\n      )\r\n    );\r\n\r\n    // connect all known servers, then attempt server selection to connect\r\n    const serverDescriptions = Array.from(this.s.description.servers.values());\r\n    this.s.servers = new Map(\r\n      serverDescriptions.map(serverDescription => [\r\n        serverDescription.address,\r\n        createAndConnectServer(this, serverDescription)\r\n      ])\r\n    );\r\n\r\n    // In load balancer mode we need to fake a server description getting\r\n    // emitted from the monitor, since the monitor doesn't exist.\r\n    if (this.s.options.loadBalanced) {\r\n      for (const description of serverDescriptions) {\r\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\r\n          loadBalanced: this.s.options.loadBalanced\r\n        });\r\n        this.serverUpdateHandler(newDescription);\r\n      }\r\n    }\r\n\r\n    const readPreference = options.readPreference ?? ReadPreference.primary;\r\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\r\n      if (err) {\r\n        this.close();\r\n\r\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\r\n        return;\r\n      }\r\n\r\n      // TODO: NODE-2471\r\n      if (server && this.s.credentials) {\r\n        server.command(ns('admin.$cmd'), { ping: 1 }, {}, err => {\r\n          if (err) {\r\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\r\n            return;\r\n          }\r\n\r\n          stateTransition(this, STATE_CONNECTED);\r\n          this.emit(Topology.OPEN, this);\r\n          this.emit(Topology.CONNECT, this);\r\n\r\n          if (typeof callback === 'function') callback(undefined, this);\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      stateTransition(this, STATE_CONNECTED);\r\n      this.emit(Topology.OPEN, this);\r\n      this.emit(Topology.CONNECT, this);\r\n\r\n      if (typeof callback === 'function') callback(undefined, this);\r\n    });\r\n  }\r\n\r\n  /** Close this topology */\r\n  close(options?: CloseOptions, callback?: Callback): void {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    if (typeof options === 'boolean') {\r\n      options = { force: options };\r\n    }\r\n\r\n    options = options ?? {};\r\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CLOSING);\r\n\r\n    drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\r\n    drainTimerQueue(this.s.connectionTimers);\r\n\r\n    if (this.s.srvPoller) {\r\n      this.s.srvPoller.stop();\r\n      this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\r\n    }\r\n\r\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\r\n\r\n    eachAsync(\r\n      Array.from(this.s.sessions.values()),\r\n      (session, cb) => session.endSession(cb),\r\n      () => {\r\n        this.s.sessionPool.endAllPooledSessions(() => {\r\n          eachAsync(\r\n            Array.from(this.s.servers.values()),\r\n            (server, cb) => destroyServer(server, this, options, cb),\r\n            err => {\r\n              this.s.servers.clear();\r\n\r\n              // emit an event for close\r\n              this.emit(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\r\n\r\n              stateTransition(this, STATE_CLOSED);\r\n\r\n              if (typeof callback === 'function') {\r\n                callback(err);\r\n              }\r\n            }\r\n          );\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Selects a server according to the selection predicate provided\r\n   *\r\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\r\n   * @param options - Optional settings related to server selection\r\n   * @param callback - The callback used to indicate success or failure\r\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\r\n   */\r\n  selectServer(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    options: SelectServerOptions,\r\n    callback: Callback<Server>\r\n  ): void {\r\n    let serverSelector;\r\n    if (typeof selector !== 'function') {\r\n      if (typeof selector === 'string') {\r\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\r\n      } else {\r\n        let readPreference;\r\n        if (selector instanceof ReadPreference) {\r\n          readPreference = selector;\r\n        } else {\r\n          ReadPreference.translate(options);\r\n          readPreference = options.readPreference || ReadPreference.primary;\r\n        }\r\n\r\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\r\n      }\r\n    } else {\r\n      serverSelector = selector;\r\n    }\r\n\r\n    options = Object.assign(\r\n      {},\r\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\r\n      options\r\n    );\r\n\r\n    const isSharded = this.description.type === TopologyType.Sharded;\r\n    const session = options.session;\r\n    const transaction = session && session.transaction;\r\n\r\n    if (isSharded && transaction && transaction.server) {\r\n      callback(undefined, transaction.server);\r\n      return;\r\n    }\r\n\r\n    const waitQueueMember: ServerSelectionRequest = {\r\n      serverSelector,\r\n      transaction,\r\n      callback\r\n    };\r\n\r\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\r\n    if (serverSelectionTimeoutMS) {\r\n      waitQueueMember.timer = setTimeout(() => {\r\n        waitQueueMember[kCancelled] = true;\r\n        waitQueueMember.timer = undefined;\r\n        const timeoutError = new MongoServerSelectionError(\r\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\r\n          this.description\r\n        );\r\n\r\n        waitQueueMember.callback(timeoutError);\r\n      }, serverSelectionTimeoutMS);\r\n    }\r\n\r\n    this[kWaitQueue].push(waitQueueMember);\r\n    processWaitQueue(this);\r\n  }\r\n\r\n  // Sessions related methods\r\n\r\n  /**\r\n   * @returns Whether the topology should initiate selection to determine session support\r\n   */\r\n  shouldCheckForSessionSupport(): boolean {\r\n    if (this.description.type === TopologyType.Single) {\r\n      return !this.description.hasKnownServers;\r\n    }\r\n\r\n    return !this.description.hasDataBearingServers;\r\n  }\r\n\r\n  /**\r\n   * @returns Whether sessions are supported on the current topology\r\n   */\r\n  hasSessionSupport(): boolean {\r\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\r\n  }\r\n\r\n  /** Start a logical session */\r\n  startSession(options: ClientSessionOptions, clientOptions?: MongoOptions): ClientSession {\r\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\r\n    session.once('ended', () => {\r\n      this.s.sessions.delete(session);\r\n    });\r\n\r\n    this.s.sessions.add(session);\r\n    return session;\r\n  }\r\n\r\n  /** Send endSessions command(s) with the given session ids */\r\n  endSessions(sessions: ServerSessionId[], callback?: Callback<Document>): void {\r\n    if (!Array.isArray(sessions)) {\r\n      sessions = [sessions];\r\n    }\r\n\r\n    this.selectServer(\r\n      readPreferenceServerSelector(ReadPreference.primaryPreferred),\r\n      {},\r\n      (err, server) => {\r\n        if (err || !server) {\r\n          if (typeof callback === 'function') callback(err);\r\n          return;\r\n        }\r\n\r\n        server.command(\r\n          ns('admin.$cmd'),\r\n          { endSessions: sessions },\r\n          { noResponse: true },\r\n          (err, result) => {\r\n            if (typeof callback === 'function') callback(err, result);\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update the internal TopologyDescription with a ServerDescription\r\n   *\r\n   * @param serverDescription - The server to update in the internal list of server descriptions\r\n   */\r\n  serverUpdateHandler(serverDescription: ServerDescription): void {\r\n    if (!this.s.description.hasServer(serverDescription.address)) {\r\n      return;\r\n    }\r\n\r\n    // ignore this server update if its from an outdated topologyVersion\r\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\r\n      return;\r\n    }\r\n\r\n    // these will be used for monitoring events later\r\n    const previousTopologyDescription = this.s.description;\r\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\r\n    if (!previousServerDescription) {\r\n      return;\r\n    }\r\n\r\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\r\n    // a server it MUST compare it to the current highest seen cluster time\r\n    // for the deployment. If the new cluster time is higher than the\r\n    // highest seen cluster time it MUST become the new highest seen cluster\r\n    // time. Two cluster times are compared using only the BsonTimestamp\r\n    // value of the clusterTime embedded field.\"\r\n    const clusterTime = serverDescription.$clusterTime;\r\n    if (clusterTime) {\r\n      _advanceClusterTime(this, clusterTime);\r\n    }\r\n\r\n    // If we already know all the information contained in this updated description, then\r\n    // we don't need to emit SDAM events, but still need to update the description, in order\r\n    // to keep client-tracked attributes like last update time and round trip time up to date\r\n    const equalDescriptions =\r\n      previousServerDescription && previousServerDescription.equals(serverDescription);\r\n\r\n    // first update the TopologyDescription\r\n    this.s.description = this.s.description.update(serverDescription);\r\n    if (this.s.description.compatibilityError) {\r\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\r\n      return;\r\n    }\r\n\r\n    // emit monitoring events for this change\r\n    if (!equalDescriptions) {\r\n      const newDescription = this.s.description.servers.get(serverDescription.address);\r\n      if (newDescription) {\r\n        this.emit(\r\n          Topology.SERVER_DESCRIPTION_CHANGED,\r\n          new ServerDescriptionChangedEvent(\r\n            this.s.id,\r\n            serverDescription.address,\r\n            previousServerDescription,\r\n            newDescription\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    // update server list from updated descriptions\r\n    updateServers(this, serverDescription);\r\n\r\n    // attempt to resolve any outstanding server selection attempts\r\n    if (this[kWaitQueue].length > 0) {\r\n      processWaitQueue(this);\r\n    }\r\n\r\n    if (!equalDescriptions) {\r\n      this.emit(\r\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\r\n        new TopologyDescriptionChangedEvent(\r\n          this.s.id,\r\n          previousTopologyDescription,\r\n          this.s.description\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\r\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\r\n    if (typeof callback === 'function') callback(undefined, true);\r\n  }\r\n\r\n  get clientMetadata(): ClientMetadata {\r\n    return this.s.options.metadata;\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.s.state === STATE_CONNECTED;\r\n  }\r\n\r\n  isDestroyed(): boolean {\r\n    return this.s.state === STATE_CLOSED;\r\n  }\r\n\r\n  /**\r\n   * @deprecated This function is deprecated and will be removed in the next major version.\r\n   */\r\n  unref(): void {\r\n    emitWarning('`unref` is a noop and will be removed in the next major version');\r\n  }\r\n\r\n  // NOTE: There are many places in code where we explicitly check the last hello\r\n  //       to do feature support detection. This should be done any other way, but for\r\n  //       now we will just return the first hello seen, which should suffice.\r\n  lastHello(): Document {\r\n    const serverDescriptions = Array.from(this.description.servers.values());\r\n    if (serverDescriptions.length === 0) return {};\r\n    const sd = serverDescriptions.filter(\r\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\r\n    )[0];\r\n\r\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\r\n    return result;\r\n  }\r\n\r\n  get commonWireVersion(): number | undefined {\r\n    return this.description.commonWireVersion;\r\n  }\r\n\r\n  get logicalSessionTimeoutMinutes(): number | undefined {\r\n    return this.description.logicalSessionTimeoutMinutes;\r\n  }\r\n\r\n  get clusterTime(): ClusterTime | undefined {\r\n    return this.s.clusterTime;\r\n  }\r\n\r\n  set clusterTime(clusterTime: ClusterTime | undefined) {\r\n    this.s.clusterTime = clusterTime;\r\n  }\r\n}\r\n\r\n/** Destroys a server, and removes all event listeners from the instance */\r\nfunction destroyServer(\r\n  server: Server,\r\n  topology: Topology,\r\n  options?: DestroyOptions,\r\n  callback?: Callback\r\n) {\r\n  options = options ?? {};\r\n  for (const event of LOCAL_SERVER_EVENTS) {\r\n    server.removeAllListeners(event);\r\n  }\r\n\r\n  server.destroy(options, () => {\r\n    topology.emit(\r\n      Topology.SERVER_CLOSED,\r\n      new ServerClosedEvent(topology.s.id, server.description.address)\r\n    );\r\n\r\n    for (const event of SERVER_RELAY_EVENTS) {\r\n      server.removeAllListeners(event);\r\n    }\r\n    if (typeof callback === 'function') {\r\n      callback();\r\n    }\r\n  });\r\n}\r\n\r\n/** Predicts the TopologyType from options */\r\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\r\n  if (options?.directConnection) {\r\n    return TopologyType.Single;\r\n  }\r\n\r\n  if (options?.replicaSet) {\r\n    return TopologyType.ReplicaSetNoPrimary;\r\n  }\r\n\r\n  if (options?.loadBalanced) {\r\n    return TopologyType.LoadBalanced;\r\n  }\r\n\r\n  return TopologyType.Unknown;\r\n}\r\n\r\nfunction randomSelection(array: ServerDescription[]): ServerDescription {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\n/**\r\n * Creates new server instances and attempts to connect them\r\n *\r\n * @param topology - The topology that this server belongs to\r\n * @param serverDescription - The description for the server to initialize and connect to\r\n */\r\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\r\n  topology.emit(\r\n    Topology.SERVER_OPENING,\r\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\r\n  );\r\n\r\n  const server = new Server(topology, serverDescription, topology.s.options);\r\n  for (const event of SERVER_RELAY_EVENTS) {\r\n    server.on(event, (e: any) => topology.emit(event, e));\r\n  }\r\n\r\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\r\n\r\n  server.connect();\r\n  return server;\r\n}\r\n\r\n/**\r\n * @param topology - Topology to update.\r\n * @param incomingServerDescription - New server description.\r\n */\r\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\r\n  // update the internal server's description\r\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\r\n    const server = topology.s.servers.get(incomingServerDescription.address);\r\n    if (server) {\r\n      server.s.description = incomingServerDescription;\r\n    }\r\n  }\r\n\r\n  // add new servers for all descriptions we currently don't know about locally\r\n  for (const serverDescription of topology.description.servers.values()) {\r\n    if (!topology.s.servers.has(serverDescription.address)) {\r\n      const server = createAndConnectServer(topology, serverDescription);\r\n      topology.s.servers.set(serverDescription.address, server);\r\n    }\r\n  }\r\n\r\n  // for all servers no longer known, remove their descriptions and destroy their instances\r\n  for (const entry of topology.s.servers) {\r\n    const serverAddress = entry[0];\r\n    if (topology.description.hasServer(serverAddress)) {\r\n      continue;\r\n    }\r\n\r\n    if (!topology.s.servers.has(serverAddress)) {\r\n      continue;\r\n    }\r\n\r\n    const server = topology.s.servers.get(serverAddress);\r\n    topology.s.servers.delete(serverAddress);\r\n\r\n    // prepare server for garbage collection\r\n    if (server) {\r\n      destroyServer(server, topology);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drainWaitQueue(queue: Denque<ServerSelectionRequest>, err?: MongoDriverError) {\r\n  while (queue.length) {\r\n    const waitQueueMember = queue.shift();\r\n    if (!waitQueueMember) {\r\n      continue;\r\n    }\r\n\r\n    if (waitQueueMember.timer) {\r\n      clearTimeout(waitQueueMember.timer);\r\n    }\r\n\r\n    if (!waitQueueMember[kCancelled]) {\r\n      waitQueueMember.callback(err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction processWaitQueue(topology: Topology) {\r\n  if (topology.s.state === STATE_CLOSED) {\r\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\r\n    return;\r\n  }\r\n\r\n  const isSharded = topology.description.type === TopologyType.Sharded;\r\n  const serverDescriptions = Array.from(topology.description.servers.values());\r\n  const membersToProcess = topology[kWaitQueue].length;\r\n  for (let i = 0; i < membersToProcess; ++i) {\r\n    const waitQueueMember = topology[kWaitQueue].shift();\r\n    if (!waitQueueMember) {\r\n      continue;\r\n    }\r\n\r\n    if (waitQueueMember[kCancelled]) {\r\n      continue;\r\n    }\r\n\r\n    let selectedDescriptions;\r\n    try {\r\n      const serverSelector = waitQueueMember.serverSelector;\r\n      selectedDescriptions = serverSelector\r\n        ? serverSelector(topology.description, serverDescriptions)\r\n        : serverDescriptions;\r\n    } catch (e) {\r\n      if (waitQueueMember.timer) {\r\n        clearTimeout(waitQueueMember.timer);\r\n      }\r\n\r\n      waitQueueMember.callback(e);\r\n      continue;\r\n    }\r\n\r\n    if (selectedDescriptions.length === 0) {\r\n      topology[kWaitQueue].push(waitQueueMember);\r\n      continue;\r\n    }\r\n\r\n    const selectedServerDescription = randomSelection(selectedDescriptions);\r\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\r\n    const transaction = waitQueueMember.transaction;\r\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\r\n      transaction.pinServer(selectedServer);\r\n    }\r\n\r\n    if (waitQueueMember.timer) {\r\n      clearTimeout(waitQueueMember.timer);\r\n    }\r\n\r\n    waitQueueMember.callback(undefined, selectedServer);\r\n  }\r\n\r\n  if (topology[kWaitQueue].length > 0) {\r\n    // ensure all server monitors attempt monitoring soon\r\n    for (const [, server] of topology.s.servers) {\r\n      process.nextTick(function scheduleServerCheck() {\r\n        return server.requestCheck();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction isStaleServerDescription(\r\n  topologyDescription: TopologyDescription,\r\n  incomingServerDescription: ServerDescription\r\n) {\r\n  const currentServerDescription = topologyDescription.servers.get(\r\n    incomingServerDescription.address\r\n  );\r\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\r\n  return (\r\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\r\n  );\r\n}\r\n\r\n/** @public */\r\nexport class ServerCapabilities {\r\n  maxWireVersion: number;\r\n  minWireVersion: number;\r\n\r\n  constructor(hello: Document) {\r\n    this.minWireVersion = hello.minWireVersion || 0;\r\n    this.maxWireVersion = hello.maxWireVersion || 0;\r\n  }\r\n\r\n  get hasAggregationCursor(): boolean {\r\n    return this.maxWireVersion >= 1;\r\n  }\r\n\r\n  get hasWriteCommands(): boolean {\r\n    return this.maxWireVersion >= 2;\r\n  }\r\n  get hasTextSearch(): boolean {\r\n    return this.minWireVersion >= 0;\r\n  }\r\n\r\n  get hasAuthCommands(): boolean {\r\n    return this.maxWireVersion >= 1;\r\n  }\r\n\r\n  get hasListCollectionsCommand(): boolean {\r\n    return this.maxWireVersion >= 3;\r\n  }\r\n\r\n  get hasListIndexesCommand(): boolean {\r\n    return this.maxWireVersion >= 3;\r\n  }\r\n\r\n  get supportsSnapshotReads(): boolean {\r\n    return this.maxWireVersion >= 13;\r\n  }\r\n\r\n  get commandsTakeWriteConcern(): boolean {\r\n    return this.maxWireVersion >= 5;\r\n  }\r\n\r\n  get commandsTakeCollation(): boolean {\r\n    return this.maxWireVersion >= 5;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}