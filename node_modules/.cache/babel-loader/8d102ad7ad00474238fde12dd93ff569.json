{"ast":null,"code":"\"use strict\";\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\n\nconst bson_1 = require(\"./bson\");\n\nconst metrics_1 = require(\"./cmap/metrics\");\n\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst common_1 = require(\"./sdam/common\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst utils_1 = require(\"./utils\");\n\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\n\nconst kServerSession = Symbol('serverSession');\n/** @internal */\n\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\n\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\n\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\n\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\n\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param topology - The current client's topology (Internal Class)\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n    /** @internal */\n\n    this[_a] = false;\n\n    if (topology == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n\n\n  get id() {\n    var _b;\n\n    return (_b = this[kServerSession]) === null || _b === void 0 ? void 0 : _b.id;\n  }\n\n  get serverSession() {\n    let serverSession = this[kServerSession];\n\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n\n      if (this.hasEnded) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n\n    return serverSession;\n  }\n  /** Whether or not this session is configured for snapshot reads */\n\n\n  get snapshotEnabled() {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n\n\n  get pinnedConnection() {\n    return this[kPinnedConnection];\n  }\n  /** @internal */\n\n\n  pin(conn) {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n\n\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned() {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  endSession(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    const finalOptions = {\n      force: true,\n      ...options\n    };\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions);\n        const serverSession = this[kServerSession];\n\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession); // Make sure a new serverSession never makes it on to the ClientSession\n\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession)\n          });\n        } // mark the session as ended, and emit a signal\n\n\n        this.hasEnded = true;\n        this.emit('ended', this); // spec indicates that we should ignore all errors for `endSessions`\n\n        done();\n      };\n\n      if (this.inTransaction()) {\n        // If we've reached endSession and the transaction is still active\n        // by default we abort it\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n\n\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n\n\n  advanceClusterTime(clusterTime) {\n    var _b, _c;\n\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n\n    if (!clusterTime.signature || ((_b = clusterTime.signature.hash) === null || _b === void 0 ? void 0 : _b._bsontype) !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && ((_c = clusterTime.signature.keyId) === null || _c === void 0 ? void 0 : _c._bsontype) !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n\n    (0, common_1._advanceClusterTime)(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n\n\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n\n\n  incrementTransactionNumber() {\n    this[kTxnNumberIncrement] += 1;\n  }\n  /** @returns whether this session is currently in a transaction or not */\n\n\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n\n\n  startTransaction(options) {\n    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    if (this[kSnapshotEnabled]) {\n      throw new error_1.MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.topology);\n\n    if ((0, shared_1.isSharded)(this.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    } // increment txnNumber\n\n\n    this.incrementTransactionNumber(); // create transaction state\n\n    this.transaction = new transactions_1.Transaction({\n      readConcern: (_c = (_b = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _b !== void 0 ? _b : this.defaultTransactionOptions.readConcern) !== null && _c !== void 0 ? _c : (_d = this.clientOptions) === null || _d === void 0 ? void 0 : _d.readConcern,\n      writeConcern: (_f = (_e = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _e !== void 0 ? _e : this.defaultTransactionOptions.writeConcern) !== null && _f !== void 0 ? _f : (_g = this.clientOptions) === null || _g === void 0 ? void 0 : _g.writeConcern,\n      readPreference: (_j = (_h = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _h !== void 0 ? _h : this.defaultTransactionOptions.readPreference) !== null && _j !== void 0 ? _j : (_k = this.clientOptions) === null || _k === void 0 ? void 0 : _k.readPreference,\n      maxCommitTimeMS: (_l = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _l !== void 0 ? _l : this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n\n  commitTransaction(callback) {\n    return (0, utils_1.maybePromise)(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n\n  abortTransaction(callback) {\n    return (0, utils_1.maybePromise)(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n\n\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param fn - A lambda to run within a transaction\n   * @param options - Optional settings for the transaction\n   */\n\n\n  withTransaction(fn, options) {\n    const startTime = (0, utils_1.now)();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n\n}\n\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\n\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  } // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n\n\n  if (conn) {\n    const servers = Array.from(session.topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if ((options === null || options === void 0 ? void 0 : options.error) == null || (options === null || options === void 0 ? void 0 : options.force)) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n\n      if (options === null || options === void 0 ? void 0 : options.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  session.startTransaction(options);\n  let promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction();\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n\n      throw err;\n    }\n\n    if (session.inTransaction()) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  const command = {\n    [commandName]: 1\n  }; // apply a writeConcern if specified\n\n  let writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(error, result) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n      return callback();\n    }\n\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n\n    if (error instanceof error_1.MongoError) {\n      if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult); // per txns spec, must unpin session in this case\n\n          session.unpin({\n            error\n          });\n        }\n      } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({\n          error\n        });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  (0, execute_operation_1.executeOperation)(session, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), (error, result) => {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n\n    if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return (0, execute_operation_1.executeOperation)(session, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), commandHandler);\n    }\n\n    commandHandler(error, result);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\n\n\nclass ServerSession {\n  /** @internal */\n  constructor() {\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n\n\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n\n\n  static clone(serverSession) {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n    const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type); // Manual prototype construction to avoid modifying the constructor of this class\n\n    return Object.setPrototypeOf({\n      id: {\n        id\n      },\n      lastUse: serverSession.lastUse,\n      txnNumber: serverSession.txnNumber,\n      isDirty: serverSession.isDirty\n    }, ServerSession.prototype);\n  }\n\n}\n\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\n\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n  /** Ends all sessions in the session pool */\n\n\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id), () => {\n        this.sessions = [];\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      });\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n\n\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes || 10;\n\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n\n      if (session && (this.topology.loadBalanced || !session.hasTimedOut(sessionTimeoutMinutes))) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n\n\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    if (this.topology.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      } // otherwise, readd this session to the session pool\n\n\n      this.sessions.unshift(session);\n    }\n  }\n\n}\n\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\n\nfunction applySession(session, command, options) {\n  var _b, _c;\n\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  } // May acquire serverSession here\n\n\n  const serverSession = session.serverSession;\n\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (((_b = options.writeConcern) === null || _b === void 0 ? void 0 : _b.w) === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n\n    return;\n  } // mark the last use of this session, and apply the `lsid`\n\n\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n\n    return;\n  } // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || ((_c = session === null || session === void 0 ? void 0 : session.clientOptions) === null || _c === void 0 ? void 0 : _c.readConcern);\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n\n  return;\n}\n\nexports.applySession = applySession;\n\nfunction updateSessionFromResponse(session, document) {\n  var _b;\n\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if ((session === null || session === void 0 ? void 0 : session[kSnapshotEnabled]) && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = ((_b = document.cursor) === null || _b === void 0 ? void 0 : _b.atClusterTime) || document.atClusterTime;\n\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"mappings":"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","names":["minWireVersionForShardedTransactions","kServerSession","Symbol","kSnapshotTime","kSnapshotEnabled","kPinnedConnection","kTxnNumberIncrement","ClientSession","mongo_types_1","constructor","topology","sessionPool","options","clientOptions","error_1","ServerSessionPool","snapshot","causalConsistency","hasEnded","explicit","acquire","supports","clusterTime","initialClusterTime","operationTime","undefined","owner","defaultTransactionOptions","Object","assign","transaction","transactions_1","id","_b","serverSession","snapshotEnabled","loadBalanced","description","type","common_1","LoadBalanced","pinnedConnection","pin","conn","TypeError","emit","constants_1","inTransaction","metrics_1","TXN","CURSOR","unpin","maybeClearPinnedConnection","unpinServer","isPinned","endSession","callback","finalOptions","force","done","completeEndSession","release","defineProperty","value","ServerSession","clone","abortTransaction","err","advanceOperationTime","greaterThan","advanceClusterTime","_bsontype","signature","hash","keyId","_c","equals","session","buffer","incrementTransactionNumber","isActive","startTransaction","isCommitted","topologyMaxWireVersion","readConcern","_d","writeConcern","_e","_f","_g","readPreference","_h","_j","_k","maxCommitTimeMS","_l","transition","STARTING_TRANSACTION","commitTransaction","cb","endTransaction","toBSON","withTransaction","fn","startTime","attemptTransaction","exports","MAX_WITH_TRANSACTION_TIMEOUT","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","isUnknownTransactionCommitResult","isNonDeterministicWriteConcernError","codeName","has","isMaxTimeMSExpiredError","code","UnsatisfiableWriteConcern","UnknownReplWriteConcern","error","hasErrorLabel","TransientTransactionError","servers","Array","from","s","values","loadBalancer","pool","checkIn","state","NO_TRANSACTION","forceClear","clear","serviceId","MaxTimeMSExpired","writeConcernError","attemptTransactionCommit","catch","UnknownTransactionCommitResult","USER_EXPLICIT_TXN_END_STATES","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","Promise","promise_provider_1","get","promise","reject","then","maybeRetryOrThrow","addErrorLabel","commandName","txnState","TRANSACTION_COMMITTED_EMPTY","command","w","wtimeout","maxTimeMS","commandHandler","result","RetryableWriteError","recoveryToken","run_command_1","read_preference_1","primary","bypassPinningCheck","bson_1","SUBTYPE_UUID","lastUse","txnNumber","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","arrayBuffer","ArrayBuffer","idBytes","Buffer","set","sub_type","setPrototypeOf","prototype","sessions","endAllPooledSessions","length","endSessions","map","logicalSessionTimeoutMinutes","shift","unshift","pooledSession","pop","applySession","lsid","inTxnOrTxnCommand","isRetryableWrite","willRetryWrite","fromNumber","afterClusterTime","level","read_concern_1","atClusterTime","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","cursor"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\sessions.ts"],"sourcesContent":["import { Binary, Document, Long, Timestamp } from './bson';\nimport type { CommandOptions, Connection } from './cmap/connection';\nimport { ConnectionPoolMetrics } from './cmap/metrics';\nimport { isSharded } from './cmap/wire_protocol/shared';\nimport { PINNED, UNPINNED } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport {\n  AnyError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoWriteConcernError\n} from './error';\nimport type { MongoOptions } from './mongo_client';\nimport { TypedEventEmitter } from './mongo_types';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcernLevel } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { _advanceClusterTime, ClusterTime, TopologyType } from './sdam/common';\nimport type { Topology } from './sdam/topology';\nimport { isTransactionCommand, Transaction, TransactionOptions, TxnState } from './transactions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  commandSupportsReadConcern,\n  isPromiseLike,\n  maxWireVersion,\n  maybePromise,\n  now,\n  uuidV4\n} from './utils';\n\nconst minWireVersionForShardedTransactions = 8;\n\n/** @public */\nexport interface ClientSessionOptions {\n  /** Whether causal consistency should be enabled on this session */\n  causalConsistency?: boolean;\n  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n  snapshot?: boolean;\n  /** The default TransactionOptions to use for transactions started on this session. */\n  defaultTransactionOptions?: TransactionOptions;\n\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  /** @internal */\n  explicit?: boolean;\n  /** @internal */\n  initialClusterTime?: ClusterTime;\n}\n\n/** @public */\nexport type WithTransactionCallback<T = void> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport type ClientSessionEvents = {\n  ended(session: ClientSession): void;\n};\n\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n\n/** @public */\nexport interface EndSessionOptions {\n  /**\n   * An optional error which caused the call to end this session\n   * @internal\n   */\n  error?: AnyError;\n  force?: boolean;\n  forceClear?: boolean;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport class ClientSession extends TypedEventEmitter<ClientSessionEvents> {\n  /** @internal */\n  topology: Topology;\n  /** @internal */\n  sessionPool: ServerSessionPool;\n  hasEnded: boolean;\n  clientOptions?: MongoOptions;\n  supports: { causalConsistency: boolean };\n  clusterTime?: ClusterTime;\n  operationTime?: Timestamp;\n  explicit: boolean;\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  defaultTransactionOptions: TransactionOptions;\n  transaction: Transaction;\n  /** @internal */\n  [kServerSession]: ServerSession | null;\n  /** @internal */\n  [kSnapshotTime]?: Timestamp;\n  /** @internal */\n  [kSnapshotEnabled] = false;\n  /** @internal */\n  [kPinnedConnection]?: Connection;\n  /** @internal */\n  [kTxnNumberIncrement]: number;\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param topology - The current client's topology (Internal Class)\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(\n    topology: Topology,\n    sessionPool: ServerSessionPool,\n    options: ClientSessionOptions,\n    clientOptions?: MongoOptions\n  ) {\n    super();\n\n    if (topology == null) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new MongoInvalidArgumentError(\n          'Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive'\n        );\n      }\n    }\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /** The server id associated with this session */\n  get id(): ServerSessionId | undefined {\n    return this[kServerSession]?.id;\n  }\n\n  get serverSession(): ServerSession {\n    let serverSession = this[kServerSession];\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n    return serverSession;\n  }\n\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled(): boolean {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced(): boolean {\n    return this.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /** @internal */\n  get pinnedConnection(): Connection | undefined {\n    return this[kPinnedConnection];\n  }\n\n  /** @internal */\n  pin(conn: Connection): void {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(\n      PINNED,\n      this.inTransaction() ? ConnectionPoolMetrics.TXN : ConnectionPoolMetrics.CURSOR\n    );\n  }\n\n  /** @internal */\n  unpin(options?: { force?: boolean; forceClear?: boolean; error?: AnyError }): void {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned(): boolean {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   * @param callback - Optional callback for completion of this operation\n   */\n  endSession(): Promise<void>;\n  endSession(callback: Callback<void>): void;\n  endSession(options: EndSessionOptions): Promise<void>;\n  endSession(options: EndSessionOptions, callback: Callback<void>): void;\n  endSession(\n    options?: EndSessionOptions | Callback<void>,\n    callback?: Callback<void>\n  ): void | Promise<void> {\n    if (typeof options === 'function') (callback = options), (options = {});\n    const finalOptions = { force: true, ...options };\n\n    return maybePromise(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions);\n\n        const serverSession = this[kServerSession];\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Make sure a new serverSession never makes it on to the ClientSession\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession)\n          });\n        }\n\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n\n        // spec indicates that we should ignore all errors for `endSessions`\n        done();\n      };\n\n      if (this.inTransaction()) {\n        // If we've reached endSession and the transaction is still active\n        // by default we abort it\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime: Timestamp): void {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime: ClusterTime): void {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new MongoInvalidArgumentError(\n        'input cluster time \"clusterTime\" property must be a valid BSON Timestamp'\n      );\n    }\n    if (\n      !clusterTime.signature ||\n      clusterTime.signature.hash?._bsontype !== 'Binary' ||\n      (typeof clusterTime.signature.keyId !== 'number' &&\n        clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n    ) {\n      throw new MongoInvalidArgumentError(\n        'input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId'\n      );\n    }\n\n    _advanceClusterTime(this, clusterTime);\n  }\n\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session: ClientSession): boolean {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber(): void {\n    this[kTxnNumberIncrement] += 1;\n  }\n\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction(): boolean {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options?: TransactionOptions): void {\n    if (this[kSnapshotEnabled]) {\n      throw new MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n    if (\n      isSharded(this.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoCompatibilityError(\n        'Transactions are not supported on sharded clusters in MongoDB < 4.2.'\n      );\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new Transaction({\n      readConcern:\n        options?.readConcern ??\n        this.defaultTransactionOptions.readConcern ??\n        this.clientOptions?.readConcern,\n      writeConcern:\n        options?.writeConcern ??\n        this.defaultTransactionOptions.writeConcern ??\n        this.clientOptions?.writeConcern,\n      readPreference:\n        options?.readPreference ??\n        this.defaultTransactionOptions.readPreference ??\n        this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  commitTransaction(): Promise<Document>;\n  commitTransaction(callback: Callback<Document>): void;\n  commitTransaction(callback?: Callback<Document>): Promise<Document> | void {\n    return maybePromise(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  abortTransaction(): Promise<Document>;\n  abortTransaction(callback: Callback<Document>): void;\n  abortTransaction(callback?: Callback<Document>): Promise<Document> | void {\n    return maybePromise(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON(): never {\n    throw new MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param fn - A lambda to run within a transaction\n   * @param options - Optional settings for the transaction\n   */\n  withTransaction<T = void>(\n    fn: WithTransactionCallback<T>,\n    options?: TransactionOptions\n  ): ReturnType<typeof fn> {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime: number, max: number) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err: MongoError) {\n  const isNonDeterministicWriteConcernError =\n    err instanceof MongoServerError &&\n    err.codeName &&\n    NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!isNonDeterministicWriteConcernError &&\n      err.code !== MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n      err.code !== MONGODB_ERROR_CODES.UnknownReplWriteConcern)\n  );\n}\n\nexport function maybeClearPinnedConnection(\n  session: ClientSession,\n  options?: EndSessionOptions\n): void {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n\n  if (\n    session.inTransaction() &&\n    error &&\n    error instanceof MongoError &&\n    error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n  ) {\n    return;\n  }\n\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn) {\n    const servers = Array.from(session.topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(\n        UNPINNED,\n        session.transaction.state !== TxnState.NO_TRANSACTION\n          ? ConnectionPoolMetrics.TXN\n          : ConnectionPoolMetrics.CURSOR\n      );\n\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nfunction isMaxTimeMSExpiredError(err: MongoError) {\n  if (err == null || !(err instanceof MongoServerError)) {\n    return false;\n  }\n\n  return (\n    err.code === MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n    (err.writeConcernError && err.writeConcernError.code === MONGODB_ERROR_CODES.MaxTimeMSExpired)\n  );\n}\n\nfunction attemptTransactionCommit<T>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<T>,\n  options?: TransactionOptions\n): Promise<T> {\n  return session.commitTransaction().catch((err: MongoError) => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set<TxnState>([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session: ClientSession) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction<TSchema>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<TSchema>,\n  options?: TransactionOptions\n): Promise<any> {\n  const Promise = PromiseProvider.get();\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new MongoInvalidArgumentError(\n      'Function provided to `withTransaction` must return a Promise'\n    );\n  }\n\n  return promise.then(\n    () => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    },\n    err => {\n      function maybeRetryOrThrow(err: MongoError): Promise<any> {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel(MongoErrorLabel.TransientTransactionError) &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          err.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n        }\n\n        throw err;\n      }\n\n      if (session.inTransaction()) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    }\n  );\n}\n\nfunction endTransaction(\n  session: ClientSession,\n  commandName: 'abortTransaction' | 'commitTransaction',\n  callback: Callback<Document>\n) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(\n        new MongoTransactionError('Cannot call commitTransaction after calling abortTransaction')\n      );\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(\n        new MongoTransactionError('Cannot call abortTransaction after calling commitTransaction')\n      );\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command: Document = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = { w: session.clientOptions.writeConcern.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(error?: Error, result?: Document) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, { force: false });\n      }\n\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n\n    session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof MongoError) {\n      if (\n        error.hasErrorLabel(MongoErrorLabel.RetryableWriteError) ||\n        error instanceof MongoWriteConcernError ||\n        isMaxTimeMSExpiredError(error)\n      ) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n\n          // per txns spec, must unpin session in this case\n          session.unpin({ error });\n        }\n      } else if (error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({ error });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  executeOperation(\n    session,\n    new RunAdminCommandOperation(undefined, command, {\n      session,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    }),\n    (error, result) => {\n      if (command.abortTransaction) {\n        // always unpin on abort regardless of command outcome\n        session.unpin();\n      }\n\n      if (error instanceof MongoError && error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        if (command.commitTransaction) {\n          // per txns spec, must unpin session in this case\n          session.unpin({ force: true });\n\n          command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n            w: 'majority'\n          });\n        }\n\n        return executeOperation(\n          session,\n          new RunAdminCommandOperation(undefined, command, {\n            session,\n            readPreference: ReadPreference.primary,\n            bypassPinningCheck: true\n          }),\n          commandHandler\n        );\n      }\n\n      commandHandler(error, result);\n    }\n  );\n}\n\n/** @public */\nexport type ServerSessionId = { id: Binary };\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport class ServerSession {\n  id: ServerSessionId;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n\n  /** @internal */\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes: number): boolean {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n  static clone(serverSession: ServerSession): Readonly<ServerSession> {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n\n    const id = new Binary(idBytes, serverSession.id.id.sub_type);\n\n    // Manual prototype construction to avoid modifying the constructor of this class\n    return Object.setPrototypeOf(\n      {\n        id: { id },\n        lastUse: serverSession.lastUse,\n        txnNumber: serverSession.txnNumber,\n        isDirty: serverSession.isDirty\n      },\n      ServerSession.prototype\n    );\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nexport class ServerSessionPool {\n  topology: Topology;\n  sessions: ServerSession[];\n\n  constructor(topology: Topology) {\n    if (topology == null) {\n      throw new MongoRuntimeError('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  /** Ends all sessions in the session pool */\n  endAllPooledSessions(callback?: Callback<void>): void {\n    if (this.sessions.length) {\n      this.topology.endSessions(\n        this.sessions.map((session: ServerSession) => session.id),\n        () => {\n          this.sessions = [];\n          if (typeof callback === 'function') {\n            callback();\n          }\n        }\n      );\n\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire(): ServerSession {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes || 10;\n\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (session && (this.topology.loadBalanced || !session.hasTimedOut(sessionTimeoutMinutes))) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session: ServerSession): void {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    if (this.topology.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nexport function applySession(\n  session: ClientSession,\n  command: Document,\n  options: CommandOptions\n): MongoDriverError | undefined {\n  if (session.hasEnded) {\n    return new MongoExpiredSessionError();\n  }\n\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  const inTxnOrTxnCommand = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    command.txnNumber = Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    if (\n      session.supports.causalConsistency &&\n      session.operationTime &&\n      commandSupportsReadConcern(command, options)\n    ) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || { level: ReadConcernLevel.snapshot };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n      }\n    }\n\n    return;\n  }\n\n  // now attempt to apply transaction-specific sessions data\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n  return;\n}\n\nexport function updateSessionFromResponse(session: ClientSession, document: Document): void {\n  if (document.$clusterTime) {\n    _advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}