{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\n\nconst dns = require(\"dns\");\n\nconst error_1 = require(\"../error\");\n\nconst logger_1 = require(\"../logger\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\n\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n\n}\n\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\n\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    var _a, _b, _c;\n\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = (_a = options.srvMaxHosts) !== null && _a !== void 0 ? _a : 0;\n    this.srvServiceName = (_b = options.srvServiceName) !== null && _b !== void 0 ? _b : 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = (_c = options.heartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 10000;\n    this.logger = new logger_1.Logger('srvPoller', options);\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  schedule() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(`parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`, srvRecord);\n  }\n\n  _poll() {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses = [];\n\n      for (const record of srvRecords) {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      }\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n\n}\n\nexports.SrvPoller = SrvPoller;\n/** @event */\n\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';","map":{"version":3,"mappings":"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","names":["matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","SrvPollingEvent","constructor","srvRecords","hostnames","Set","map","r","utils_1","fromSrvRecord","toString","exports","SrvPoller","mongo_types_1","options","srvHost","error_1","srvMaxHosts","_a","srvServiceName","_b","rescanSrvIntervalMS","heartbeatFrequencyMS","_c","logger","logger_1","haMode","generation","_timeout","undefined","intervalMS","start","schedule","stop","clearTimeout","setTimeout","_poll","success","emit","SRV_RECORD_DISCOVERY","failure","message","obj","warn","parentDomainMismatch","srvRecord","name","port","dns","resolveSrv","err","finalAddresses","record","push","length"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\sdam\\srv_polling.ts"],"sourcesContent":["import * as dns from 'dns';\n\nimport { MongoRuntimeError } from '../error';\nimport { Logger, LoggerOptions } from '../logger';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { HostAddress } from '../utils';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * @internal\n * @category Event\n */\nexport class SrvPollingEvent {\n  srvRecords: dns.SrvRecord[];\n  constructor(srvRecords: dns.SrvRecord[]) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames(): Set<string> {\n    return new Set(this.srvRecords.map(r => HostAddress.fromSrvRecord(r).toString()));\n  }\n}\n\n/** @internal */\nexport interface SrvPollerOptions extends LoggerOptions {\n  srvServiceName: string;\n  srvMaxHosts: number;\n  srvHost: string;\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport type SrvPollerEvents = {\n  srvRecordDiscovery(event: SrvPollingEvent): void;\n};\n\n/** @internal */\nexport class SrvPoller extends TypedEventEmitter<SrvPollerEvents> {\n  srvHost: string;\n  rescanSrvIntervalMS: number;\n  heartbeatFrequencyMS: number;\n  logger: Logger;\n  haMode: boolean;\n  generation: number;\n  srvMaxHosts: number;\n  srvServiceName: string;\n  _timeout?: NodeJS.Timeout;\n\n  /** @event */\n  static readonly SRV_RECORD_DISCOVERY = 'srvRecordDiscovery' as const;\n\n  constructor(options: SrvPollerOptions) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n    this.logger = new Logger('srvPoller', options);\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = undefined;\n  }\n\n  get srvAddress(): string {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS(): number {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start(): void {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  schedule(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(() => this._poll(), this.intervalMS);\n  }\n\n  success(srvRecords: dns.SrvRecord[]): void {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message: string, obj?: NodeJS.ErrnoException): void {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord: dns.SrvRecord): void {\n    this.logger.warn(\n      `parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`,\n      srvRecord\n    );\n  }\n\n  _poll(): void {\n    const generation = this.generation;\n    dns.resolveSrv(this.srvAddress, (err, srvRecords) => {\n      if (generation !== this.generation) {\n        return;\n      }\n\n      if (err) {\n        this.failure('DNS error', err);\n        return;\n      }\n\n      const finalAddresses: dns.SrvRecord[] = [];\n      for (const record of srvRecords) {\n        if (matchesParentDomain(record.name, this.srvHost)) {\n          finalAddresses.push(record);\n        } else {\n          this.parentDomainMismatch(record);\n        }\n      }\n\n      if (!finalAddresses.length) {\n        this.failure('No valid addresses found at host');\n        return;\n      }\n\n      this.success(finalAddresses);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}