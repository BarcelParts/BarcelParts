{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.X509 = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nclass X509 extends auth_provider_1.AuthProvider {\n  prepare(handshakeDoc, authContext, callback) {\n    const {\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    Object.assign(handshakeDoc, {\n      speculativeAuthenticate: x509AuthenticateCommand(credentials)\n    });\n    callback(undefined, handshakeDoc);\n  }\n\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    const response = authContext.response;\n\n    if (response && response.speculativeAuthenticate) {\n      return callback();\n    }\n\n    connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined, callback);\n  }\n\n}\n\nexports.X509 = X509;\n\nfunction x509AuthenticateCommand(credentials) {\n  const command = {\n    authenticate: 1,\n    mechanism: 'MONGODB-X509'\n  };\n\n  if (credentials.username) {\n    command.user = credentials.username;\n  }\n\n  return command;\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAEA;;AAGA,MAAaA,IAAb,SAA0BC,4BAA1B,CAAsC;AAC3BC,SAAO,CACdC,YADc,EAEdC,WAFc,EAGdC,QAHc,EAGI;AAElB,UAAM;AAAEC;AAAF,QAAkBF,WAAxB;;AACA,QAAI,CAACE,WAAL,EAAkB;AAChB,aAAOD,QAAQ,CAAC,IAAIE,oCAAJ,CAAiC,uCAAjC,CAAD,CAAf;AACD;;AACDC,UAAM,CAACC,MAAP,CAAcN,YAAd,EAA4B;AAC1BO,6BAAuB,EAAEC,uBAAuB,CAACL,WAAD;AADtB,KAA5B;AAIAD,YAAQ,CAACO,SAAD,EAAYT,YAAZ,CAAR;AACD;;AAEQU,MAAI,CAACT,WAAD,EAA2BC,QAA3B,EAA6C;AACxD,UAAMS,UAAU,GAAGV,WAAW,CAACU,UAA/B;AACA,UAAMR,WAAW,GAAGF,WAAW,CAACE,WAAhC;;AACA,QAAI,CAACA,WAAL,EAAkB;AAChB,aAAOD,QAAQ,CAAC,IAAIE,oCAAJ,CAAiC,uCAAjC,CAAD,CAAf;AACD;;AACD,UAAMQ,QAAQ,GAAGX,WAAW,CAACW,QAA7B;;AAEA,QAAIA,QAAQ,IAAIA,QAAQ,CAACL,uBAAzB,EAAkD;AAChD,aAAOL,QAAQ,EAAf;AACD;;AAEDS,cAAU,CAACE,OAAX,CACE,gBAAG,gBAAH,CADF,EAEEL,uBAAuB,CAACL,WAAD,CAFzB,EAGEM,SAHF,EAIEP,QAJF;AAMD;;AAnCmC;;AAAtCY;;AAsCA,SAASN,uBAAT,CAAiCL,WAAjC,EAA8D;AAC5D,QAAMU,OAAO,GAAa;AAAEE,gBAAY,EAAE,CAAhB;AAAmBC,aAAS,EAAE;AAA9B,GAA1B;;AACA,MAAIb,WAAW,CAACc,QAAhB,EAA0B;AACxBJ,WAAO,CAACK,IAAR,GAAef,WAAW,CAACc,QAA3B;AACD;;AAED,SAAOJ,OAAP;AACD","names":["X509","auth_provider_1","prepare","handshakeDoc","authContext","callback","credentials","error_1","Object","assign","speculativeAuthenticate","x509AuthenticateCommand","undefined","auth","connection","response","command","exports","authenticate","mechanism","username","user"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\cmap\\auth\\x509.ts"],"sourcesContent":["import type { Document } from '../../bson';\nimport { MongoMissingCredentialsError } from '../../error';\nimport { Callback, ns } from '../../utils';\nimport type { HandshakeDocument } from '../connect';\nimport { AuthContext, AuthProvider } from './auth_provider';\nimport type { MongoCredentials } from './mongo_credentials';\n\nexport class X509 extends AuthProvider {\n  override prepare(\n    handshakeDoc: HandshakeDocument,\n    authContext: AuthContext,\n    callback: Callback\n  ): void {\n    const { credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    Object.assign(handshakeDoc, {\n      speculativeAuthenticate: x509AuthenticateCommand(credentials)\n    });\n\n    callback(undefined, handshakeDoc);\n  }\n\n  override auth(authContext: AuthContext, callback: Callback): void {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      return callback(new MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    const response = authContext.response;\n\n    if (response && response.speculativeAuthenticate) {\n      return callback();\n    }\n\n    connection.command(\n      ns('$external.$cmd'),\n      x509AuthenticateCommand(credentials),\n      undefined,\n      callback\n    );\n  }\n}\n\nfunction x509AuthenticateCommand(credentials: MongoCredentials) {\n  const command: Document = { authenticate: 1, mechanism: 'MONGODB-X509' };\n  if (credentials.username) {\n    command.user = credentials.username;\n  }\n\n  return command;\n}\n"]},"metadata":{},"sourceType":"script"}