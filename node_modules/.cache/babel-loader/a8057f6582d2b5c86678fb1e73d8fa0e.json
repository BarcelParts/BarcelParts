{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst list_databases_1 = require(\"./operations/list_databases\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\n\n\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db, new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n  }\n\n  buildInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n\n  serverInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n\n  serverStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      serverStatus: 1\n    }, options, callback);\n  }\n\n  ping(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      ping: 1\n    }, options, callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n  }\n\n  validateCollection(collectionName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n  }\n\n  listDatabases(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n  }\n\n  replSetGetStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      replSetGetStatus: 1\n    }, options, callback);\n  }\n\n}\n\nexports.Admin = Admin;","map":{"version":3,"mappings":"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","names":["Admin","constructor","db","s","command","options","callback","Object","assign","dbName","run_command_1","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","password","undefined","add_user_1","removeUser","remove_user_1","validateCollection","collectionName","validate_collection_1","listDatabases","list_databases_1","replSetGetStatus","exports"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\admin.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { Db } from './db';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport type { CommandOperationOptions } from './operations/command';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  ListDatabasesOperation,\n  ListDatabasesOptions,\n  ListDatabasesResult\n} from './operations/list_databases';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport {\n  ValidateCollectionOperation,\n  ValidateCollectionOptions\n} from './operations/validate_collection';\nimport type { Callback } from './utils';\n\n/** @internal */\nexport interface AdminPrivate {\n  db: Db;\n}\n\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\nexport class Admin {\n  /** @internal */\n  s: AdminPrivate;\n\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db: Db) {\n    this.s = { db };\n  }\n\n  /**\n   * Execute a command\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  command(command: Document): Promise<Document>;\n  command(command: Document, callback: Callback<Document>): void;\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\n  command(\n    command: Document,\n    options?: RunCommandOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({ dbName: 'admin' }, options);\n\n    return executeOperation(\n      this.s.db,\n      new RunCommandOperation(this.s.db, command, options),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  buildInfo(): Promise<Document>;\n  buildInfo(callback: Callback<Document>): void;\n  buildInfo(options: CommandOperationOptions): Promise<Document>;\n  buildInfo(options: CommandOperationOptions, callback: Callback<Document>): void;\n  buildInfo(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ buildinfo: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  serverInfo(): Promise<Document>;\n  serverInfo(callback: Callback<Document>): void;\n  serverInfo(options: CommandOperationOptions): Promise<Document>;\n  serverInfo(options: CommandOperationOptions, callback: Callback<Document>): void;\n  serverInfo(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ buildinfo: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  serverStatus(): Promise<Document>;\n  serverStatus(callback: Callback<Document>): void;\n  serverStatus(options: CommandOperationOptions): Promise<Document>;\n  serverStatus(options: CommandOperationOptions, callback: Callback<Document>): void;\n  serverStatus(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ serverStatus: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  ping(): Promise<Document>;\n  ping(callback: Callback<Document>): void;\n  ping(options: CommandOperationOptions): Promise<Document>;\n  ping(options: CommandOperationOptions, callback: Callback<Document>): void;\n  ping(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ ping: 1 }, options, callback as Callback<Document>);\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param password - An optional password for the new user\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  addUser(username: string): Promise<Document>;\n  addUser(username: string, callback: Callback<Document>): void;\n  addUser(username: string, password: string): Promise<Document>;\n  addUser(username: string, password: string, callback: Callback<Document>): void;\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\n  addUser(\n    username: string,\n    password: string,\n    options: AddUserOptions,\n    callback: Callback<Document>\n  ): void;\n  addUser(\n    username: string,\n    password?: string | AddUserOptions | Callback<Document>,\n    options?: AddUserOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof password === 'function') {\n      (callback = password), (password = undefined), (options = {});\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        (callback = options), (options = password), (password = undefined);\n      } else {\n        (options = password), (callback = undefined), (password = undefined);\n      }\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    options = Object.assign({ dbName: 'admin' }, options);\n\n    return executeOperation(\n      this.s.db,\n      new AddUserOperation(this.s.db, username, password, options),\n      callback\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  removeUser(username: string): Promise<boolean>;\n  removeUser(username: string, callback: Callback<boolean>): void;\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\n  removeUser(\n    username: string,\n    options?: RemoveUserOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({ dbName: 'admin' }, options);\n\n    return executeOperation(\n      this.s.db,\n      new RemoveUserOperation(this.s.db, username, options),\n      callback\n    );\n  }\n\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  validateCollection(collectionName: string): Promise<Document>;\n  validateCollection(collectionName: string, callback: Callback<Document>): void;\n  validateCollection(collectionName: string, options: ValidateCollectionOptions): Promise<Document>;\n  validateCollection(\n    collectionName: string,\n    options: ValidateCollectionOptions,\n    callback: Callback<Document>\n  ): void;\n  validateCollection(\n    collectionName: string,\n    options?: ValidateCollectionOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      this.s.db,\n      new ValidateCollectionOperation(this, collectionName, options),\n      callback\n    );\n  }\n\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  listDatabases(): Promise<ListDatabasesResult>;\n  listDatabases(callback: Callback<ListDatabasesResult>): void;\n  listDatabases(options: ListDatabasesOptions): Promise<ListDatabasesResult>;\n  listDatabases(options: ListDatabasesOptions, callback: Callback<ListDatabasesResult>): void;\n  listDatabases(\n    options?: ListDatabasesOptions | Callback<ListDatabasesResult>,\n    callback?: Callback<ListDatabasesResult>\n  ): Promise<ListDatabasesResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(this.s.db, new ListDatabasesOperation(this.s.db, options), callback);\n  }\n\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  replSetGetStatus(): Promise<Document>;\n  replSetGetStatus(callback: Callback<Document>): void;\n  replSetGetStatus(options: CommandOperationOptions): Promise<Document>;\n  replSetGetStatus(options: CommandOperationOptions, callback: Callback<Document>): void;\n  replSetGetStatus(\n    options?: CommandOperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    return this.command({ replSetGetStatus: 1 }, options, callback as Callback<Document>);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}