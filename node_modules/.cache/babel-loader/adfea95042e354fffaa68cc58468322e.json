{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diogo\\\\Documents\\\\GitHub\\\\BarcelParts\\\\src\\\\Services\\\\login.js\";\nimport { GoogleLogin } from 'react-google-login';\nimport ProductDataService from \"../Services/Barcelparts.js\";\nimport React from \"react\";\nimport http from \"../http-common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\n\nfunction Login() {\n  const verifyIfUserExists = userData => {\n    ProductDataService.findUser(userData).then(response => {\n      //Console log for debugging and developing\n      console.log(response.data);\n\n      if (response.data == null) {\n        //if the user doesn't exist, we create it\n        ProductDataService.createUser(userData);\n      }\n    }) //If there is an error catches it and displays it in the console\n    .catch(e => {\n      console.log(e);\n    });\n  };\n\n  let decodedUser;\n\n  const onSuccess = res => {\n    //we receive a token that we need to validate/decode to obtain the user info\n    console.log(\"received token = \" + res.tokenId); // TODO this should be done by the server I believe, not in the frontend\n    //send the token to google to be decoded\n\n    http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=` + res.tokenId).then(response => {\n      decodedUser = response.data;\n      console.log(\"here we go\");\n      console.log(decodedUser);\n    }); //use the decoded token to get the user info\n\n    var userData = {\n      \"_id\": decodedUser.profileObj.googleId,\n      \"User_FirstName\": decodedUser.profileObj.givenName,\n      \"User_LastName\": decodedUser.profileObj.familyName,\n      \"User_Image\": decodedUser.profileObj.imageUrl,\n      \"Email\": decodedUser.profileObj.email\n    };\n    verifyIfUserExists(userData);\n    console.log(\"LOGIN SUCCESS! CUrrent user: \", decodedUser.profileObj);\n\n    var CryptoJS = require(\"crypto-js\"); //Encrypt THE COOKIE and add it to the browser\n\n\n    document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(decodedUser.profileObj.googleId, 'secret key 123').toString(); //window.location.href = \"/\";\n  };\n\n  const onFailure = res => {\n    console.log(\"LOGIN FAILED! res: \", res);\n    alert(\"LOGIN FAILED! \\n Please try again... \");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: clientId,\n      buttonText: \"Login\",\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      cookiePolicy: 'single_host_origin',\n      responseType: \"id_token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Diogo/Documents/GitHub/BarcelParts/src/Services/login.js"],"names":["GoogleLogin","ProductDataService","React","http","clientId","Login","verifyIfUserExists","userData","findUser","then","response","console","log","data","createUser","catch","e","decodedUser","onSuccess","res","tokenId","get","profileObj","googleId","givenName","familyName","imageUrl","email","CryptoJS","require","document","cookie","AES","encrypt","toString","onFailure","alert"],"mappings":";AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,QAAQ,GAAG,2EAAjB;;AAEA,SAASC,KAAT,GAAiB;AAEb,QAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrCN,IAAAA,kBAAkB,CAACO,QAAnB,CAA4BD,QAA5B,EACKE,IADL,CACUC,QAAQ,IAAI;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;;AACA,UAAIH,QAAQ,CAACG,IAAT,IAAiB,IAArB,EAA2B;AAAe;AACtCZ,QAAAA,kBAAkB,CAACa,UAAnB,CAA8BP,QAA9B;AACH;AACJ,KAPL,EASI;AATJ,KAUKQ,KAVL,CAUWC,CAAC,IAAI;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AACH,KAZL;AAaH,GAdD;;AAgBA,MAAIC,WAAJ;;AAEA,QAAMC,SAAS,GAAIC,GAAD,IAAS;AAIvB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBO,GAAG,CAACC,OAAtC,EALuB,CAOvB;AACA;;AACAjB,IAAAA,IAAI,CAACkB,GAAL,CAAU,0DAAD,GAA4DF,GAAG,CAACC,OAAzE,EACCX,IADD,CACMC,QAAQ,IAAI;AAEdO,MAAAA,WAAW,GAAEP,QAAQ,CAACG,IAAtB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;AAGH,KARD,EATuB,CAmBvB;;AACA,QAAIV,QAAQ,GAAG;AACX,aAAOU,WAAW,CAACK,UAAZ,CAAuBC,QADnB;AAEX,wBAAkBN,WAAW,CAACK,UAAZ,CAAuBE,SAF9B;AAGX,uBAAiBP,WAAW,CAACK,UAAZ,CAAuBG,UAH7B;AAIX,oBAAcR,WAAW,CAACK,UAAZ,CAAuBI,QAJ1B;AAKX,eAAST,WAAW,CAACK,UAAZ,CAAuBK;AALrB,KAAf;AAQArB,IAAAA,kBAAkB,CAACC,QAAD,CAAlB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CK,WAAW,CAACK,UAAzD;;AAEA,QAAIM,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB,CA/BuB,CAgCvB;;;AACAC,IAAAA,QAAQ,CAACC,MAAT,GAAkB,kBAAkBH,QAAQ,CAACI,GAAT,CAAaC,OAAb,CAAqBhB,WAAW,CAACK,UAAZ,CAAuBC,QAA5C,EAAsD,gBAAtD,EAAwEW,QAAxE,EAApC,CAjCuB,CAkCvB;AACH,GAnCD;;AAqCA,QAAMC,SAAS,GAAIhB,GAAD,IAAS;AACvBR,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,GAAnC;AACAiB,IAAAA,KAAK,CAAC,uCAAD,CAAL;AAEH,GAJD;;AAMA,sBACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,2BACI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAEhC,QADd;AAEI,MAAA,UAAU,EAAC,OAFf;AAGI,MAAA,SAAS,EAAEc,SAHf;AAII,MAAA,SAAS,EAAEiB,SAJf;AAKI,MAAA,YAAY,EAAE,oBALlB;AAMI,MAAA,YAAY,EAAC;AANjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;KA3EQ9B,K;AA6ET,eAAeA,KAAf","sourcesContent":["import { GoogleLogin } from 'react-google-login';\r\nimport ProductDataService from \"../Services/Barcelparts.js\"\r\nimport React from \"react\";\r\nimport http from \"../http-common\";\r\n\r\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\r\n\r\nfunction Login() {\r\n\r\n    const verifyIfUserExists = (userData) => {\r\n        ProductDataService.findUser(userData)\r\n            .then(response => {\r\n                //Console log for debugging and developing\r\n                console.log(response.data)\r\n                if (response.data == null) {              //if the user doesn't exist, we create it\r\n                    ProductDataService.createUser(userData)\r\n                }\r\n            })\r\n\r\n            //If there is an error catches it and displays it in the console\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    let decodedUser;\r\n\r\n    const onSuccess = (res) => {\r\n\r\n        \r\n\r\n        //we receive a token that we need to validate/decode to obtain the user info\r\n        console.log(\"received token = \" + res.tokenId)\r\n\r\n        // TODO this should be done by the server I believe, not in the frontend\r\n        //send the token to google to be decoded\r\n        http.get(`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=`+ res.tokenId)\r\n        .then(response => {\r\n            \r\n            decodedUser= response.data\r\n            console.log(\"here we go\")\r\n            console.log(decodedUser)\r\n\r\n            \r\n        })\r\n\r\n        //use the decoded token to get the user info\r\n        var userData = {\r\n            \"_id\": decodedUser.profileObj.googleId,\r\n            \"User_FirstName\": decodedUser.profileObj.givenName,\r\n            \"User_LastName\": decodedUser.profileObj.familyName,\r\n            \"User_Image\": decodedUser.profileObj.imageUrl,\r\n            \"Email\": decodedUser.profileObj.email\r\n        }\r\n\r\n        verifyIfUserExists(userData);\r\n        console.log(\"LOGIN SUCCESS! CUrrent user: \", decodedUser.profileObj)\r\n\r\n        var CryptoJS = require(\"crypto-js\");\r\n        //Encrypt THE COOKIE and add it to the browser\r\n        document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(decodedUser.profileObj.googleId, 'secret key 123').toString();\r\n        //window.location.href = \"/\";\r\n    }\r\n\r\n    const onFailure = (res) => {\r\n        console.log(\"LOGIN FAILED! res: \", res)\r\n        alert(\"LOGIN FAILED! \\n Please try again... \")\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"signInButton\">\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                buttonText=\"Login\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n                responseType='id_token'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}