{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst delete_1 = require(\"../operations/delete\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst insert_1 = require(\"../operations/insert\");\n\nconst operation_1 = require(\"../operations/operation\");\n\nconst update_1 = require(\"../operations/update\");\n\nconst promise_provider_1 = require(\"../promise_provider\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\n\n\nconst kServerError = Symbol('serverError');\n/** @public */\n\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\r\n * Keeps the state of a unordered batch so we can rewrite the results\r\n * correctly after command execution\r\n *\r\n * @public\r\n */\n\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n\n}\n\nexports.Batch = Batch;\n/**\r\n * @public\r\n * The result of a bulk write.\r\n */\n\nclass BulkWriteResult {\n  /**\r\n   * Create a new BulkWriteResult instance\r\n   * @internal\r\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    var _a;\n\n    return (_a = this.result.nInserted) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    var _a;\n\n    return (_a = this.result.nMatched) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    var _a;\n\n    return (_a = this.result.nModified) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    var _a;\n\n    return (_a = this.result.nRemoved) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    var _a;\n\n    return (_a = this.result.upserted.length) !== null && _a !== void 0 ? _a : 0;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    var _a;\n\n    const upserted = {};\n\n    for (const doc of (_a = this.result.upserted) !== null && _a !== void 0 ? _a : []) {\n      upserted[doc.index] = doc._id;\n    }\n\n    return upserted;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    var _a;\n\n    const inserted = {};\n\n    for (const doc of (_a = this.result.insertedIds) !== null && _a !== void 0 ? _a : []) {\n      inserted[doc.index] = doc._id;\n    }\n\n    return inserted;\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n\n\n  get ok() {\n    return this.result.ok;\n  }\n  /** The number of inserted documents */\n\n\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /** Number of upserted documents */\n\n\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /** Number of matched documents */\n\n\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /** Number of documents updated physically on disk */\n\n\n  get nModified() {\n    return this.result.nModified;\n  }\n  /** Number of removed documents */\n\n\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /** Returns an array of all inserted ids */\n\n\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Returns an array of all upserted ids */\n\n\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n\n\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n\n\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n\n\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n\n\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n\n\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n\n\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve lastOp if available */\n\n\n  getLastOp() {\n    return this.result.opTime;\n  }\n  /** Retrieve the write concern error if one exists */\n\n\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg; // TODO: Something better\n\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n\n  toJSON() {\n    return this.result;\n  }\n\n  toString() {\n    return `BulkWriteResult(${this.toJSON()})`;\n  }\n\n  isOk() {\n    return this.result.ok === 1;\n  }\n\n}\n\nexports.BulkWriteResult = BulkWriteResult;\n/**\r\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\r\n * @public\r\n * @category Error\r\n */\n\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n\n\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n\n\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n\n\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\n\n\n  get err() {\n    return this[kServerError];\n  }\n\n  toJSON() {\n    return this[kServerError];\n  }\n\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n\n}\n\nexports.WriteConcernError = WriteConcernError;\n/**\r\n * An error that occurred during a BulkWrite on the server.\r\n * @public\r\n * @category Error\r\n */\n\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n\n\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n\n\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n\n\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n\n\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n\n\n  getOperation() {\n    return this.err.op;\n  }\n\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n\n}\n\nexports.WriteError = WriteError;\n/** Converts the number to a Long or returns it. */\n\nfunction longOrConvert(value) {\n  return typeof value === 'number' ? bson_1.Long.fromNumber(value) : value;\n}\n/** Merges results into shared data structure */\n\n\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  } // Do we have a top level error stop processing and return\n\n\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  } // The server write command specification states that lastOp is an optional\n  // mongod only field that has a type of timestamp. Across various scarce specs\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\n  // \"t\" field with Timestamp and Long as their types respectively.\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\n  // specifications or the bulk write spec, so we should probably just keep its\n  // value consistent since it seems to vary.\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\n\n\n  if (result.opTime || result.lastOp) {\n    let opTime = result.lastOp || result.opTime; // If the opTime is a Timestamp, convert it to a consistent format to be\n    // able to compare easily. Converting to the object from a timestamp is\n    // much more straightforward than the other direction.\n\n    if (opTime._bsontype === 'Timestamp') {\n      opTime = {\n        ts: opTime,\n        t: bson_1.Long.ZERO\n      };\n    } // If there's no lastOp, just set it.\n\n\n    if (!bulkResult.opTime) {\n      bulkResult.opTime = opTime;\n    } else {\n      // First compare the ts values and set if the opTimeTS value is greater.\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\n      const opTimeTS = longOrConvert(opTime.ts);\n\n      if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.opTime = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        // If the ts values are equal, then compare using the t values.\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\n        const opTimeT = longOrConvert(opTime.t);\n\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.opTime = opTime;\n        }\n      }\n    }\n  } // If we have an insert Batch type\n\n\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  } // If we have an insert Batch type\n\n\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0; // We have an array of upserted values, we need to rewrite the indexes\n\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  } // If we have an update Batch type\n\n\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nexports.mergeBatchResults = mergeBatchResults;\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    } // Merge the results together\n\n\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n\n    if (mergeResult != null) {\n      return callback(undefined, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return; // Execute the next command in line\n\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, { ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  } // Set an operationIf if provided\n\n\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  } // Is the checkKeys option disabled\n\n\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  var _a, _b;\n\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: (_a = err.result) === null || _a === void 0 ? void 0 : _a.writeConcernError.errmsg,\n    code: (_b = err.result) === null || _b === void 0 ? void 0 : _b.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\r\n * An error indicating an unsuccessful Bulk Write\r\n * @public\r\n * @category Error\r\n */\n\n\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    var _a;\n\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = (_a = error.writeErrors) !== null && _a !== void 0 ? _a : [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n\n}\n\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\r\n * A builder object that is returned from {@link BulkOperationBase#find}.\r\n * Is used to build a write operation that involves a query filter.\r\n *\r\n * @public\r\n */\n\nclass FindOperators {\n  /**\r\n   * Creates a new FindOperators object.\r\n   * @internal\r\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n\n\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n\n\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n\n\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n\n\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n\n\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n\n\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n\n\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n\n\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n}\n\nexports.FindOperators = FindOperators;\n/**\r\n * TODO(NODE-4063)\r\n * BulkWrites merge complexity is implemented in executeCommands\r\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\r\n * We would like this logic to simply live inside the BulkWriteOperation class\r\n * @internal\r\n */\n\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n\n}\n/** @public */\n\n\nclass BulkOperationBase {\n  /**\r\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\r\n   * @internal\r\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options; // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n\n    const namespace = collection.s.namespace; // Used to mark operation as executed\n\n    const executed = false; // Current item\n\n    const currentOp = undefined; // Set max byte size\n\n    const hello = topology.lastHello(); // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000; // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2; // Final options for retryable writes\n\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db); // Final results\n\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    }; // Internal state\n\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    }; // bypass Validation\n\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\r\n   * Add a single insert document to the bulk operation\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Adds three inserts to the bulkOp.\r\n   * bulkOp\r\n   *   .insert({ a: 1 })\r\n   *   .insert({ b: 2 })\r\n   *   .insert({ c: 3 });\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\n\n\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\r\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\r\n   * Returns a builder object used to complete the definition of the operation.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Add an updateOne to the bulkOp\r\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\r\n   *\r\n   * // Add an updateMany to the bulkOp\r\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\r\n   *\r\n   * // Add an upsert\r\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\r\n   *\r\n   * // Add a deletion\r\n   * bulkOp.find({ g: 7 }).deleteOne();\r\n   *\r\n   * // Add a multi deletion\r\n   * bulkOp.find({ h: 8 }).delete();\r\n   *\r\n   * // Add a replaceOne\r\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\r\n   *\r\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\r\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\r\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\r\n   * ]);\r\n   *\r\n   * // All of the ops will now be executed\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\n\n\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    } // Save a current selector\n\n\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n\n\n  raw(op) {\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne,\n          multi: false\n        });\n\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, { ...op.updateOne,\n          multi: false\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, { ...op.updateMany,\n          multi: true\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne,\n        limit: 1\n      }));\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany,\n        limit: 0\n      }));\n    } // otherwise an unknown operation was provided\n\n\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get batches() {\n    const batches = [...this.s.batches];\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n\n    return batches;\n  }\n\n  execute(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.executed) {\n      return handleEarlyError(new error_1.MongoBatchReExecutionError(), callback);\n    }\n\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    } // If we have current batch\n\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    } // If we have no operations in the bulk raise an error\n\n\n    if (this.s.batches.length === 0) {\n      const emptyBatchError = new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n      return handleEarlyError(emptyBatchError, callback);\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return (0, execute_operation_1.executeOperation)(this.s.collection, operation, callback);\n  }\n  /**\r\n   * Handles the write error before executing commands\r\n   * @internal\r\n   */\n\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n\n  get() {\n    return this.s.currentIndex;\n  }\n\n});\n/** helper function to assist with promiseOrCallback behavior */\n\nfunction handleEarlyError(err, callback) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n\n  if (typeof callback === 'function') {\n    callback(err);\n    return;\n  }\n\n  return Promise.reject(err);\n}\n\nfunction shouldForceServerObjectId(bulkOperation) {\n  var _a, _b;\n\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof ((_a = bulkOperation.s.collection.s.db.options) === null || _a === void 0 ? void 0 : _a.forceServerObjectId) === 'boolean') {\n    return (_b = bulkOperation.s.collection.s.db.options) === null || _b === void 0 ? void 0 : _b.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"mappings":"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","names":["kServerError","Symbol","exports","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","bulkResult","result","insertedCount","nInserted","_a","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","doc","index","_id","insertedIds","inserted","ok","nUpserted","getInsertedIds","getUpsertedIds","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getLastOp","opTime","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","error_1","WriteConcernFailed","toJSON","toString","isOk","error","errInfo","WriteError","getOperation","op","JSON","stringify","longOrConvert","value","bson_1","fromNumber","mergeBatchResults","batch","writeError","message","push","lastOp","_bsontype","ts","t","ZERO","lastOpTS","opTimeTS","greaterThan","equals","lastOpT","opTimeT","isInsertBatch","n","isDeleteBatch","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","mergeResult","handleWriteError","finalOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","collection","insert_1","namespace","update_1","delete_1","_b","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","selector","updateOne","replaceOne","replacement","deleteOne","delete","upsert","collation","arrayFilters","BulkWriteShimOperation","operation_1","execute","server","session","BulkOperationBase","topology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","db","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","write_concern_1","fromOptions","bsonOptions","insert","document","shouldForceServerObjectId","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","handleEarlyError","emptyBatchError","operation","msg","defineProperty","prototype","enumerable","get","Promise","promise_provider_1","reject","bulkOp"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import {\r\n  BSONSerializeOptions,\r\n  Document,\r\n  Long,\r\n  ObjectId,\r\n  resolveBSONOptions,\r\n  Timestamp\r\n} from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport {\r\n  AnyError,\r\n  MongoBatchReExecutionError,\r\n  MONGODB_ERROR_CODES,\r\n  MongoInvalidArgumentError,\r\n  MongoServerError,\r\n  MongoWriteConcernError\r\n} from '../error';\r\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\r\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\r\nimport { DeleteOperation, DeleteStatement, makeDeleteStatement } from '../operations/delete';\r\nimport { executeOperation } from '../operations/execute_operation';\r\nimport { InsertOperation } from '../operations/insert';\r\nimport { AbstractOperation, Hint } from '../operations/operation';\r\nimport { makeUpdateStatement, UpdateOperation, UpdateStatement } from '../operations/update';\r\nimport { PromiseProvider } from '../promise_provider';\r\nimport type { Server } from '../sdam/server';\r\nimport type { Topology } from '../sdam/topology';\r\nimport type { ClientSession } from '../sessions';\r\nimport {\r\n  applyRetryableWrites,\r\n  Callback,\r\n  getTopology,\r\n  hasAtomicOperators,\r\n  MongoDBNamespace,\r\n  resolveOptions\r\n} from '../utils';\r\nimport { WriteConcern } from '../write_concern';\r\n\r\n/** @internal */\r\nconst kServerError = Symbol('serverError');\r\n\r\n/** @public */\r\nexport const BatchType = Object.freeze({\r\n  INSERT: 1,\r\n  UPDATE: 2,\r\n  DELETE: 3\r\n} as const);\r\n\r\n/** @public */\r\nexport type BatchType = typeof BatchType[keyof typeof BatchType];\r\n\r\n/** @public */\r\nexport interface InsertOneModel<TSchema extends Document = Document> {\r\n  /** The document to insert. */\r\n  document: OptionalId<TSchema>;\r\n}\r\n\r\n/** @public */\r\nexport interface DeleteOneModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the deleted documents. */\r\n  filter: Filter<TSchema>;\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n}\r\n\r\n/** @public */\r\nexport interface DeleteManyModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the deleted documents. */\r\n  filter: Filter<TSchema>;\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n}\r\n\r\n/** @public */\r\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the replaced document. */\r\n  filter: Filter<TSchema>;\r\n  /** The document with which to replace the matched document. */\r\n  replacement: WithoutId<TSchema>;\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query. */\r\n  upsert?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateOneModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the updated documents. */\r\n  filter: Filter<TSchema>;\r\n  /** A document or pipeline containing update operators. */\r\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\r\n  /** A set of filters specifying to which array elements an update should apply. */\r\n  arrayFilters?: Document[];\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query. */\r\n  upsert?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateManyModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the updated documents. */\r\n  filter: Filter<TSchema>;\r\n  /** A document or pipeline containing update operators. */\r\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\r\n  /** A set of filters specifying to which array elements an update should apply. */\r\n  arrayFilters?: Document[];\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query. */\r\n  upsert?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\r\n  | { insertOne: InsertOneModel<TSchema> }\r\n  | { replaceOne: ReplaceOneModel<TSchema> }\r\n  | { updateOne: UpdateOneModel<TSchema> }\r\n  | { updateMany: UpdateManyModel<TSchema> }\r\n  | { deleteOne: DeleteOneModel<TSchema> }\r\n  | { deleteMany: DeleteManyModel<TSchema> };\r\n\r\n/** @public */\r\nexport interface BulkResult {\r\n  ok: number;\r\n  writeErrors: WriteError[];\r\n  writeConcernErrors: WriteConcernError[];\r\n  insertedIds: Document[];\r\n  nInserted: number;\r\n  nUpserted: number;\r\n  nMatched: number;\r\n  nModified: number;\r\n  nRemoved: number;\r\n  upserted: Document[];\r\n  opTime?: Document;\r\n}\r\n\r\n/**\r\n * Keeps the state of a unordered batch so we can rewrite the results\r\n * correctly after command execution\r\n *\r\n * @public\r\n */\r\nexport class Batch<T = Document> {\r\n  originalZeroIndex: number;\r\n  currentIndex: number;\r\n  originalIndexes: number[];\r\n  batchType: BatchType;\r\n  operations: T[];\r\n  size: number;\r\n  sizeBytes: number;\r\n\r\n  constructor(batchType: BatchType, originalZeroIndex: number) {\r\n    this.originalZeroIndex = originalZeroIndex;\r\n    this.currentIndex = 0;\r\n    this.originalIndexes = [];\r\n    this.batchType = batchType;\r\n    this.operations = [];\r\n    this.size = 0;\r\n    this.sizeBytes = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n * The result of a bulk write.\r\n */\r\nexport class BulkWriteResult {\r\n  result: BulkResult;\r\n\r\n  /**\r\n   * Create a new BulkWriteResult instance\r\n   * @internal\r\n   */\r\n  constructor(bulkResult: BulkResult) {\r\n    this.result = bulkResult;\r\n  }\r\n\r\n  /** Number of documents inserted. */\r\n  get insertedCount(): number {\r\n    return this.result.nInserted ?? 0;\r\n  }\r\n  /** Number of documents matched for update. */\r\n  get matchedCount(): number {\r\n    return this.result.nMatched ?? 0;\r\n  }\r\n  /** Number of documents modified. */\r\n  get modifiedCount(): number {\r\n    return this.result.nModified ?? 0;\r\n  }\r\n  /** Number of documents deleted. */\r\n  get deletedCount(): number {\r\n    return this.result.nRemoved ?? 0;\r\n  }\r\n  /** Number of documents upserted. */\r\n  get upsertedCount(): number {\r\n    return this.result.upserted.length ?? 0;\r\n  }\r\n\r\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\r\n  get upsertedIds(): { [key: number]: any } {\r\n    const upserted: { [index: number]: any } = {};\r\n    for (const doc of this.result.upserted ?? []) {\r\n      upserted[doc.index] = doc._id;\r\n    }\r\n    return upserted;\r\n  }\r\n\r\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\r\n  get insertedIds(): { [key: number]: any } {\r\n    const inserted: { [index: number]: any } = {};\r\n    for (const doc of this.result.insertedIds ?? []) {\r\n      inserted[doc.index] = doc._id;\r\n    }\r\n    return inserted;\r\n  }\r\n\r\n  /** Evaluates to true if the bulk operation correctly executes */\r\n  get ok(): number {\r\n    return this.result.ok;\r\n  }\r\n\r\n  /** The number of inserted documents */\r\n  get nInserted(): number {\r\n    return this.result.nInserted;\r\n  }\r\n\r\n  /** Number of upserted documents */\r\n  get nUpserted(): number {\r\n    return this.result.nUpserted;\r\n  }\r\n\r\n  /** Number of matched documents */\r\n  get nMatched(): number {\r\n    return this.result.nMatched;\r\n  }\r\n\r\n  /** Number of documents updated physically on disk */\r\n  get nModified(): number {\r\n    return this.result.nModified;\r\n  }\r\n\r\n  /** Number of removed documents */\r\n  get nRemoved(): number {\r\n    return this.result.nRemoved;\r\n  }\r\n\r\n  /** Returns an array of all inserted ids */\r\n  getInsertedIds(): Document[] {\r\n    return this.result.insertedIds;\r\n  }\r\n\r\n  /** Returns an array of all upserted ids */\r\n  getUpsertedIds(): Document[] {\r\n    return this.result.upserted;\r\n  }\r\n\r\n  /** Returns the upserted id at the given index */\r\n  getUpsertedIdAt(index: number): Document | undefined {\r\n    return this.result.upserted[index];\r\n  }\r\n\r\n  /** Returns raw internal result */\r\n  getRawResponse(): Document {\r\n    return this.result;\r\n  }\r\n\r\n  /** Returns true if the bulk operation contains a write error */\r\n  hasWriteErrors(): boolean {\r\n    return this.result.writeErrors.length > 0;\r\n  }\r\n\r\n  /** Returns the number of write errors off the bulk operation */\r\n  getWriteErrorCount(): number {\r\n    return this.result.writeErrors.length;\r\n  }\r\n\r\n  /** Returns a specific write error object */\r\n  getWriteErrorAt(index: number): WriteError | undefined {\r\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\r\n  }\r\n\r\n  /** Retrieve all write errors */\r\n  getWriteErrors(): WriteError[] {\r\n    return this.result.writeErrors;\r\n  }\r\n\r\n  /** Retrieve lastOp if available */\r\n  getLastOp(): Document | undefined {\r\n    return this.result.opTime;\r\n  }\r\n\r\n  /** Retrieve the write concern error if one exists */\r\n  getWriteConcernError(): WriteConcernError | undefined {\r\n    if (this.result.writeConcernErrors.length === 0) {\r\n      return;\r\n    } else if (this.result.writeConcernErrors.length === 1) {\r\n      // Return the error\r\n      return this.result.writeConcernErrors[0];\r\n    } else {\r\n      // Combine the errors\r\n      let errmsg = '';\r\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\r\n        const err = this.result.writeConcernErrors[i];\r\n        errmsg = errmsg + err.errmsg;\r\n\r\n        // TODO: Something better\r\n        if (i === 0) errmsg = errmsg + ' and ';\r\n      }\r\n\r\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\r\n    }\r\n  }\r\n\r\n  toJSON(): BulkResult {\r\n    return this.result;\r\n  }\r\n\r\n  toString(): string {\r\n    return `BulkWriteResult(${this.toJSON()})`;\r\n  }\r\n\r\n  isOk(): boolean {\r\n    return this.result.ok === 1;\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface WriteConcernErrorData {\r\n  code: number;\r\n  errmsg: string;\r\n  errInfo?: Document;\r\n}\r\n\r\n/**\r\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\r\n * @public\r\n * @category Error\r\n */\r\nexport class WriteConcernError {\r\n  /** @internal */\r\n  [kServerError]: WriteConcernErrorData;\r\n\r\n  constructor(error: WriteConcernErrorData) {\r\n    this[kServerError] = error;\r\n  }\r\n\r\n  /** Write concern error code. */\r\n  get code(): number | undefined {\r\n    return this[kServerError].code;\r\n  }\r\n\r\n  /** Write concern error message. */\r\n  get errmsg(): string | undefined {\r\n    return this[kServerError].errmsg;\r\n  }\r\n\r\n  /** Write concern error info. */\r\n  get errInfo(): Document | undefined {\r\n    return this[kServerError].errInfo;\r\n  }\r\n\r\n  /** @deprecated The `err` prop that contained a MongoServerError has been deprecated. */\r\n  get err(): WriteConcernErrorData {\r\n    return this[kServerError];\r\n  }\r\n\r\n  toJSON(): WriteConcernErrorData {\r\n    return this[kServerError];\r\n  }\r\n\r\n  toString(): string {\r\n    return `WriteConcernError(${this.errmsg})`;\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface BulkWriteOperationError {\r\n  index: number;\r\n  code: number;\r\n  errmsg: string;\r\n  errInfo: Document;\r\n  op: Document | UpdateStatement | DeleteStatement;\r\n}\r\n\r\n/**\r\n * An error that occurred during a BulkWrite on the server.\r\n * @public\r\n * @category Error\r\n */\r\nexport class WriteError {\r\n  err: BulkWriteOperationError;\r\n\r\n  constructor(err: BulkWriteOperationError) {\r\n    this.err = err;\r\n  }\r\n\r\n  /** WriteError code. */\r\n  get code(): number {\r\n    return this.err.code;\r\n  }\r\n\r\n  /** WriteError original bulk operation index. */\r\n  get index(): number {\r\n    return this.err.index;\r\n  }\r\n\r\n  /** WriteError message. */\r\n  get errmsg(): string | undefined {\r\n    return this.err.errmsg;\r\n  }\r\n\r\n  /** WriteError details. */\r\n  get errInfo(): Document | undefined {\r\n    return this.err.errInfo;\r\n  }\r\n\r\n  /** Returns the underlying operation that caused the error */\r\n  getOperation(): Document {\r\n    return this.err.op;\r\n  }\r\n\r\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\r\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\r\n  }\r\n\r\n  toString(): string {\r\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\r\n  }\r\n}\r\n\r\n/** Converts the number to a Long or returns it. */\r\nfunction longOrConvert(value: number | Long | Timestamp): Long | Timestamp {\r\n  return typeof value === 'number' ? Long.fromNumber(value) : value;\r\n}\r\n\r\n/** Merges results into shared data structure */\r\nexport function mergeBatchResults(\r\n  batch: Batch,\r\n  bulkResult: BulkResult,\r\n  err?: AnyError,\r\n  result?: Document\r\n): void {\r\n  // If we have an error set the result to be the err object\r\n  if (err) {\r\n    result = err;\r\n  } else if (result && result.result) {\r\n    result = result.result;\r\n  }\r\n\r\n  if (result == null) {\r\n    return;\r\n  }\r\n\r\n  // Do we have a top level error stop processing and return\r\n  if (result.ok === 0 && bulkResult.ok === 1) {\r\n    bulkResult.ok = 0;\r\n\r\n    const writeError = {\r\n      index: 0,\r\n      code: result.code || 0,\r\n      errmsg: result.message,\r\n      errInfo: result.errInfo,\r\n      op: batch.operations[0]\r\n    };\r\n\r\n    bulkResult.writeErrors.push(new WriteError(writeError));\r\n    return;\r\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\r\n    return;\r\n  }\r\n\r\n  // The server write command specification states that lastOp is an optional\r\n  // mongod only field that has a type of timestamp. Across various scarce specs\r\n  // where opTime is mentioned, it is an \"opaque\" object that can have a \"ts\" and\r\n  // \"t\" field with Timestamp and Long as their types respectively.\r\n  // The \"lastOp\" field of the bulk write result is never mentioned in the driver\r\n  // specifications or the bulk write spec, so we should probably just keep its\r\n  // value consistent since it seems to vary.\r\n  // See: https://github.com/mongodb/specifications/blob/master/source/driver-bulk-update.rst#results-object\r\n  if (result.opTime || result.lastOp) {\r\n    let opTime = result.lastOp || result.opTime;\r\n\r\n    // If the opTime is a Timestamp, convert it to a consistent format to be\r\n    // able to compare easily. Converting to the object from a timestamp is\r\n    // much more straightforward than the other direction.\r\n    if (opTime._bsontype === 'Timestamp') {\r\n      opTime = { ts: opTime, t: Long.ZERO };\r\n    }\r\n\r\n    // If there's no lastOp, just set it.\r\n    if (!bulkResult.opTime) {\r\n      bulkResult.opTime = opTime;\r\n    } else {\r\n      // First compare the ts values and set if the opTimeTS value is greater.\r\n      const lastOpTS = longOrConvert(bulkResult.opTime.ts);\r\n      const opTimeTS = longOrConvert(opTime.ts);\r\n      if (opTimeTS.greaterThan(lastOpTS)) {\r\n        bulkResult.opTime = opTime;\r\n      } else if (opTimeTS.equals(lastOpTS)) {\r\n        // If the ts values are equal, then compare using the t values.\r\n        const lastOpT = longOrConvert(bulkResult.opTime.t);\r\n        const opTimeT = longOrConvert(opTime.t);\r\n        if (opTimeT.greaterThan(lastOpT)) {\r\n          bulkResult.opTime = opTime;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If we have an insert Batch type\r\n  if (isInsertBatch(batch) && result.n) {\r\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\r\n  }\r\n\r\n  // If we have an insert Batch type\r\n  if (isDeleteBatch(batch) && result.n) {\r\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\r\n  }\r\n\r\n  let nUpserted = 0;\r\n\r\n  // We have an array of upserted values, we need to rewrite the indexes\r\n  if (Array.isArray(result.upserted)) {\r\n    nUpserted = result.upserted.length;\r\n\r\n    for (let i = 0; i < result.upserted.length; i++) {\r\n      bulkResult.upserted.push({\r\n        index: result.upserted[i].index + batch.originalZeroIndex,\r\n        _id: result.upserted[i]._id\r\n      });\r\n    }\r\n  } else if (result.upserted) {\r\n    nUpserted = 1;\r\n\r\n    bulkResult.upserted.push({\r\n      index: batch.originalZeroIndex,\r\n      _id: result.upserted\r\n    });\r\n  }\r\n\r\n  // If we have an update Batch type\r\n  if (isUpdateBatch(batch) && result.n) {\r\n    const nModified = result.nModified;\r\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\r\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\r\n\r\n    if (typeof nModified === 'number') {\r\n      bulkResult.nModified = bulkResult.nModified + nModified;\r\n    } else {\r\n      bulkResult.nModified = 0;\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(result.writeErrors)) {\r\n    for (let i = 0; i < result.writeErrors.length; i++) {\r\n      const writeError = {\r\n        index: batch.originalIndexes[result.writeErrors[i].index],\r\n        code: result.writeErrors[i].code,\r\n        errmsg: result.writeErrors[i].errmsg,\r\n        errInfo: result.writeErrors[i].errInfo,\r\n        op: batch.operations[result.writeErrors[i].index]\r\n      };\r\n\r\n      bulkResult.writeErrors.push(new WriteError(writeError));\r\n    }\r\n  }\r\n\r\n  if (result.writeConcernError) {\r\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\r\n  }\r\n}\r\n\r\nfunction executeCommands(\r\n  bulkOperation: BulkOperationBase,\r\n  options: BulkWriteOptions,\r\n  callback: Callback<BulkWriteResult>\r\n) {\r\n  if (bulkOperation.s.batches.length === 0) {\r\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\r\n  }\r\n\r\n  const batch = bulkOperation.s.batches.shift() as Batch;\r\n\r\n  function resultHandler(err?: AnyError, result?: Document) {\r\n    // Error is a driver related error not a bulk op error, return early\r\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\r\n      return callback(\r\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\r\n      );\r\n    }\r\n\r\n    if (err instanceof MongoWriteConcernError) {\r\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\r\n    }\r\n\r\n    // Merge the results together\r\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\r\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\r\n    if (mergeResult != null) {\r\n      return callback(undefined, writeResult);\r\n    }\r\n\r\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\r\n\r\n    // Execute the next command in line\r\n    executeCommands(bulkOperation, options, callback);\r\n  }\r\n\r\n  const finalOptions = resolveOptions(bulkOperation, {\r\n    ...options,\r\n    ordered: bulkOperation.isOrdered\r\n  });\r\n\r\n  if (finalOptions.bypassDocumentValidation !== true) {\r\n    delete finalOptions.bypassDocumentValidation;\r\n  }\r\n\r\n  // Set an operationIf if provided\r\n  if (bulkOperation.operationId) {\r\n    resultHandler.operationId = bulkOperation.operationId;\r\n  }\r\n\r\n  // Is the bypassDocumentValidation options specific\r\n  if (bulkOperation.s.bypassDocumentValidation === true) {\r\n    finalOptions.bypassDocumentValidation = true;\r\n  }\r\n\r\n  // Is the checkKeys option disabled\r\n  if (bulkOperation.s.checkKeys === false) {\r\n    finalOptions.checkKeys = false;\r\n  }\r\n\r\n  if (finalOptions.retryWrites) {\r\n    if (isUpdateBatch(batch)) {\r\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\r\n    }\r\n\r\n    if (isDeleteBatch(batch)) {\r\n      finalOptions.retryWrites =\r\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (isInsertBatch(batch)) {\r\n      executeOperation(\r\n        bulkOperation.s.collection,\r\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\r\n        resultHandler\r\n      );\r\n    } else if (isUpdateBatch(batch)) {\r\n      executeOperation(\r\n        bulkOperation.s.collection,\r\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\r\n        resultHandler\r\n      );\r\n    } else if (isDeleteBatch(batch)) {\r\n      executeOperation(\r\n        bulkOperation.s.collection,\r\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\r\n        resultHandler\r\n      );\r\n    }\r\n  } catch (err) {\r\n    // Force top level error\r\n    err.ok = 0;\r\n    // Merge top level error and return\r\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\r\n    callback();\r\n  }\r\n}\r\n\r\nfunction handleMongoWriteConcernError(\r\n  batch: Batch,\r\n  bulkResult: BulkResult,\r\n  err: MongoWriteConcernError,\r\n  callback: Callback<BulkWriteResult>\r\n) {\r\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\r\n\r\n  callback(\r\n    new MongoBulkWriteError(\r\n      {\r\n        message: err.result?.writeConcernError.errmsg,\r\n        code: err.result?.writeConcernError.result\r\n      },\r\n      new BulkWriteResult(bulkResult)\r\n    )\r\n  );\r\n}\r\n\r\n/**\r\n * An error indicating an unsuccessful Bulk Write\r\n * @public\r\n * @category Error\r\n */\r\nexport class MongoBulkWriteError extends MongoServerError {\r\n  result: BulkWriteResult;\r\n  writeErrors: OneOrMore<WriteError> = [];\r\n  err?: WriteConcernError;\r\n\r\n  /** Creates a new MongoBulkWriteError */\r\n  constructor(\r\n    error:\r\n      | { message: string; code: number; writeErrors?: WriteError[] }\r\n      | WriteConcernError\r\n      | AnyError,\r\n    result: BulkWriteResult\r\n  ) {\r\n    super(error);\r\n\r\n    if (error instanceof WriteConcernError) this.err = error;\r\n    else if (!(error instanceof Error)) {\r\n      this.message = error.message;\r\n      this.code = error.code;\r\n      this.writeErrors = error.writeErrors ?? [];\r\n    }\r\n\r\n    this.result = result;\r\n    Object.assign(this, error);\r\n  }\r\n\r\n  override get name(): string {\r\n    return 'MongoBulkWriteError';\r\n  }\r\n\r\n  /** Number of documents inserted. */\r\n  get insertedCount(): number {\r\n    return this.result.insertedCount;\r\n  }\r\n  /** Number of documents matched for update. */\r\n  get matchedCount(): number {\r\n    return this.result.matchedCount;\r\n  }\r\n  /** Number of documents modified. */\r\n  get modifiedCount(): number {\r\n    return this.result.modifiedCount;\r\n  }\r\n  /** Number of documents deleted. */\r\n  get deletedCount(): number {\r\n    return this.result.deletedCount;\r\n  }\r\n  /** Number of documents upserted. */\r\n  get upsertedCount(): number {\r\n    return this.result.upsertedCount;\r\n  }\r\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\r\n  get insertedIds(): { [key: number]: any } {\r\n    return this.result.insertedIds;\r\n  }\r\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\r\n  get upsertedIds(): { [key: number]: any } {\r\n    return this.result.upsertedIds;\r\n  }\r\n}\r\n\r\n/**\r\n * A builder object that is returned from {@link BulkOperationBase#find}.\r\n * Is used to build a write operation that involves a query filter.\r\n *\r\n * @public\r\n */\r\nexport class FindOperators {\r\n  bulkOperation: BulkOperationBase;\r\n\r\n  /**\r\n   * Creates a new FindOperators object.\r\n   * @internal\r\n   */\r\n  constructor(bulkOperation: BulkOperationBase) {\r\n    this.bulkOperation = bulkOperation;\r\n  }\r\n\r\n  /** Add a multiple update operation to the bulk operation */\r\n  update(updateDocument: Document): BulkOperationBase {\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.UPDATE,\r\n      makeUpdateStatement(currentOp.selector, updateDocument, {\r\n        ...currentOp,\r\n        multi: true\r\n      })\r\n    );\r\n  }\r\n\r\n  /** Add a single update operation to the bulk operation */\r\n  updateOne(updateDocument: Document): BulkOperationBase {\r\n    if (!hasAtomicOperators(updateDocument)) {\r\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n    }\r\n\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.UPDATE,\r\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\r\n    );\r\n  }\r\n\r\n  /** Add a replace one operation to the bulk operation */\r\n  replaceOne(replacement: Document): BulkOperationBase {\r\n    if (hasAtomicOperators(replacement)) {\r\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\r\n    }\r\n\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.UPDATE,\r\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\r\n    );\r\n  }\r\n\r\n  /** Add a delete one operation to the bulk operation */\r\n  deleteOne(): BulkOperationBase {\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.DELETE,\r\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\r\n    );\r\n  }\r\n\r\n  /** Add a delete many operation to the bulk operation */\r\n  delete(): BulkOperationBase {\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.DELETE,\r\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\r\n    );\r\n  }\r\n\r\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\r\n  upsert(): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.upsert = true;\r\n    return this;\r\n  }\r\n\r\n  /** Specifies the collation for the query condition. */\r\n  collation(collation: CollationOptions): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.collation = collation;\r\n    return this;\r\n  }\r\n\r\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\r\n  arrayFilters(arrayFilters: Document[]): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport interface BulkOperationPrivate {\r\n  bulkResult: BulkResult;\r\n  currentBatch?: Batch;\r\n  currentIndex: number;\r\n  // ordered specific\r\n  currentBatchSize: number;\r\n  currentBatchSizeBytes: number;\r\n  // unordered specific\r\n  currentInsertBatch?: Batch;\r\n  currentUpdateBatch?: Batch;\r\n  currentRemoveBatch?: Batch;\r\n  batches: Batch[];\r\n  // Write concern\r\n  writeConcern?: WriteConcern;\r\n  // Max batch size options\r\n  maxBsonObjectSize: number;\r\n  maxBatchSizeBytes: number;\r\n  maxWriteBatchSize: number;\r\n  maxKeySize: number;\r\n  // Namespace\r\n  namespace: MongoDBNamespace;\r\n  // Topology\r\n  topology: Topology;\r\n  // Options\r\n  options: BulkWriteOptions;\r\n  // BSON options\r\n  bsonOptions: BSONSerializeOptions;\r\n  // Document used to build a bulk operation\r\n  currentOp?: Document;\r\n  // Executed\r\n  executed: boolean;\r\n  // Collection\r\n  collection: Collection;\r\n  // Fundamental error\r\n  err?: AnyError;\r\n  // check keys\r\n  checkKeys: boolean;\r\n  bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface BulkWriteOptions extends CommandOperationOptions {\r\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\r\n  bypassDocumentValidation?: boolean;\r\n  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\r\n  ordered?: boolean;\r\n  /** @deprecated use `ordered` instead */\r\n  keepGoing?: boolean;\r\n  /** Force server to assign _id values instead of driver. */\r\n  forceServerObjectId?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/**\r\n * TODO(NODE-4063)\r\n * BulkWrites merge complexity is implemented in executeCommands\r\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\r\n * We would like this logic to simply live inside the BulkWriteOperation class\r\n * @internal\r\n */\r\nclass BulkWriteShimOperation extends AbstractOperation {\r\n  bulkOperation: BulkOperationBase;\r\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\r\n    super(options);\r\n    this.bulkOperation = bulkOperation;\r\n  }\r\n\r\n  execute(server: Server, session: ClientSession | undefined, callback: Callback<any>): void {\r\n    if (this.options.session == null) {\r\n      // An implicit session could have been created by 'executeOperation'\r\n      // So if we stick it on finalOptions here, each bulk operation\r\n      // will use this same session, it'll be passed in the same way\r\n      // an explicit session would be\r\n      this.options.session = session;\r\n    }\r\n    return executeCommands(this.bulkOperation, this.options, callback);\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport abstract class BulkOperationBase {\r\n  isOrdered: boolean;\r\n  /** @internal */\r\n  s: BulkOperationPrivate;\r\n  operationId?: number;\r\n\r\n  /**\r\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\r\n   * @internal\r\n   */\r\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\r\n    // determine whether bulkOperation is ordered or unordered\r\n    this.isOrdered = isOrdered;\r\n\r\n    const topology = getTopology(collection);\r\n    options = options == null ? {} : options;\r\n    // TODO Bring from driver information in hello\r\n    // Get the namespace for the write operations\r\n    const namespace = collection.s.namespace;\r\n    // Used to mark operation as executed\r\n    const executed = false;\r\n\r\n    // Current item\r\n    const currentOp = undefined;\r\n\r\n    // Set max byte size\r\n    const hello = topology.lastHello();\r\n\r\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\r\n    // over 2mb are still allowed\r\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\r\n    const maxBsonObjectSize =\r\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\r\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\r\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\r\n\r\n    // Calculates the largest possible size of an Array key, represented as a BSON string\r\n    // element. This calculation:\r\n    //     1 byte for BSON type\r\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\r\n    //   + 1 bytes for null terminator\r\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\r\n\r\n    // Final options for retryable writes\r\n    let finalOptions = Object.assign({}, options);\r\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\r\n\r\n    // Final results\r\n    const bulkResult: BulkResult = {\r\n      ok: 1,\r\n      writeErrors: [],\r\n      writeConcernErrors: [],\r\n      insertedIds: [],\r\n      nInserted: 0,\r\n      nUpserted: 0,\r\n      nMatched: 0,\r\n      nModified: 0,\r\n      nRemoved: 0,\r\n      upserted: []\r\n    };\r\n\r\n    // Internal state\r\n    this.s = {\r\n      // Final result\r\n      bulkResult,\r\n      // Current batch state\r\n      currentBatch: undefined,\r\n      currentIndex: 0,\r\n      // ordered specific\r\n      currentBatchSize: 0,\r\n      currentBatchSizeBytes: 0,\r\n      // unordered specific\r\n      currentInsertBatch: undefined,\r\n      currentUpdateBatch: undefined,\r\n      currentRemoveBatch: undefined,\r\n      batches: [],\r\n      // Write concern\r\n      writeConcern: WriteConcern.fromOptions(options),\r\n      // Max batch size options\r\n      maxBsonObjectSize,\r\n      maxBatchSizeBytes,\r\n      maxWriteBatchSize,\r\n      maxKeySize,\r\n      // Namespace\r\n      namespace,\r\n      // Topology\r\n      topology,\r\n      // Options\r\n      options: finalOptions,\r\n      // BSON options\r\n      bsonOptions: resolveBSONOptions(options),\r\n      // Current operation\r\n      currentOp,\r\n      // Executed\r\n      executed,\r\n      // Collection\r\n      collection,\r\n      // Fundamental error\r\n      err: undefined,\r\n      // check keys\r\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\r\n    };\r\n\r\n    // bypass Validation\r\n    if (options.bypassDocumentValidation === true) {\r\n      this.s.bypassDocumentValidation = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a single insert document to the bulk operation\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Adds three inserts to the bulkOp.\r\n   * bulkOp\r\n   *   .insert({ a: 1 })\r\n   *   .insert({ b: 2 })\r\n   *   .insert({ c: 3 });\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\r\n  insert(document: Document): BulkOperationBase {\r\n    if (document._id == null && !shouldForceServerObjectId(this)) {\r\n      document._id = new ObjectId();\r\n    }\r\n\r\n    return this.addToOperationsList(BatchType.INSERT, document);\r\n  }\r\n\r\n  /**\r\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\r\n   * Returns a builder object used to complete the definition of the operation.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Add an updateOne to the bulkOp\r\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\r\n   *\r\n   * // Add an updateMany to the bulkOp\r\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\r\n   *\r\n   * // Add an upsert\r\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\r\n   *\r\n   * // Add a deletion\r\n   * bulkOp.find({ g: 7 }).deleteOne();\r\n   *\r\n   * // Add a multi deletion\r\n   * bulkOp.find({ h: 8 }).delete();\r\n   *\r\n   * // Add a replaceOne\r\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\r\n   *\r\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\r\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\r\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\r\n   * ]);\r\n   *\r\n   * // All of the ops will now be executed\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\r\n  find(selector: Document): FindOperators {\r\n    if (!selector) {\r\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\r\n    }\r\n\r\n    // Save a current selector\r\n    this.s.currentOp = {\r\n      selector: selector\r\n    };\r\n\r\n    return new FindOperators(this);\r\n  }\r\n\r\n  /** Specifies a raw operation to perform in the bulk write. */\r\n  raw(op: AnyBulkWriteOperation): this {\r\n    if ('insertOne' in op) {\r\n      const forceServerObjectId = shouldForceServerObjectId(this);\r\n      if (op.insertOne && op.insertOne.document == null) {\r\n        // NOTE: provided for legacy support, but this is a malformed operation\r\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\r\n          (op.insertOne as Document)._id = new ObjectId();\r\n        }\r\n\r\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\r\n      }\r\n\r\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\r\n        op.insertOne.document._id = new ObjectId();\r\n      }\r\n\r\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\r\n    }\r\n\r\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\r\n      if ('replaceOne' in op) {\r\n        if ('q' in op.replaceOne) {\r\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n        }\r\n        const updateStatement = makeUpdateStatement(\r\n          op.replaceOne.filter,\r\n          op.replaceOne.replacement,\r\n          { ...op.replaceOne, multi: false }\r\n        );\r\n        if (hasAtomicOperators(updateStatement.u)) {\r\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\r\n        }\r\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\r\n      }\r\n\r\n      if ('updateOne' in op) {\r\n        if ('q' in op.updateOne) {\r\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n        }\r\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\r\n          ...op.updateOne,\r\n          multi: false\r\n        });\r\n        if (!hasAtomicOperators(updateStatement.u)) {\r\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n        }\r\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\r\n      }\r\n\r\n      if ('updateMany' in op) {\r\n        if ('q' in op.updateMany) {\r\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n        }\r\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\r\n          ...op.updateMany,\r\n          multi: true\r\n        });\r\n        if (!hasAtomicOperators(updateStatement.u)) {\r\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n        }\r\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\r\n      }\r\n    }\r\n\r\n    if ('deleteOne' in op) {\r\n      if ('q' in op.deleteOne) {\r\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n      }\r\n      return this.addToOperationsList(\r\n        BatchType.DELETE,\r\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\r\n      );\r\n    }\r\n\r\n    if ('deleteMany' in op) {\r\n      if ('q' in op.deleteMany) {\r\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n      }\r\n      return this.addToOperationsList(\r\n        BatchType.DELETE,\r\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\r\n      );\r\n    }\r\n\r\n    // otherwise an unknown operation was provided\r\n    throw new MongoInvalidArgumentError(\r\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\r\n    );\r\n  }\r\n\r\n  get bsonOptions(): BSONSerializeOptions {\r\n    return this.s.bsonOptions;\r\n  }\r\n\r\n  get writeConcern(): WriteConcern | undefined {\r\n    return this.s.writeConcern;\r\n  }\r\n\r\n  get batches(): Batch[] {\r\n    const batches = [...this.s.batches];\r\n    if (this.isOrdered) {\r\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\r\n    } else {\r\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\r\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\r\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\r\n    }\r\n    return batches;\r\n  }\r\n\r\n  execute(options?: BulkWriteOptions): Promise<BulkWriteResult>;\r\n  execute(callback: Callback<BulkWriteResult>): void;\r\n  execute(options: BulkWriteOptions | undefined, callback: Callback<BulkWriteResult>): void;\r\n  execute(\r\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\r\n    callback?: Callback<BulkWriteResult>\r\n  ): Promise<BulkWriteResult> | void;\r\n  execute(\r\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\r\n    callback?: Callback<BulkWriteResult>\r\n  ): Promise<BulkWriteResult> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    if (this.s.executed) {\r\n      return handleEarlyError(new MongoBatchReExecutionError(), callback);\r\n    }\r\n\r\n    const writeConcern = WriteConcern.fromOptions(options);\r\n    if (writeConcern) {\r\n      this.s.writeConcern = writeConcern;\r\n    }\r\n\r\n    // If we have current batch\r\n    if (this.isOrdered) {\r\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\r\n    } else {\r\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\r\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\r\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\r\n    }\r\n    // If we have no operations in the bulk raise an error\r\n    if (this.s.batches.length === 0) {\r\n      const emptyBatchError = new MongoInvalidArgumentError(\r\n        'Invalid BulkOperation, Batch cannot be empty'\r\n      );\r\n      return handleEarlyError(emptyBatchError, callback);\r\n    }\r\n\r\n    this.s.executed = true;\r\n    const finalOptions = { ...this.s.options, ...options };\r\n    const operation = new BulkWriteShimOperation(this, finalOptions);\r\n\r\n    return executeOperation(this.s.collection, operation, callback);\r\n  }\r\n\r\n  /**\r\n   * Handles the write error before executing commands\r\n   * @internal\r\n   */\r\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\r\n    if (this.s.bulkResult.writeErrors.length > 0) {\r\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\r\n        ? this.s.bulkResult.writeErrors[0].errmsg\r\n        : 'write operation failed';\r\n\r\n      callback(\r\n        new MongoBulkWriteError(\r\n          {\r\n            message: msg,\r\n            code: this.s.bulkResult.writeErrors[0].code,\r\n            writeErrors: this.s.bulkResult.writeErrors\r\n          },\r\n          writeResult\r\n        )\r\n      );\r\n\r\n      return true;\r\n    }\r\n\r\n    const writeConcernError = writeResult.getWriteConcernError();\r\n    if (writeConcernError) {\r\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  abstract addToOperationsList(\r\n    batchType: BatchType,\r\n    document: Document | UpdateStatement | DeleteStatement\r\n  ): this;\r\n}\r\n\r\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\r\n  enumerable: true,\r\n  get() {\r\n    return this.s.currentIndex;\r\n  }\r\n});\r\n\r\n/** helper function to assist with promiseOrCallback behavior */\r\nfunction handleEarlyError(\r\n  err?: AnyError,\r\n  callback?: Callback<BulkWriteResult>\r\n): Promise<BulkWriteResult> | void {\r\n  const Promise = PromiseProvider.get();\r\n  if (typeof callback === 'function') {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  return Promise.reject(err);\r\n}\r\n\r\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\r\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\r\n    return bulkOperation.s.options.forceServerObjectId;\r\n  }\r\n\r\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\r\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isInsertBatch(batch: Batch): boolean {\r\n  return batch.batchType === BatchType.INSERT;\r\n}\r\n\r\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\r\n  return batch.batchType === BatchType.UPDATE;\r\n}\r\n\r\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\r\n  return batch.batchType === BatchType.DELETE;\r\n}\r\n\r\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\r\n  let { currentOp } = bulkOp.s;\r\n  bulkOp.s.currentOp = undefined;\r\n  if (!currentOp) currentOp = {};\r\n  return currentOp;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}