{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateCollectionOperation = void 0;\n\nconst collection_1 = require(\"../collection\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern', 'raw', 'fieldsAsRaw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined', 'enableUtf8Validation']);\n/** @internal */\n\nclass CreateCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    const done = err => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(undefined, new collection_1.Collection(db, name, options));\n    };\n\n    const cmd = {\n      create: name\n    };\n\n    for (const n in options) {\n      if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n        cmd[n] = options[n];\n      }\n    } // otherwise just execute the command\n\n\n    super.executeCommand(server, session, cmd, done);\n  }\n\n}\n\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;;AACA;;AAMA;;AACA;;AAEA,MAAMA,sBAAsB,GAAG,IAAIC,GAAJ,CAAQ,CACrC,GADqC,EAErC,UAFqC,EAGrC,GAHqC,EAIrC,OAJqC,EAKrC,aALqC,EAMrC,WANqC,EAOrC,KAPqC,EAQrC,gBARqC,EASrC,SATqC,EAUrC,aAVqC,EAWrC,cAXqC,EAYrC,KAZqC,EAarC,aAbqC,EAcrC,cAdqC,EAerC,eAfqC,EAgBrC,gBAhBqC,EAiBrC,YAjBqC,EAkBrC,oBAlBqC,EAmBrC,iBAnBqC,EAoBrC,sBApBqC,CAAR,CAA/B;AAqEA;;AACA,MAAaC,yBAAb,SAA+CC,0BAA/C,CAA2E;AAKzEC,cAAYC,EAAZ,EAAoBC,IAApB,EAAuE;AAAA,QAArCC,OAAqC,uEAAF,EAAE;AACrE,UAAMF,EAAN,EAAUE,OAAV;AAEA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEQE,SAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGgB;AAE9B,UAAMN,EAAE,GAAG,KAAKA,EAAhB;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;;AAEA,UAAMK,IAAI,GAAaC,GAAG,IAAG;AAC3B,UAAIA,GAAJ,EAAS;AACP,eAAOF,QAAQ,CAACE,GAAD,CAAf;AACD;;AAEDF,cAAQ,CAACG,SAAD,EAAY,IAAIC,uBAAJ,CAAeV,EAAf,EAAmBC,IAAnB,EAAyBC,OAAzB,CAAZ,CAAR;AACD,KAND;;AAQA,UAAMS,GAAG,GAAa;AAAEC,YAAM,EAAEX;AAAV,KAAtB;;AACA,SAAK,MAAMY,CAAX,IAAgBX,OAAhB,EAAyB;AACvB,UACGA,OAAe,CAACW,CAAD,CAAf,IAAsB,IAAtB,IACD,OAAQX,OAAe,CAACW,CAAD,CAAvB,KAA+B,UAD9B,IAED,CAAClB,sBAAsB,CAACmB,GAAvB,CAA2BD,CAA3B,CAHH,EAIE;AACAF,WAAG,CAACE,CAAD,CAAH,GAAUX,OAAe,CAACW,CAAD,CAAzB;AACD;AACF,KAvB6B,CAyB9B;;;AACA,UAAME,cAAN,CAAqBX,MAArB,EAA6BC,OAA7B,EAAsCM,GAAtC,EAA2CJ,IAA3C;AACD;;AA3CwE;;AAA3ES;AA8CA,+BAAcnB,yBAAd,EAAyC,CAACoB,mBAAOC,eAAR,CAAzC","names":["ILLEGAL_COMMAND_FIELDS","Set","CreateCollectionOperation","command_1","constructor","db","name","options","execute","server","session","callback","done","err","undefined","collection_1","cmd","create","n","has","executeCommand","exports","operation_1","WRITE_OPERATION"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\create_collection.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport { Collection } from '../collection';\r\nimport type { Db } from '../db';\r\nimport type { PkFactory } from '../mongo_client';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback } from '../utils';\r\nimport { CommandOperation, CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\nconst ILLEGAL_COMMAND_FIELDS = new Set([\r\n  'w',\r\n  'wtimeout',\r\n  'j',\r\n  'fsync',\r\n  'autoIndexId',\r\n  'pkFactory',\r\n  'raw',\r\n  'readPreference',\r\n  'session',\r\n  'readConcern',\r\n  'writeConcern',\r\n  'raw',\r\n  'fieldsAsRaw',\r\n  'promoteLongs',\r\n  'promoteValues',\r\n  'promoteBuffers',\r\n  'bsonRegExp',\r\n  'serializeFunctions',\r\n  'ignoreUndefined',\r\n  'enableUtf8Validation'\r\n]);\r\n\r\n/** @public\r\n * Configuration options for timeseries collections\r\n * @see https://docs.mongodb.com/manual/core/timeseries-collections/\r\n */\r\nexport interface TimeSeriesCollectionOptions extends Document {\r\n  timeField: string;\r\n  metaField?: string;\r\n  granularity?: 'seconds' | 'minutes' | 'hours' | string;\r\n}\r\n\r\n/** @public */\r\nexport interface CreateCollectionOptions extends CommandOperationOptions {\r\n  /** Returns an error if the collection does not exist */\r\n  strict?: boolean;\r\n  /** Create a capped collection */\r\n  capped?: boolean;\r\n  /** @deprecated Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0 */\r\n  autoIndexId?: boolean;\r\n  /** The size of the capped collection in bytes */\r\n  size?: number;\r\n  /** The maximum number of documents in the capped collection */\r\n  max?: number;\r\n  /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */\r\n  flags?: number;\r\n  /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher */\r\n  storageEngine?: Document;\r\n  /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher */\r\n  validator?: Document;\r\n  /** Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher */\r\n  validationLevel?: string;\r\n  /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher */\r\n  validationAction?: string;\r\n  /** Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher */\r\n  indexOptionDefaults?: Document;\r\n  /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher */\r\n  viewOn?: string;\r\n  /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher */\r\n  pipeline?: Document[];\r\n  /** A primary key factory function for generation of custom _id keys. */\r\n  pkFactory?: PkFactory;\r\n  /** A document specifying configuration options for timeseries collections. */\r\n  timeseries?: TimeSeriesCollectionOptions;\r\n  /** The number of seconds after which a document in a timeseries collection expires. */\r\n  expireAfterSeconds?: number;\r\n}\r\n\r\n/** @internal */\r\nexport class CreateCollectionOperation extends CommandOperation<Collection> {\r\n  override options: CreateCollectionOptions;\r\n  db: Db;\r\n  name: string;\r\n\r\n  constructor(db: Db, name: string, options: CreateCollectionOptions = {}) {\r\n    super(db, options);\r\n\r\n    this.options = options;\r\n    this.db = db;\r\n    this.name = name;\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Collection>\r\n  ): void {\r\n    const db = this.db;\r\n    const name = this.name;\r\n    const options = this.options;\r\n\r\n    const done: Callback = err => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      callback(undefined, new Collection(db, name, options));\r\n    };\r\n\r\n    const cmd: Document = { create: name };\r\n    for (const n in options) {\r\n      if (\r\n        (options as any)[n] != null &&\r\n        typeof (options as any)[n] !== 'function' &&\r\n        !ILLEGAL_COMMAND_FIELDS.has(n)\r\n      ) {\r\n        cmd[n] = (options as any)[n];\r\n      }\r\n    }\r\n\r\n    // otherwise just execute the command\r\n    super.executeCommand(server, session, cmd, done);\r\n  }\r\n}\r\n\r\ndefineAspects(CreateCollectionOperation, [Aspect.WRITE_OPERATION]);\r\n"]},"metadata":{},"sourceType":"script"}