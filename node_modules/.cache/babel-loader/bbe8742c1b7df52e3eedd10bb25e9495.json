{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProfilingLevelOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst command_1 = require(\"./command\");\n/** @internal */\n\n\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n\n  execute(server, session, callback) {\n    super.executeCommand(server, session, {\n      profile: -1\n    }, (err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(undefined, 'off');\n        if (was === 1) return callback(undefined, 'slow_only');\n        if (was === 2) return callback(undefined, 'all'); // TODO(NODE-3483)\n\n        return callback(new error_1.MongoRuntimeError(`Illegal profiling level value ${was}`));\n      } else {\n        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError\n        err != null ? callback(err) : callback(new error_1.MongoRuntimeError('Error with profile command'));\n      }\n    });\n  }\n\n}\n\nexports.ProfilingLevelOperation = ProfilingLevelOperation;","map":{"version":3,"mappings":";;;;;;;AACA;;AAIA;AAKA;;;AACA,MAAaA,uBAAb,SAA6CC,0BAA7C,CAAqE;AAGnEC,cAAYC,EAAZ,EAAoBC,OAApB,EAAkD;AAChD,UAAMD,EAAN,EAAUC,OAAV;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEQC,SAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGY;AAE1B,UAAMC,cAAN,CAAqBH,MAArB,EAA6BC,OAA7B,EAAsC;AAAEG,aAAO,EAAE,CAAC;AAAZ,KAAtC,EAAuD,CAACC,GAAD,EAAMC,GAAN,KAAa;AAClE,UAAID,GAAG,IAAI,IAAP,IAAeC,GAAG,CAACC,EAAJ,KAAW,CAA9B,EAAiC;AAC/B,cAAMC,GAAG,GAAGF,GAAG,CAACE,GAAhB;AACA,YAAIA,GAAG,KAAK,CAAZ,EAAe,OAAON,QAAQ,CAACO,SAAD,EAAY,KAAZ,CAAf;AACf,YAAID,GAAG,KAAK,CAAZ,EAAe,OAAON,QAAQ,CAACO,SAAD,EAAY,WAAZ,CAAf;AACf,YAAID,GAAG,KAAK,CAAZ,EAAe,OAAON,QAAQ,CAACO,SAAD,EAAY,KAAZ,CAAf,CAJgB,CAK/B;;AACA,eAAOP,QAAQ,CAAC,IAAIQ,yBAAJ,CAAsB,iCAAiCF,GAAG,EAA1D,CAAD,CAAf;AACD,OAPD,MAOO;AACL;AACAH,WAAG,IAAI,IAAP,GAAcH,QAAQ,CAACG,GAAD,CAAtB,GAA8BH,QAAQ,CAAC,IAAIQ,yBAAJ,CAAsB,4BAAtB,CAAD,CAAtC;AACD;AACF,KAZD;AAaD;;AA1BkE;;AAArEC","names":["ProfilingLevelOperation","command_1","constructor","db","options","execute","server","session","callback","executeCommand","profile","err","doc","ok","was","undefined","error_1","exports"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\profiling_level.ts"],"sourcesContent":["import type { Db } from '../db';\nimport { MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\n\n/** @public */\nexport type ProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class ProfilingLevelOperation extends CommandOperation<string> {\n  override options: ProfilingLevelOptions;\n\n  constructor(db: Db, options: ProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string>\n  ): void {\n    super.executeCommand(server, session, { profile: -1 }, (err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(undefined, 'off');\n        if (was === 1) return callback(undefined, 'slow_only');\n        if (was === 2) return callback(undefined, 'all');\n        // TODO(NODE-3483)\n        return callback(new MongoRuntimeError(`Illegal profiling level value ${was}`));\n      } else {\n        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError\n        err != null ? callback(err) : callback(new MongoRuntimeError('Error with profile command'));\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}