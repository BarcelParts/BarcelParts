{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\n\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n\n}\n\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\n\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n\n}\n\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\n\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\n\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\n\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\n\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n\n}\n\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\n\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\n\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n\n}\n\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\n\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\n\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\n\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, serviceId) {\n    super(pool);\n    this.serviceId = serviceId;\n  }\n\n}\n\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"mappings":";;;;;;AAKA;;;;;;AAKA,MAAaA,6BAAb,CAA0C;AAMxC;AACAC,cAAYC,IAAZ,EAAgC;AAC9B,SAAKC,IAAL,GAAY,IAAIC,IAAJ,EAAZ;AACA,SAAKC,OAAL,GAAeH,IAAI,CAACG,OAApB;AACD;;AAVuC;;AAA1CC;AAaA;;;;;;AAKA,MAAaC,0BAAb,SAAgDP,6BAAhD,CAA6E;AAI3E;AACAC,cAAYC,IAAZ,EAAgC;AAC9B,UAAMA,IAAN;AACA,SAAKM,OAAL,GAAeN,IAAI,CAACM,OAApB;AACD;;AAR0E;;AAA7EF;AAWA;;;;;;AAKA,MAAaG,yBAAb,SAA+CT,6BAA/C,CAA4E;AAC1E;AACAC,cAAYC,IAAZ,EAAgC;AAC9B,UAAMA,IAAN;AACD;;AAJyE;;AAA5EI;AAOA;;;;;;AAKA,MAAaI,sBAAb,SAA4CV,6BAA5C,CAAyE;AAIvE;AACAC,cAAYC,IAAZ,EAAkCS,UAAlC,EAAwD;AACtD,UAAMT,IAAN;AACA,SAAKU,YAAL,GAAoBD,UAAU,CAACE,EAA/B;AACD;;AARsE;;AAAzEP;AAWA;;;;;;AAKA,MAAaQ,oBAAb,SAA0Cd,6BAA1C,CAAuE;AAIrE;AACAC,cAAYC,IAAZ,EAAkCS,UAAlC,EAAwD;AACtD,UAAMT,IAAN;AACA,SAAKU,YAAL,GAAoBD,UAAU,CAACE,EAA/B;AACD;;AARoE;;AAAvEP;AAWA;;;;;;AAKA,MAAaS,qBAAb,SAA2Cf,6BAA3C,CAAwE;AAOtE;AACAC,cAAYC,IAAZ,EAAkCS,UAAlC,EAA0DK,MAA1D,EAAwE;AACtE,UAAMd,IAAN;AACA,SAAKU,YAAL,GAAoBD,UAAU,CAACE,EAA/B;AACA,SAAKG,MAAL,GAAcA,MAAM,IAAI,SAAxB;AACA,SAAKC,SAAL,GAAiBN,UAAU,CAACM,SAA5B;AACD;;AAbqE;;AAAxEX;AAgBA;;;;;;AAKA,MAAaY,8BAAb,SAAoDlB,6BAApD,CAAiF;AAC/E;AACAC,cAAYC,IAAZ,EAAgC;AAC9B,UAAMA,IAAN;AACD;;AAJ8E;;AAAjFI;AAOA;;;;;;AAKA,MAAaa,6BAAb,SAAmDnB,6BAAnD,CAAgF;AAI9E;AACAC,cAAYC,IAAZ,EAAkCc,MAAlC,EAA2D;AACzD,UAAMd,IAAN;AACA,SAAKc,MAAL,GAAcA,MAAd;AACD;;AAR6E;;AAAhFV;AAWA;;;;;;AAKA,MAAac,yBAAb,SAA+CpB,6BAA/C,CAA4E;AAI1E;AACAC,cAAYC,IAAZ,EAAkCS,UAAlC,EAAwD;AACtD,UAAMT,IAAN;AACA,SAAKU,YAAL,GAAoBD,UAAU,CAACE,EAA/B;AACD;;AARyE;;AAA5EP;AAWA;;;;;;AAKA,MAAae,wBAAb,SAA8CrB,6BAA9C,CAA2E;AAIzE;AACAC,cAAYC,IAAZ,EAAkCS,UAAlC,EAAwD;AACtD,UAAMT,IAAN;AACA,SAAKU,YAAL,GAAoBD,UAAU,CAACE,EAA/B;AACD;;AARwE;;AAA3EP;AAWA;;;;;;AAKA,MAAagB,0BAAb,SAAgDtB,6BAAhD,CAA6E;AAI3E;AACAC,cAAYC,IAAZ,EAAkCe,SAAlC,EAAsD;AACpD,UAAMf,IAAN;AACA,SAAKe,SAAL,GAAiBA,SAAjB;AACD;;AAR0E;;AAA7EX","names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","options","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","serviceId","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\cmap\\connection_pool_events.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { AnyError } from '../error';\nimport type { Connection } from './connection';\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionPoolMonitoringEvent {\n  /** A timestamp when the event was created  */\n  time: Date;\n  /** The address (host/port pair) of the pool */\n  address: string;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** The options used to create this connection pool */\n  options?: ConnectionPoolOptions;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** A monotonically increasing, per-pool id for the newly created connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** The reason the connection was closed */\n  reason: string;\n  serviceId?: ObjectId;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection, reason: string) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** The reason the attempt to check out failed */\n  reason: AnyError | string;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, reason: AnyError | string) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  serviceId?: ObjectId;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, serviceId?: ObjectId) {\n    super(pool);\n    this.serviceId = serviceId;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}