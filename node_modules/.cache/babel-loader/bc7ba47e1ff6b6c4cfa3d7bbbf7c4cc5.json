{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\n\nconst zlib = require(\"zlib\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst error_1 = require(\"../../error\");\n/** @public */\n\n\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']); // Facilitate compressing a message using an agreed compressor\n\nfunction compress(self, dataToBeCompressed, callback) {\n  const zlibOptions = {};\n\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      {\n        if ('kModuleError' in deps_1.Snappy) {\n          return callback(deps_1.Snappy['kModuleError']);\n        }\n\n        if (deps_1.Snappy[deps_1.PKG_VERSION].major <= 6) {\n          deps_1.Snappy.compress(dataToBeCompressed, callback);\n        } else {\n          deps_1.Snappy.compress(dataToBeCompressed).then(buffer => callback(undefined, buffer)).catch(error => callback(error));\n        }\n\n        break;\n      }\n\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n\n    default:\n      throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${self.options.agreedCompressor} failed to compress`);\n  }\n}\n\nexports.compress = compress; // Decompress a message using the given compressor\n\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > Math.max(2)) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      {\n        if ('kModuleError' in deps_1.Snappy) {\n          return callback(deps_1.Snappy['kModuleError']);\n        }\n\n        if (deps_1.Snappy[deps_1.PKG_VERSION].major <= 6) {\n          deps_1.Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }, callback);\n        } else {\n          deps_1.Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }).then(buffer => callback(undefined, buffer)).catch(error => callback(error));\n        }\n\n        break;\n      }\n\n    case exports.Compressor.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n\n    default:\n      callback(undefined, compressedData);\n  }\n}\n\nexports.decompress = decompress;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;AAIA;;;AACaA,qBAAaC,MAAM,CAACC,MAAP,CAAc;AACtCC,MAAI,EAAE,CADgC;AAEtCC,QAAM,EAAE,CAF8B;AAGtCC,MAAI,EAAE;AAHgC,CAAd,CAAb;AAYAL,iCAAyB,IAAIM,GAAJ,CAAQ,CAC5CC,gCAD4C,EAE5C,WAF4C,EAG5C,cAH4C,EAI5C,UAJ4C,EAK5C,cAL4C,EAM5C,YAN4C,EAO5C,YAP4C,EAQ5C,iBAR4C,EAS5C,gBAT4C,EAU5C,QAV4C,CAAR,CAAzB,C,CAab;;AACA,SAAgBC,QAAhB,CACEC,IADF,EAEEC,kBAFF,EAGEC,QAHF,EAG4B;AAE1B,QAAMC,WAAW,GAAG,EAApB;;AACA,UAAQH,IAAI,CAACI,OAAL,CAAaC,gBAArB;AACE,SAAK,QAAL;AAAe;AACb,YAAI,kBAAkBC,aAAtB,EAA8B;AAC5B,iBAAOJ,QAAQ,CAACI,cAAO,cAAP,CAAD,CAAf;AACD;;AAED,YAAIA,cAAOA,kBAAP,EAAoBC,KAApB,IAA6B,CAAjC,EAAoC;AAClCD,wBAAOP,QAAP,CAAgBE,kBAAhB,EAAoCC,QAApC;AACD,SAFD,MAEO;AACLI,wBAAOP,QAAP,CAAgBE,kBAAhB,EACGO,IADH,CACQC,MAAM,IAAIP,QAAQ,CAACQ,SAAD,EAAYD,MAAZ,CAD1B,EAEGE,KAFH,CAESC,KAAK,IAAIV,QAAQ,CAACU,KAAD,CAF1B;AAGD;;AACD;AACD;;AACD,SAAK,MAAL;AACE;AACA,UAAIZ,IAAI,CAACI,OAAL,CAAaS,oBAAjB,EAAuC;AACrCV,mBAAW,CAACW,KAAZ,GAAoBd,IAAI,CAACI,OAAL,CAAaS,oBAAjC;AACD;;AACDjB,UAAI,CAACmB,OAAL,CAAad,kBAAb,EAAiCE,WAAjC,EAA8CD,QAA9C;AACA;;AACF;AACE,YAAM,IAAIc,iCAAJ,CACJ,sBAAsBhB,IAAI,CAACI,OAAL,CAAaC,gBAAgB,qBAD/C,CAAN;AAvBJ;AA2BD;;AAjCDd,4B,CAmCA;;AACA,SAAgB0B,UAAhB,CACEC,YADF,EAEEC,cAFF,EAGEjB,QAHF,EAG4B;AAE1B,MAAIgB,YAAY,GAAG,CAAf,IAAoBA,YAAY,GAAGE,IAAI,CAACC,GAAL,CAAS,CAAT,CAAvC,EAAoD;AAClD,UAAM,IAAIL,+BAAJ,CACJ,2FAA2FE,YAAY,GADnG,CAAN;AAGD;;AAED,UAAQA,YAAR;AACE,SAAK3B,mBAAWI,MAAhB;AAAwB;AACtB,YAAI,kBAAkBW,aAAtB,EAA8B;AAC5B,iBAAOJ,QAAQ,CAACI,cAAO,cAAP,CAAD,CAAf;AACD;;AAED,YAAIA,cAAOA,kBAAP,EAAoBC,KAApB,IAA6B,CAAjC,EAAoC;AAClCD,wBAAOgB,UAAP,CAAkBH,cAAlB,EAAkC;AAAEI,oBAAQ,EAAE;AAAZ,WAAlC,EAAsDrB,QAAtD;AACD,SAFD,MAEO;AACLI,wBAAOgB,UAAP,CAAkBH,cAAlB,EAAkC;AAAEI,oBAAQ,EAAE;AAAZ,WAAlC,EACGf,IADH,CACQC,MAAM,IAAIP,QAAQ,CAACQ,SAAD,EAAYD,MAAZ,CAD1B,EAEGE,KAFH,CAESC,KAAK,IAAIV,QAAQ,CAACU,KAAD,CAF1B;AAGD;;AACD;AACD;;AACD,SAAKrB,mBAAWK,IAAhB;AACEA,UAAI,CAAC4B,OAAL,CAAaL,cAAb,EAA6BjB,QAA7B;AACA;;AACF;AACEA,cAAQ,CAACQ,SAAD,EAAYS,cAAZ,CAAR;AAnBJ;AAqBD;;AAhCD5B","names":["exports","Object","freeze","none","snappy","zlib","Set","constants_1","compress","self","dataToBeCompressed","callback","zlibOptions","options","agreedCompressor","deps_1","major","then","buffer","undefined","catch","error","zlibCompressionLevel","level","deflate","error_1","decompress","compressorID","compressedData","Math","max","uncompress","asBuffer","inflate"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import * as zlib from 'zlib';\n\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\nimport { PKG_VERSION, Snappy } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\nimport type { Callback } from '../../utils';\nimport type { OperationDescription } from '../message_stream';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2\n} as const);\n\n/** @public */\nexport type Compressor = typeof Compressor[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  LEGACY_HELLO_COMMAND,\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\n// Facilitate compressing a message using an agreed compressor\nexport function compress(\n  self: { options: OperationDescription & zlib.ZlibOptions },\n  dataToBeCompressed: Buffer,\n  callback: Callback<Buffer>\n): void {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (self.options.agreedCompressor) {\n    case 'snappy': {\n      if ('kModuleError' in Snappy) {\n        return callback(Snappy['kModuleError']);\n      }\n\n      if (Snappy[PKG_VERSION].major <= 6) {\n        Snappy.compress(dataToBeCompressed, callback);\n      } else {\n        Snappy.compress(dataToBeCompressed)\n          .then(buffer => callback(undefined, buffer))\n          .catch(error => callback(error));\n      }\n      break;\n    }\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback as zlib.CompressCallback);\n      break;\n    default:\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${self.options.agreedCompressor} failed to compress`\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nexport function decompress(\n  compressorID: Compressor,\n  compressedData: Buffer,\n  callback: Callback<Buffer>\n): void {\n  if (compressorID < 0 || compressorID > Math.max(2)) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy: {\n      if ('kModuleError' in Snappy) {\n        return callback(Snappy['kModuleError']);\n      }\n\n      if (Snappy[PKG_VERSION].major <= 6) {\n        Snappy.uncompress(compressedData, { asBuffer: true }, callback);\n      } else {\n        Snappy.uncompress(compressedData, { asBuffer: true })\n          .then(buffer => callback(undefined, buffer))\n          .catch(error => callback(error));\n      }\n      break;\n    }\n    case Compressor.zlib:\n      zlib.inflate(compressedData, callback as zlib.CompressCallback);\n      break;\n    default:\n      callback(undefined, compressedData);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}