{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0; // shared state names\n\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\n\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\n\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\n\nfunction _advanceClusterTime(entity, $clusterTime) {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\n\nexports._advanceClusterTime = _advanceClusterTime;","map":{"version":3,"mappings":";;;;;gNAIA;;AACaA,wBAAgB,SAAhB;AACAA,uBAAe,QAAf;AACAA,2BAAmB,YAAnB;AACAA,0BAAkB,WAAlB;AAEb;;;;;AAIaA,uBAAeC,MAAM,CAACC,MAAP,CAAc;AACxCC,QAAM,EAAE,QADgC;AAExCC,qBAAmB,EAAE,qBAFmB;AAGxCC,uBAAqB,EAAE,uBAHiB;AAIxCC,SAAO,EAAE,SAJ+B;AAKxCC,SAAO,EAAE,SAL+B;AAMxCC,cAAY,EAAE;AAN0B,CAAd,CAAf;AAYb;;;;;AAIaR,qBAAaC,MAAM,CAACC,MAAP,CAAc;AACtCO,YAAU,EAAE,YAD0B;AAEtCC,QAAM,EAAE,QAF8B;AAGtCC,iBAAe,EAAE,iBAHqB;AAItCC,WAAS,EAAE,WAJ2B;AAKtCC,aAAW,EAAE,aALyB;AAMtCC,WAAS,EAAE,WAN2B;AAOtCC,SAAO,EAAE,SAP6B;AAQtCC,SAAO,EAAE,SAR6B;AAStCT,SAAO,EAAE,SAT6B;AAUtCU,cAAY,EAAE;AAVwB,CAAd,CAAb;AAmBb;;AACA,SAAgBC,eAAhB,CAAgCC,KAAhC,EAAiD;AAC/CA,OAAK,CAACC,OAAN,CAAcC,YAAd;AACAF,OAAK,CAACG,KAAN;AACD;;AAHDtB;AAcA;;AACA,SAAgBuB,mBAAhB,CACEC,MADF,EAEEC,YAFF,EAE2B;AAEzB,MAAID,MAAM,CAACE,WAAP,IAAsB,IAA1B,EAAgC;AAC9BF,UAAM,CAACE,WAAP,GAAqBD,YAArB;AACD,GAFD,MAEO;AACL,QAAIA,YAAY,CAACC,WAAb,CAAyBC,WAAzB,CAAqCH,MAAM,CAACE,WAAP,CAAmBA,WAAxD,CAAJ,EAA0E;AACxEF,YAAM,CAACE,WAAP,GAAqBD,YAArB;AACD;AACF;AACF;;AAXDzB","names":["exports","Object","freeze","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","LoadBalanced","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","LoadBalancer","drainTimerQueue","queue","forEach","clearTimeout","clear","_advanceClusterTime","entity","$clusterTime","clusterTime","greaterThan"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\sdam\\common.ts"],"sourcesContent":["import type { Binary, Long, Timestamp } from '../bson';\nimport type { ClientSession } from '../sessions';\nimport type { Topology } from './topology';\n\n// shared state names\nexport const STATE_CLOSING = 'closing';\nexport const STATE_CLOSED = 'closed';\nexport const STATE_CONNECTING = 'connecting';\nexport const STATE_CONNECTED = 'connected';\n\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexport const TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n} as const);\n\n/** @public */\nexport type TopologyType = typeof TopologyType[keyof typeof TopologyType];\n\n/**\n * An enumeration of server types we know about\n * @public\n */\nexport const ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n} as const);\n\n/** @public */\nexport type ServerType = typeof ServerType[keyof typeof ServerType];\n\n/** @internal */\nexport type TimerQueue = Set<NodeJS.Timeout>;\n\n/** @internal */\nexport function drainTimerQueue(queue: TimerQueue): void {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\n/** @public */\nexport interface ClusterTime {\n  clusterTime: Timestamp;\n  signature: {\n    hash: Binary;\n    keyId: Long;\n  };\n}\n\n/** Shared function to determine clusterTime for a given topology or session */\nexport function _advanceClusterTime(\n  entity: Topology | ClientSession,\n  $clusterTime: ClusterTime\n): void {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}