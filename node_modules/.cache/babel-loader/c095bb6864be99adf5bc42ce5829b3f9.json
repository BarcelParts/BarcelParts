{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\n\nconst index_1 = __importStar(require(\"./index\"));\n\nfunction redactValidConnectionString(inputUrl, options) {\n  var _a, _b;\n\n  const url = inputUrl.clone();\n  const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n  const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n\n  if ((url.username || url.password) && redactUsernames) {\n    url.username = replacementString;\n    url.password = '';\n  } else if (url.password) {\n    url.password = replacementString;\n  }\n\n  if (url.searchParams.has('authMechanismProperties')) {\n    const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n\n    if (props.get('AWS_SESSION_TOKEN')) {\n      props.set('AWS_SESSION_TOKEN', replacementString);\n      url.searchParams.set('authMechanismProperties', props.toString());\n    }\n  }\n\n  if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n    url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n  }\n\n  if (url.searchParams.has('proxyUsername') && redactUsernames) {\n    url.searchParams.set('proxyUsername', replacementString);\n  }\n\n  if (url.searchParams.has('proxyPassword')) {\n    url.searchParams.set('proxyPassword', replacementString);\n  }\n\n  return url;\n}\n\nexports.redactValidConnectionString = redactValidConnectionString;\n\nfunction redactConnectionString(uri, options) {\n  var _a, _b;\n\n  const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n  const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n  let parsed;\n\n  try {\n    parsed = new index_1.default(uri);\n  } catch (_c) {}\n\n  if (parsed) {\n    options = { ...options,\n      replacementString: '___credentials___'\n    };\n    return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n  }\n\n  const regexes = [redactUsernames ? /(?<=\\/\\/)(.*)(?=@)/g : /(?<=\\/\\/[^@]+:)(.*)(?=@)/g, /(?<=AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, /(?<=tlsCertificateKeyFilePassword=)([^&]+)/gi, redactUsernames ? /(?<=proxyUsername=)([^&]+)/gi : null, /(?<=proxyPassword=)([^&]+)/gi];\n\n  for (const r of regexes) {\n    if (r !== null) {\n      uri = uri.replace(r, replacementString);\n    }\n  }\n\n  return uri;\n}\n\nexports.redactConnectionString = redactConnectionString;","map":{"version":3,"mappings":"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","names":["redactValidConnectionString","inputUrl","options","url","clone","replacementString","_a","redactUsernames","_b","username","password","searchParams","has","props","index_1","get","set","toString","exports","redactConnectionString","uri","parsed","redact","replace","regexes","r"],"sources":["../src/redact.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}