{"ast":null,"code":"import { gapi, gapiComplete } from './gapiScript';\n/**\r\n * Function to load gapi auth2 from a gapi that you provied\r\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\r\n * @param {Object} gapiScript gapi script object\r\n * @param {string} clientId Your google clientID string\r\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\r\n */\n\nconst loadAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init({\n        client_id: clientId,\n        scope: scopes\n      }));\n    });\n  });\n};\n/**\r\n * Function to init gapi auth2 with props\r\n * @param {Object} gapiScript gapi script object\r\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\r\n */\n\n\nconst loadAuth2WithProps = async function (gapiScript, props) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init(props));\n    });\n  });\n};\n/**\r\n *\r\n * @param {Object} gapiScript gapi script object\r\n * @param {string} clientId Your google clientID string\r\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\r\n */\n\n\nconst loadClientAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n    gapiScript.load('client', () => {\n      resolve(gapiScript.client.init({\n        client_id: clientId,\n        scope: scopes\n      }));\n    });\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.client.init({\n        client_id: clientId,\n        scope: scopes\n      }));\n    });\n  });\n};\n/**\r\n * A very special function to load the gapi inside the DOM, directly.\r\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\r\n * let gapi = loadGapiInsideDOM();\r\n * Now you can use it anywhere.\r\n */\n\n\nconst loadGapiInsideDOM = async function () {\n  return new Promise(resolve => {\n    const element = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-platform';\n    js.src = '//apis.google.com/js/platform.js';\n    js.async = true;\n    js.defer = true;\n    element.parentNode.insertBefore(js, element);\n\n    js.onload = async () => {\n      resolve(window.gapi);\n    };\n  });\n};\n\nexport { gapi, gapiComplete, loadAuth2, loadAuth2WithProps, loadClientAuth2, loadGapiInsideDOM };","map":{"version":3,"sources":["C:/Users/diogo/Desktop/Web Applications Technologies/Project/BarcelPartsEste/BarcelParts/node_modules/gapi-script/index.js"],"names":["gapi","gapiComplete","loadAuth2","gapiScript","clientId","scopes","Promise","resolve","load","auth2","init","client_id","scope","loadAuth2WithProps","props","loadClientAuth2","client","loadGapiInsideDOM","element","document","getElementsByTagName","js","createElement","id","src","async","defer","parentNode","insertBefore","onload","window"],"mappings":"AAAA,SAASA,IAAT,EAAeC,YAAf,QAAmC,cAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,gBAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,MAAtC,EAA8C;AAC9D,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BJ,IAAAA,UAAU,CAACK,IAAX,CAAgB,OAAhB,EAAyB,MAAM;AAC7BD,MAAAA,OAAO,CAACJ,UAAU,CAACM,KAAX,CAAiBC,IAAjB,CAAsB;AAC5BC,QAAAA,SAAS,EAAEP,QADiB;AAE5BQ,QAAAA,KAAK,EAAEP;AAFqB,OAAtB,CAAD,CAAP;AAID,KALD;AAMD,GAPM,CAAP;AAQD,CATD;AAWA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,kBAAkB,GAAG,gBAAgBV,UAAhB,EAA4BW,KAA5B,EAAmC;AAC5D,SAAO,IAAIR,OAAJ,CAAYC,OAAO,IAAI;AAC5BJ,IAAAA,UAAU,CAACK,IAAX,CAAgB,OAAhB,EAAyB,MAAM;AAC7BD,MAAAA,OAAO,CAACJ,UAAU,CAACM,KAAX,CAAiBC,IAAjB,CAAsBI,KAAtB,CAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG,gBAAgBZ,UAAhB,EAA4BC,QAA5B,EAAsCC,MAAtC,EAA8C;AACpE,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BJ,IAAAA,UAAU,CAACK,IAAX,CAAgB,QAAhB,EAA0B,MAAM;AAC5BD,MAAAA,OAAO,CAACJ,UAAU,CAACa,MAAX,CAAkBN,IAAlB,CAAuB;AAC3BC,QAAAA,SAAS,EAAEP,QADgB;AAE3BQ,QAAAA,KAAK,EAAEP;AAFoB,OAAvB,CAAD,CAAP;AAIH,KALD;AAMAF,IAAAA,UAAU,CAACK,IAAX,CAAgB,OAAhB,EAAyB,MAAM;AAC3BD,MAAAA,OAAO,CAACJ,UAAU,CAACa,MAAX,CAAkBN,IAAlB,CAAuB;AAC3BC,QAAAA,SAAS,EAAEP,QADgB;AAE3BQ,QAAAA,KAAK,EAAEP;AAFoB,OAAvB,CAAD,CAAP;AAIH,KALD;AAMH,GAbM,CAAP;AAcD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMY,iBAAiB,GAAG,kBAAkB;AAC1C,SAAO,IAAIX,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAMW,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAhB;AACA,UAAMC,EAAE,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAX;AACAD,IAAAA,EAAE,CAACE,EAAH,GAAQ,iBAAR;AACAF,IAAAA,EAAE,CAACG,GAAH,GAAS,kCAAT;AACAH,IAAAA,EAAE,CAACI,KAAH,GAAW,IAAX;AACAJ,IAAAA,EAAE,CAACK,KAAH,GAAW,IAAX;AACAR,IAAAA,OAAO,CAACS,UAAR,CAAmBC,YAAnB,CAAgCP,EAAhC,EAAoCH,OAApC;;AACAG,IAAAA,EAAE,CAACQ,MAAH,GAAY,YAAY;AACtBtB,MAAAA,OAAO,CAACuB,MAAM,CAAC9B,IAAR,CAAP;AACD,KAFD;AAGD,GAXM,CAAP;AAYD,CAbD;;AAeA,SACEA,IADF,EAEEC,YAFF,EAGEC,SAHF,EAIEW,kBAJF,EAKEE,eALF,EAMEE,iBANF","sourcesContent":["import { gapi, gapiComplete } from './gapiScript';\r\n\r\n/**\r\n * Function to load gapi auth2 from a gapi that you provied\r\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\r\n * @param {Object} gapiScript gapi script object\r\n * @param {string} clientId Your google clientID string\r\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\r\n */\r\nconst loadAuth2 = async function (gapiScript, clientId, scopes) {\r\n  return new Promise(resolve => {\r\n    gapiScript.load('auth2', () => {\r\n      resolve(gapiScript.auth2.init({\r\n        client_id: clientId,\r\n        scope: scopes\r\n      }));\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Function to init gapi auth2 with props\r\n * @param {Object} gapiScript gapi script object\r\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\r\n */\r\nconst loadAuth2WithProps = async function (gapiScript, props) {\r\n  return new Promise(resolve => {\r\n    gapiScript.load('auth2', () => {\r\n      resolve(gapiScript.auth2.init(props));\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} gapiScript gapi script object\r\n * @param {string} clientId Your google clientID string\r\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\r\n */\r\nconst loadClientAuth2 = async function (gapiScript, clientId, scopes) {\r\n  return new Promise(resolve => {\r\n      gapiScript.load('client', () => {\r\n          resolve(gapiScript.client.init({\r\n              client_id: clientId,\r\n              scope: scopes\r\n          }));\r\n      });\r\n      gapiScript.load('auth2', () => {\r\n          resolve(gapiScript.client.init({\r\n              client_id: clientId,\r\n              scope: scopes\r\n          }));\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * A very special function to load the gapi inside the DOM, directly.\r\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\r\n * let gapi = loadGapiInsideDOM();\r\n * Now you can use it anywhere.\r\n */\r\nconst loadGapiInsideDOM = async function () {\r\n  return new Promise(resolve => {\r\n    const element = document.getElementsByTagName('script')[0];\r\n    const js = document.createElement('script');\r\n    js.id = 'google-platform';\r\n    js.src = '//apis.google.com/js/platform.js';\r\n    js.async = true;\r\n    js.defer = true;\r\n    element.parentNode.insertBefore(js, element);\r\n    js.onload = async () => {\r\n      resolve(window.gapi);\r\n    }\r\n  });\r\n}\r\n\r\nexport {\r\n  gapi,\r\n  gapiComplete,\r\n  loadAuth2,\r\n  loadAuth2WithProps,\r\n  loadClientAuth2,\r\n  loadGapiInsideDOM,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}