{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\n\nexports.ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n});\n/** @internal */\n\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n  constructor(db, level, options) {\n    super(db, options);\n    this.options = options;\n\n    switch (level) {\n      case exports.ProfilingLevel.off:\n        this.profile = 0;\n        break;\n\n      case exports.ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n\n      case exports.ProfilingLevel.all:\n        this.profile = 2;\n        break;\n\n      default:\n        this.profile = 0;\n        break;\n    }\n\n    this.level = level;\n  }\n\n  execute(server, session, callback) {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`));\n    } // TODO(NODE-3483): Determine error to put here\n\n\n    super.executeCommand(server, session, {\n      profile: this.profile\n    }, (err, doc) => {\n      if (err == null && doc.ok === 1) return callback(undefined, level);\n      return err != null ? callback(err) : callback(new error_1.MongoRuntimeError('Error with profile command'));\n    });\n  }\n\n}\n\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;","map":{"version":3,"mappings":";;;;;;;AACA;;AAIA;;AACA;;AAEA,MAAMA,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,WAAR,EAAqB,KAArB,CAAR,CAApB;AAEA;;AACaC,yBAAiBC,MAAM,CAACC,MAAP,CAAc;AAC1CC,KAAG,EAAE,KADqC;AAE1CC,UAAQ,EAAE,WAFgC;AAG1CC,KAAG,EAAE;AAHqC,CAAd,CAAjB;AAYb;;AACA,MAAaC,0BAAb,SAAgDC,0BAAhD,CAAgF;AAK9EC,cAAYC,EAAZ,EAAoBC,KAApB,EAA2CC,OAA3C,EAA4E;AAC1E,UAAMF,EAAN,EAAUE,OAAV;AACA,SAAKA,OAAL,GAAeA,OAAf;;AACA,YAAQD,KAAR;AACE,WAAKV,uBAAeG,GAApB;AACE,aAAKS,OAAL,GAAe,CAAf;AACA;;AACF,WAAKZ,uBAAeI,QAApB;AACE,aAAKQ,OAAL,GAAe,CAAf;AACA;;AACF,WAAKZ,uBAAeK,GAApB;AACE,aAAKO,OAAL,GAAe,CAAf;AACA;;AACF;AACE,aAAKA,OAAL,GAAe,CAAf;AACA;AAZJ;;AAeA,SAAKF,KAAL,GAAaA,KAAb;AACD;;AAEQG,SAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGoB;AAElC,UAAMN,KAAK,GAAG,KAAKA,KAAnB;;AAEA,QAAI,CAACZ,WAAW,CAACmB,GAAZ,CAAgBP,KAAhB,CAAL,EAA6B;AAC3B,aAAOM,QAAQ,CACb,IAAIE,iCAAJ,CACE,mCAAmC,0BAAalB,sBAAb,CAA4B,GADjE,CADa,CAAf;AAKD,KAViC,CAYlC;;;AACA,UAAMmB,cAAN,CAAqBL,MAArB,EAA6BC,OAA7B,EAAsC;AAAEH,aAAO,EAAE,KAAKA;AAAhB,KAAtC,EAAiE,CAACQ,GAAD,EAAMC,GAAN,KAAa;AAC5E,UAAID,GAAG,IAAI,IAAP,IAAeC,GAAG,CAACC,EAAJ,KAAW,CAA9B,EAAiC,OAAON,QAAQ,CAACO,SAAD,EAAYb,KAAZ,CAAf;AACjC,aAAOU,GAAG,IAAI,IAAP,GACHJ,QAAQ,CAACI,GAAD,CADL,GAEHJ,QAAQ,CAAC,IAAIE,yBAAJ,CAAsB,4BAAtB,CAAD,CAFZ;AAGD,KALD;AAMD;;AAhD6E;;AAAhFlB","names":["levelValues","Set","exports","Object","freeze","off","slowOnly","all","SetProfilingLevelOperation","command_1","constructor","db","level","options","profile","execute","server","session","callback","has","error_1","executeCommand","err","doc","ok","undefined"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\set_profiling_level.ts"],"sourcesContent":["import type { Db } from '../db';\nimport { MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { enumToString } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\n\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n\n/** @public */\nexport const ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n} as const);\n\n/** @public */\nexport type ProfilingLevel = typeof ProfilingLevel[keyof typeof ProfilingLevel];\n\n/** @public */\nexport type SetProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class SetProfilingLevelOperation extends CommandOperation<ProfilingLevel> {\n  override options: SetProfilingLevelOptions;\n  level: ProfilingLevel;\n  profile: 0 | 1 | 2;\n\n  constructor(db: Db, level: ProfilingLevel, options: SetProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n    switch (level) {\n      case ProfilingLevel.off:\n        this.profile = 0;\n        break;\n      case ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n      case ProfilingLevel.all:\n        this.profile = 2;\n        break;\n      default:\n        this.profile = 0;\n        break;\n    }\n\n    this.level = level;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<ProfilingLevel>\n  ): void {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(\n        new MongoInvalidArgumentError(\n          `Profiling level must be one of \"${enumToString(ProfilingLevel)}\"`\n        )\n      );\n    }\n\n    // TODO(NODE-3483): Determine error to put here\n    super.executeCommand(server, session, { profile: this.profile }, (err, doc) => {\n      if (err == null && doc.ok === 1) return callback(undefined, level);\n      return err != null\n        ? callback(err)\n        : callback(new MongoRuntimeError('Error with profile command'));\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}