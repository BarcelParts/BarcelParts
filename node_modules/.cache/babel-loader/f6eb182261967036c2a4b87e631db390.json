{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diogo\\\\Documents\\\\GitHub\\\\BarcelParts\\\\src\\\\Services\\\\login.js\";\nimport { GoogleLogin } from 'react-google-login';\nimport ProductDataService from \"../Services/Barcelparts.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\n\nfunction Login() {\n  const verifyIfUserExists = userData => {\n    ProductDataService.findUser(userData).then(response => {\n      //Console log for debugging and developing\n      console.log(response.data);\n\n      if (response.data == null) {\n        //if the user doesn't exist, we create it\n        ProductDataService.createUser(userData);\n      }\n    }) //If there is an error catches it and displays it in the console\n    .catch(e => {\n      console.log(e);\n    });\n  };\n\n  const onSuccess = res => {\n    var userData = {\n      \"_id\": res.profileObj.googleId,\n      \"User_FirstName\": res.profileObj.givenName,\n      \"User_LastName\": res.profileObj.familyName,\n      \"User_Image\": res.profileObj.imageUrl,\n      \"Email\": res.profileObj.email\n    };\n    verifyIfUserExists(userData);\n    console.log(\"LOGIN SUCCESS! CUrrent user: \", res.profileObj);\n\n    var CryptoJS = require(\"crypto-js\"); //Encrypt THE COOKIE and add it to the browser\n\n\n    document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(res.profileObj.googleId, 'secret key 123').toString();\n  };\n\n  const onFailure = res => {\n    console.log(\"LOGIN FAILED! res: \", res);\n  };\n\n  const reloadPage = () => {\n    window.location.reload(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: clientId,\n      buttonText: \"Login\",\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      cookiePolicy: 'single_host_origin',\n      reloadPage: reloadPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Diogo/Documents/GitHub/BarcelParts/src/Services/login.js"],"names":["GoogleLogin","ProductDataService","React","clientId","Login","verifyIfUserExists","userData","findUser","then","response","console","log","data","createUser","catch","e","onSuccess","res","profileObj","googleId","givenName","familyName","imageUrl","email","CryptoJS","require","document","cookie","AES","encrypt","toString","onFailure","reloadPage","window","location","reload"],"mappings":";AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAG,2EAAjB;;AAEA,SAASC,KAAT,GAAiB;AAEb,QAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrCL,IAAAA,kBAAkB,CAACM,QAAnB,CAA4BD,QAA5B,EACKE,IADL,CACUC,QAAQ,IAAI;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;;AACA,UAAIH,QAAQ,CAACG,IAAT,IAAiB,IAArB,EAA2B;AAAe;AACtCX,QAAAA,kBAAkB,CAACY,UAAnB,CAA8BP,QAA9B;AACH;AACJ,KAPL,EASI;AATJ,KAUKQ,KAVL,CAUWC,CAAC,IAAI;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AACH,KAZL;AAaH,GAdD;;AAgBA,QAAMC,SAAS,GAAIC,GAAD,IAAS;AAEvB,QAAIX,QAAQ,GAAG;AACX,aAAOW,GAAG,CAACC,UAAJ,CAAeC,QADX;AAEX,wBAAkBF,GAAG,CAACC,UAAJ,CAAeE,SAFtB;AAGX,uBAAiBH,GAAG,CAACC,UAAJ,CAAeG,UAHrB;AAIX,oBAAcJ,GAAG,CAACC,UAAJ,CAAeI,QAJlB;AAKX,eAASL,GAAG,CAACC,UAAJ,CAAeK;AALb,KAAf;AAQAlB,IAAAA,kBAAkB,CAACC,QAAD,CAAlB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CM,GAAG,CAACC,UAAjD;;AAEA,QAAIM,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB,CAbuB,CAcvB;;;AACAC,IAAAA,QAAQ,CAACC,MAAT,GAAkB,kBAAkBH,QAAQ,CAACI,GAAT,CAAaC,OAAb,CAAqBZ,GAAG,CAACC,UAAJ,CAAeC,QAApC,EAA8C,gBAA9C,EAAgEW,QAAhE,EAApC;AACH,GAhBD;;AAkBA,QAAMC,SAAS,GAAId,GAAD,IAAS;AACvBP,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCM,GAAnC;AAEH,GAHD;;AAKA,QAAMe,UAAU,GAAG,MAAM;AACrBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,2BACI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAEhC,QADd;AAEI,MAAA,UAAU,EAAC,OAFf;AAGI,MAAA,SAAS,EAAEa,SAHf;AAII,MAAA,SAAS,EAAEe,SAJf;AAKI,MAAA,YAAY,EAAE,oBALlB;AAMI,MAAA,UAAU,EAAEC;AANhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;KAzDQ5B,K;AA2DT,eAAeA,KAAf","sourcesContent":["import { GoogleLogin } from 'react-google-login';\r\nimport ProductDataService from \"../Services/Barcelparts.js\"\r\nimport React from \"react\";\r\n\r\nconst clientId = \"1040605938120-vj3qmpjvouj820vrum6lu196p1j1p2jp.apps.googleusercontent.com\";\r\n\r\nfunction Login() {\r\n\r\n    const verifyIfUserExists = (userData) => {\r\n        ProductDataService.findUser(userData)\r\n            .then(response => {\r\n                //Console log for debugging and developing\r\n                console.log(response.data)\r\n                if (response.data == null) {              //if the user doesn't exist, we create it\r\n                    ProductDataService.createUser(userData)\r\n                }\r\n            })\r\n\r\n            //If there is an error catches it and displays it in the console\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    const onSuccess = (res) => {\r\n\r\n        var userData = {\r\n            \"_id\": res.profileObj.googleId,\r\n            \"User_FirstName\": res.profileObj.givenName,\r\n            \"User_LastName\": res.profileObj.familyName,\r\n            \"User_Image\": res.profileObj.imageUrl,\r\n            \"Email\": res.profileObj.email\r\n        }\r\n\r\n        verifyIfUserExists(userData);\r\n        console.log(\"LOGIN SUCCESS! CUrrent user: \", res.profileObj)\r\n\r\n        var CryptoJS = require(\"crypto-js\");\r\n        //Encrypt THE COOKIE and add it to the browser\r\n        document.cookie = \"userGoogleId=\" + CryptoJS.AES.encrypt(res.profileObj.googleId, 'secret key 123').toString();\r\n    }\r\n\r\n    const onFailure = (res) => {\r\n        console.log(\"LOGIN FAILED! res: \", res)\r\n\r\n    }\r\n\r\n    const reloadPage = () => {\r\n        window.location.reload(true);\r\n    }\r\n\r\n    return (\r\n        <div id=\"signInButton\">\r\n            <GoogleLogin\r\n                clientId={clientId}\r\n                buttonText=\"Login\"\r\n                onSuccess={onSuccess}\r\n                onFailure={onFailure}\r\n                cookiePolicy={'single_host_origin'}\r\n                reloadPage={reloadPage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}