{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst explain_1 = require(\"../explain\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst server_selection_1 = require(\"../sdam/server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst operation_1 = require(\"./operation\");\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n/** @internal */\n\nclass CommandOperation extends operation_1.AbstractOperation {\n  constructor(parent, options) {\n    super(options);\n    this.options = options !== null && options !== void 0 ? options : {}; // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n\n    const dbNameOverride = (options === null || options === void 0 ? void 0 : options.dbName) || (options === null || options === void 0 ? void 0 : options.authdb);\n\n    if (dbNameOverride) {\n      this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options); // TODO(NODE-2056): make logger another \"inheritable\" property\n\n    if (parent && parent.logger) {\n      this.logger = parent.logger;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      this.explain = explain_1.Explain.fromOptions(options);\n    } else if ((options === null || options === void 0 ? void 0 : options.explain) != null) {\n      throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  get canRetryWrite() {\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n\n    return true;\n  }\n\n  executeCommand(server, session, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n\n    if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, {\n        writeConcern: this.writeConcern\n      });\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n        Object.assign(cmd, {\n          collation: options.collation\n        });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n      if (serverWireVersion < 6 && cmd.aggregate) {\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\n        cmd.explain = true;\n      } else {\n        cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n      }\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n\n}\n\nexports.CommandOperation = CommandOperation;","map":{"version":3,"mappings":"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","names":["SUPPORTS_WRITE_CONCERN_AND_COLLATION","CommandOperation","operation_1","constructor","parent","options","dbNameOverride","dbName","authdb","ns","utils_1","s","namespace","withCollection","readConcern","read_concern_1","fromOptions","writeConcern","write_concern_1","logger","hasAspect","EXPLAINABLE","explain","explain_1","error_1","canRetryWrite","executeCommand","server","session","cmd","callback","bsonOptions","readPreference","serverWireVersion","inTransaction","Object","assign","trySecondaryWrite","server_selection_1","omitReadPreference","collation","name","WRITE_OPERATION","SKIP_COLLATION","maxTimeMS","comment","aggregate","command","exports"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\operations\\command.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\r\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\r\nimport { Explain, ExplainOptions } from '../explain';\r\nimport type { Logger } from '../logger';\r\nimport { ReadConcern } from '../read_concern';\r\nimport type { ReadPreference } from '../read_preference';\r\nimport type { Server } from '../sdam/server';\r\nimport { MIN_SECONDARY_WRITE_WIRE_VERSION } from '../sdam/server_selection';\r\nimport type { ClientSession } from '../sessions';\r\nimport {\r\n  Callback,\r\n  commandSupportsReadConcern,\r\n  decorateWithExplain,\r\n  maxWireVersion,\r\n  MongoDBNamespace\r\n} from '../utils';\r\nimport { WriteConcern, WriteConcernOptions } from '../write_concern';\r\nimport type { ReadConcernLike } from './../read_concern';\r\nimport { AbstractOperation, Aspect, OperationOptions } from './operation';\r\n\r\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\r\n\r\n/** @public */\r\nexport interface CollationOptions {\r\n  locale: string;\r\n  caseLevel?: boolean;\r\n  caseFirst?: string;\r\n  strength?: number;\r\n  numericOrdering?: boolean;\r\n  alternate?: string;\r\n  maxVariable?: string;\r\n  backwards?: boolean;\r\n  normalization?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface CommandOperationOptions\r\n  extends OperationOptions,\r\n    WriteConcernOptions,\r\n    ExplainOptions {\r\n  /** @deprecated This option does nothing */\r\n  fullResponse?: boolean;\r\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\r\n  readConcern?: ReadConcernLike;\r\n  /** Collation */\r\n  collation?: CollationOptions;\r\n  maxTimeMS?: number;\r\n  /**\r\n   * Comment to apply to the operation.\r\n   *\r\n   * In server versions pre-4.4, 'comment' must be string.  A server\r\n   * error will be thrown if any other type is provided.\r\n   *\r\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\r\n   */\r\n  comment?: unknown;\r\n  /** Should retry failed writes */\r\n  retryWrites?: boolean;\r\n\r\n  // Admin command overrides.\r\n  dbName?: string;\r\n  authdb?: string;\r\n  noResponse?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport interface OperationParent {\r\n  s: { namespace: MongoDBNamespace };\r\n  readConcern?: ReadConcern;\r\n  writeConcern?: WriteConcern;\r\n  readPreference?: ReadPreference;\r\n  logger?: Logger;\r\n  bsonOptions?: BSONSerializeOptions;\r\n}\r\n\r\n/** @internal */\r\nexport abstract class CommandOperation<T> extends AbstractOperation<T> {\r\n  override options: CommandOperationOptions;\r\n  readConcern?: ReadConcern;\r\n  writeConcern?: WriteConcern;\r\n  explain?: Explain;\r\n  logger?: Logger;\r\n\r\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\r\n    super(options);\r\n    this.options = options ?? {};\r\n\r\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\r\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\r\n    //       as a parent?\r\n    const dbNameOverride = options?.dbName || options?.authdb;\r\n    if (dbNameOverride) {\r\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\r\n    } else {\r\n      this.ns = parent\r\n        ? parent.s.namespace.withCollection('$cmd')\r\n        : new MongoDBNamespace('admin', '$cmd');\r\n    }\r\n\r\n    this.readConcern = ReadConcern.fromOptions(options);\r\n    this.writeConcern = WriteConcern.fromOptions(options);\r\n\r\n    // TODO(NODE-2056): make logger another \"inheritable\" property\r\n    if (parent && parent.logger) {\r\n      this.logger = parent.logger;\r\n    }\r\n\r\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\r\n      this.explain = Explain.fromOptions(options);\r\n    } else if (options?.explain != null) {\r\n      throw new MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\r\n    }\r\n  }\r\n\r\n  override get canRetryWrite(): boolean {\r\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\r\n      return this.explain == null;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  abstract override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<T>\r\n  ): void;\r\n\r\n  executeCommand(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    cmd: Document,\r\n    callback: Callback\r\n  ): void {\r\n    // TODO: consider making this a non-enumerable property\r\n    this.server = server;\r\n\r\n    const options = {\r\n      ...this.options,\r\n      ...this.bsonOptions,\r\n      readPreference: this.readPreference,\r\n      session\r\n    };\r\n\r\n    const serverWireVersion = maxWireVersion(server);\r\n    const inTransaction = this.session && this.session.inTransaction();\r\n\r\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\r\n      Object.assign(cmd, { readConcern: this.readConcern });\r\n    }\r\n\r\n    if (this.trySecondaryWrite && serverWireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION) {\r\n      options.omitReadPreference = true;\r\n    }\r\n\r\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\r\n      callback(\r\n        new MongoCompatibilityError(\r\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\r\n        )\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\r\n      Object.assign(cmd, { writeConcern: this.writeConcern });\r\n    }\r\n\r\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\r\n      if (\r\n        options.collation &&\r\n        typeof options.collation === 'object' &&\r\n        !this.hasAspect(Aspect.SKIP_COLLATION)\r\n      ) {\r\n        Object.assign(cmd, { collation: options.collation });\r\n      }\r\n    }\r\n\r\n    if (typeof options.maxTimeMS === 'number') {\r\n      cmd.maxTimeMS = options.maxTimeMS;\r\n    }\r\n\r\n    if (typeof options.comment === 'string') {\r\n      cmd.comment = options.comment;\r\n    }\r\n\r\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\r\n      if (serverWireVersion < 6 && cmd.aggregate) {\r\n        // Prior to 3.6, with aggregate, verbosity is ignored, and we must pass in \"explain: true\"\r\n        cmd.explain = true;\r\n      } else {\r\n        cmd = decorateWithExplain(cmd, this.explain);\r\n      }\r\n    }\r\n\r\n    server.command(this.ns, cmd, options, callback);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}