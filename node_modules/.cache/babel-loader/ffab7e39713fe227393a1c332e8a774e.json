{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromiseProvider = void 0;\n\nconst error_1 = require(\"./error\");\n/** @internal */\n\n\nconst kPromise = Symbol('promise');\nconst store = {\n  [kPromise]: undefined\n};\n/**\n * Global promise store allowing user-provided promises\n * @public\n */\n\nclass PromiseProvider {\n  /** Validates the passed in promise library */\n  static validate(lib) {\n    if (typeof lib !== 'function') throw new error_1.MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n  /** Sets the promise library */\n\n\n  static set(lib) {\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n\n    store[kPromise] = lib;\n  }\n  /** Get the stored promise library, or resolves passed in */\n\n\n  static get() {\n    return store[kPromise];\n  }\n\n}\n\nexports.PromiseProvider = PromiseProvider;\nPromiseProvider.set(global.Promise);","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;AACA,MAAMA,QAAQ,GAAGC,MAAM,CAAC,SAAD,CAAvB;AAMA,MAAMC,KAAK,GAAiB;AAC1B,GAACF,QAAD,GAAYG;AADc,CAA5B;AAIA;;;;;AAIA,MAAaC,eAAb,CAA4B;AAC1B;AACe,SAARC,QAAQ,CAACC,GAAD,EAAa;AAC1B,QAAI,OAAOA,GAAP,KAAe,UAAnB,EACE,MAAM,IAAIC,iCAAJ,CAA8B,mCAAmCD,GAAG,EAApE,CAAN;AACF,WAAO,CAAC,CAACA,GAAT;AACD;AAED;;;AACU,SAAHE,GAAG,CAACF,GAAD,EAAwB;AAChC,QAAI,CAACF,eAAe,CAACC,QAAhB,CAAyBC,GAAzB,CAAL,EAAoC;AAClC;AACA;AACD;;AACDJ,SAAK,CAACF,QAAD,CAAL,GAAkBM,GAAlB;AACD;AAED;;;AACU,SAAHG,GAAG;AACR,WAAOP,KAAK,CAACF,QAAD,CAAZ;AACD;;AApByB;;AAA5BU;AAuBAN,eAAe,CAACI,GAAhB,CAAoBG,MAAM,CAACC,OAA3B","names":["kPromise","Symbol","store","undefined","PromiseProvider","validate","lib","error_1","set","get","exports","global","Promise"],"sources":["D:\\Barcelparts\\node_modules\\mongodb\\src\\promise_provider.ts"],"sourcesContent":["import { MongoInvalidArgumentError } from './error';\n\n/** @internal */\nconst kPromise = Symbol('promise');\n\ninterface PromiseStore {\n  [kPromise]?: PromiseConstructor;\n}\n\nconst store: PromiseStore = {\n  [kPromise]: undefined\n};\n\n/**\n * Global promise store allowing user-provided promises\n * @public\n */\nexport class PromiseProvider {\n  /** Validates the passed in promise library */\n  static validate(lib: unknown): lib is PromiseConstructor {\n    if (typeof lib !== 'function')\n      throw new MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n\n  /** Sets the promise library */\n  static set(lib: PromiseConstructor): void {\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n\n  /** Get the stored promise library, or resolves passed in */\n  static get(): PromiseConstructor {\n    return store[kPromise] as PromiseConstructor;\n  }\n}\n\nPromiseProvider.set(global.Promise);\n"]},"metadata":{},"sourceType":"script"}